/******************************************************************************
 * Copyright (C) 1997-2015 by Jimi Damon <jdamon@accesio.com>
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 *
 */
/*! 
\page classlib AIOUSB C++ class library

\section classlib_modules Modules



Note that compound entities (like classes, files and namespaces) can
be put into multiple groups, but members (like variable, functions, typedefs
and enums) can only be a member of one group 
(this restriction is in place to avoid ambiguous linking targets in case 
a member is not documented in the context of its class, namespace
or file, but only visible as part of a group).

The following example puts VarInA into group A and silently resolves 
the conflict for IntegerVariable by putting it into group IntVariables, 
because the second instance of IntegerVariable
is undocumented:

\verbatim

/**
 * \ingroup A
 */
extern int VarInA;

/**
 * \defgroup IntVariables Global integer variables
 * @{
 */

/** an integer variable */
extern int IntegerVariable;

/**@}*/

....

/**
 * \defgroup Variables Global variables
 */
/**@{*/

/** a variable in group A */
int VarInA;

int IntegerVariable;

/**@}*/
\endverbatim

\verbatim
This is the \ref group_label "link" to this group.
\endverbatim

Stuff....add this here

\par Example:
\verbatim
#include group.cpp
\endverbatim 

\htmlonly
Click <a href="examples/group/html/modules.html">here</a> 
\endhtmlonly

\section memgroup Member Groups

A member group is defined by 
a 
\verbatim
///@{ 
  ...
///@}
\endverbatim 
block or a 
\verbatim
/**@{*/ 
  ... 
/**@}*/ 
\endverbatim 
block if you prefer C style 
comments. Note that the members of the group should be 
physically inside the member group's body.

More stuff you need to add

Nesting of member groups is not allowed. 

If all members of a member group inside a class have the same type 
and protection level (for instance all are static public members), 
then the whole member group is displayed as a subgroup of 
the type/protection level group (the group is displayed as a 
subsection of the "Static Public Members" section for instance). 
If two or more members have different types, then the group is put 
at the same level as the automatically generated groups.
If you want to force all member-groups of a class to be at the top level, 


\par Example:

\htmlonly
Click <a href="examples/memgrp/html/class_test.html">here</a> 
\endhtmlonly

Here Group1 is displayed as a subsection of the "Public Members". And
Group2 is a separate section because it contains members with
different protection levels (i.e. public and protected).

\htmlonly
Go to the <a href="formulas.html">next</a> section or return to the
 <a href="index.html">index</a>.
\endhtmlonly

*/
