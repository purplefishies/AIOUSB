# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package AIOUSB;
use base qw(Exporter);
use base qw(DynaLoader);
package AIOUSBc;
bootstrap AIOUSB;
package AIOUSB;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package AIOUSB;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package AIOUSB;

*GetDevices = *AIOUSBc::GetDevices;
*QueryDeviceInfo = *AIOUSBc::QueryDeviceInfo;
*ClearDevices = *AIOUSBc::ClearDevices;
*ResolveDeviceIndex = *AIOUSBc::ResolveDeviceIndex;
*DIO_Configure = *AIOUSBc::DIO_Configure;
*DIO_ConfigureEx = *AIOUSBc::DIO_ConfigureEx;
*DIO_ConfigurationQuery = *AIOUSBc::DIO_ConfigurationQuery;
*DIO_WriteAll = *AIOUSBc::DIO_WriteAll;
*DIO_Write8 = *AIOUSBc::DIO_Write8;
*DIO_Write1 = *AIOUSBc::DIO_Write1;
*DIO_ReadAll = *AIOUSBc::DIO_ReadAll;
*DIO_Read8 = *AIOUSBc::DIO_Read8;
*DIO_Read1 = *AIOUSBc::DIO_Read1;
*DIO_StreamOpen = *AIOUSBc::DIO_StreamOpen;
*DIO_StreamClose = *AIOUSBc::DIO_StreamClose;
*DIO_StreamSetClocks = *AIOUSBc::DIO_StreamSetClocks;
*DIO_StreamFrame = *AIOUSBc::DIO_StreamFrame;
*CTR_8254Mode = *AIOUSBc::CTR_8254Mode;
*CTR_8254Load = *AIOUSBc::CTR_8254Load;
*CTR_8254ModeLoad = *AIOUSBc::CTR_8254ModeLoad;
*CTR_8254ReadModeLoad = *AIOUSBc::CTR_8254ReadModeLoad;
*CTR_8254Read = *AIOUSBc::CTR_8254Read;
*CTR_8254ReadAll = *AIOUSBc::CTR_8254ReadAll;
*CTR_8254ReadStatus = *AIOUSBc::CTR_8254ReadStatus;
*CTR_StartOutputFreq = *AIOUSBc::CTR_StartOutputFreq;
*CTR_8254SelectGate = *AIOUSBc::CTR_8254SelectGate;
*CTR_8254ReadLatched = *AIOUSBc::CTR_8254ReadLatched;
*ADC_GetChannelV = *AIOUSBc::ADC_GetChannelV;
*ADC_GetScanV = *AIOUSBc::ADC_GetScanV;
*ADC_GetScan = *AIOUSBc::ADC_GetScan;
*ADC_GetConfig = *AIOUSBc::ADC_GetConfig;
*ADC_SetConfig = *AIOUSBc::ADC_SetConfig;
*ADC_RangeAll = *AIOUSBc::ADC_RangeAll;
*ADC_Range1 = *AIOUSBc::ADC_Range1;
*ADC_ADMode = *AIOUSBc::ADC_ADMode;
*ADC_SetOversample = *AIOUSBc::ADC_SetOversample;
*ADC_SetScanLimits = *AIOUSBc::ADC_SetScanLimits;
*ADC_SetCal = *AIOUSBc::ADC_SetCal;
*ADC_QueryCal = *AIOUSBc::ADC_QueryCal;
*ADC_Initialize = *AIOUSBc::ADC_Initialize;
*ADC_BulkAcquire = *AIOUSBc::ADC_BulkAcquire;
*ADC_BulkPoll = *AIOUSBc::ADC_BulkPoll;
*ADC_GetADConfigBlock_Registers = *AIOUSBc::ADC_GetADConfigBlock_Registers;
*ADC_InitFastITScanV = *AIOUSBc::ADC_InitFastITScanV;
*ADC_CreateFastITConfig = *AIOUSBc::ADC_CreateFastITConfig;
*ADC_ResetFastITScanV = *AIOUSBc::ADC_ResetFastITScanV;
*ADC_SetFastITScanVChannels = *AIOUSBc::ADC_SetFastITScanVChannels;
*ADC_GetFastITScanV = *AIOUSBc::ADC_GetFastITScanV;
*ADC_GetITScanV = *AIOUSBc::ADC_GetITScanV;
*DACDirect = *AIOUSBc::DACDirect;
*DACMultiDirect = *AIOUSBc::DACMultiDirect;
*DACSetBoardRange = *AIOUSBc::DACSetBoardRange;
*DACOutputOpen = *AIOUSBc::DACOutputOpen;
*DACOutputClose = *AIOUSBc::DACOutputClose;
*DACOutputCloseNoEnd = *AIOUSBc::DACOutputCloseNoEnd;
*DACOutputSetCount = *AIOUSBc::DACOutputSetCount;
*DACOutputFrame = *AIOUSBc::DACOutputFrame;
*DACOutputFrameRaw = *AIOUSBc::DACOutputFrameRaw;
*DACOutputStart = *AIOUSBc::DACOutputStart;
*DACOutputSetInterlock = *AIOUSBc::DACOutputSetInterlock;
*GetDeviceSerialNumber = *AIOUSBc::GetDeviceSerialNumber;
*GetDeviceBySerialNumber = *AIOUSBc::GetDeviceBySerialNumber;
*CustomEEPROMWrite = *AIOUSBc::CustomEEPROMWrite;
*CustomEEPROMRead = *AIOUSBc::CustomEEPROMRead;
*AIOUSB_GetStreamingBlockSize = *AIOUSBc::AIOUSB_GetStreamingBlockSize;
*AIOUSB_SetStreamingBlockSize = *AIOUSBc::AIOUSB_SetStreamingBlockSize;
*AIOUSB_ClearFIFO = *AIOUSBc::AIOUSB_ClearFIFO;
*AIOUSB_GetVersion = *AIOUSBc::AIOUSB_GetVersion;
*AIOUSB_GetVersionDate = *AIOUSBc::AIOUSB_GetVersionDate;
*AIOUSB_GetResultCodeAsString = *AIOUSBc::AIOUSB_GetResultCodeAsString;
*AIOUSB_ListDevices = *AIOUSBc::AIOUSB_ListDevices;
*AIOUSB_Init = *AIOUSBc::AIOUSB_Init;
*AIOUSB_Exit = *AIOUSBc::AIOUSB_Exit;
*AIOUSB_Reset = *AIOUSBc::AIOUSB_Reset;
*AIOUSB_GetDeviceProperties = *AIOUSBc::AIOUSB_GetDeviceProperties;
*AIOUSB_GetDeviceByProductID = *AIOUSBc::AIOUSB_GetDeviceByProductID;
*AIOUSB_GetMiscClock = *AIOUSBc::AIOUSB_GetMiscClock;
*AIOUSB_SetMiscClock = *AIOUSBc::AIOUSB_SetMiscClock;
*AIOUSB_GetCommTimeout = *AIOUSBc::AIOUSB_GetCommTimeout;
*AIOUSB_SetCommTimeout = *AIOUSBc::AIOUSB_SetCommTimeout;
*AIOUSB_IsDiscardFirstSample = *AIOUSBc::AIOUSB_IsDiscardFirstSample;
*AIOUSB_SetDiscardFirstSample = *AIOUSBc::AIOUSB_SetDiscardFirstSample;
*AIOUSB_CountsToVolts = *AIOUSBc::AIOUSB_CountsToVolts;
*AIOUSB_MultipleCountsToVolts = *AIOUSBc::AIOUSB_MultipleCountsToVolts;
*AIOUSB_VoltsToCounts = *AIOUSBc::AIOUSB_VoltsToCounts;
*AIOUSB_MultipleVoltsToCounts = *AIOUSBc::AIOUSB_MultipleVoltsToCounts;
*AIOUSB_ADC_LoadCalTable = *AIOUSBc::AIOUSB_ADC_LoadCalTable;
*AIOUSB_ADC_SetCalTable = *AIOUSBc::AIOUSB_ADC_SetCalTable;
*AIOUSB_ADC_InternalCal = *AIOUSBc::AIOUSB_ADC_InternalCal;
*AIOUSB_SetRegister = *AIOUSBc::AIOUSB_SetRegister;
*AIOUSB_GetRegister = *AIOUSBc::AIOUSB_GetRegister;
*AIOUSB_ADC_ExternalCal = *AIOUSBc::AIOUSB_ADC_ExternalCal;
*AIOUSB_InitConfigBlock = *AIOUSBc::AIOUSB_InitConfigBlock;
*AIOUSB_SetAllGainCodeAndDiffMode = *AIOUSBc::AIOUSB_SetAllGainCodeAndDiffMode;
*AIOUSB_GetGainCode = *AIOUSBc::AIOUSB_GetGainCode;
*AIOUSB_SetGainCode = *AIOUSBc::AIOUSB_SetGainCode;
*AIOUSB_IsDifferentialMode = *AIOUSBc::AIOUSB_IsDifferentialMode;
*AIOUSB_SetDifferentialMode = *AIOUSBc::AIOUSB_SetDifferentialMode;
*AIOUSB_GetCalMode = *AIOUSBc::AIOUSB_GetCalMode;
*AIOUSB_SetCalMode = *AIOUSBc::AIOUSB_SetCalMode;
*AIOUSB_GetTriggerMode = *AIOUSBc::AIOUSB_GetTriggerMode;
*AIOUSB_SetTriggerMode = *AIOUSBc::AIOUSB_SetTriggerMode;
*AIOUSB_GetStartChannel = *AIOUSBc::AIOUSB_GetStartChannel;
*AIOUSB_GetEndChannel = *AIOUSBc::AIOUSB_GetEndChannel;
*AIOUSB_SetScanRange = *AIOUSBc::AIOUSB_SetScanRange;
*AIOUSB_GetOversample = *AIOUSBc::AIOUSB_GetOversample;
*AIOUSB_SetOversample = *AIOUSBc::AIOUSB_SetOversample;

############# Class : AIOUSB::BulkAcquireWorkerParams ##############

package AIOUSB::BulkAcquireWorkerParams;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( AIOUSB );
%OWNER = ();
%ITERATORS = ();
*swig_DeviceIndex_get = *AIOUSBc::BulkAcquireWorkerParams_DeviceIndex_get;
*swig_DeviceIndex_set = *AIOUSBc::BulkAcquireWorkerParams_DeviceIndex_set;
*swig_BufSize_get = *AIOUSBc::BulkAcquireWorkerParams_BufSize_get;
*swig_BufSize_set = *AIOUSBc::BulkAcquireWorkerParams_BufSize_set;
*swig_pBuf_get = *AIOUSBc::BulkAcquireWorkerParams_pBuf_get;
*swig_pBuf_set = *AIOUSBc::BulkAcquireWorkerParams_pBuf_set;
sub new {
    my $pkg = shift;
    my $self = AIOUSBc::new_BulkAcquireWorkerParams(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        AIOUSBc::delete_BulkAcquireWorkerParams($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : AIOUSB::DeviceDescriptor ##############

package AIOUSB::DeviceDescriptor;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( AIOUSB );
%OWNER = ();
%ITERATORS = ();
*swig_device_get = *AIOUSBc::DeviceDescriptor_device_get;
*swig_device_set = *AIOUSBc::DeviceDescriptor_device_set;
*swig_deviceHandle_get = *AIOUSBc::DeviceDescriptor_deviceHandle_get;
*swig_deviceHandle_set = *AIOUSBc::DeviceDescriptor_deviceHandle_set;
*swig_bOpen_get = *AIOUSBc::DeviceDescriptor_bOpen_get;
*swig_bOpen_set = *AIOUSBc::DeviceDescriptor_bOpen_set;
*swig_PID_get = *AIOUSBc::DeviceDescriptor_PID_get;
*swig_PID_set = *AIOUSBc::DeviceDescriptor_PID_set;
*swig_DIOConfigBits_get = *AIOUSBc::DeviceDescriptor_DIOConfigBits_get;
*swig_DIOConfigBits_set = *AIOUSBc::DeviceDescriptor_DIOConfigBits_set;
*swig_discardFirstSample_get = *AIOUSBc::DeviceDescriptor_discardFirstSample_get;
*swig_discardFirstSample_set = *AIOUSBc::DeviceDescriptor_discardFirstSample_set;
*swig_commTimeout_get = *AIOUSBc::DeviceDescriptor_commTimeout_get;
*swig_commTimeout_set = *AIOUSBc::DeviceDescriptor_commTimeout_set;
*swig_miscClockHz_get = *AIOUSBc::DeviceDescriptor_miscClockHz_get;
*swig_miscClockHz_set = *AIOUSBc::DeviceDescriptor_miscClockHz_set;
*swig_ProductID_get = *AIOUSBc::DeviceDescriptor_ProductID_get;
*swig_ProductID_set = *AIOUSBc::DeviceDescriptor_ProductID_set;
*swig_DIOBytes_get = *AIOUSBc::DeviceDescriptor_DIOBytes_get;
*swig_DIOBytes_set = *AIOUSBc::DeviceDescriptor_DIOBytes_set;
*swig_Counters_get = *AIOUSBc::DeviceDescriptor_Counters_get;
*swig_Counters_set = *AIOUSBc::DeviceDescriptor_Counters_set;
*swig_Tristates_get = *AIOUSBc::DeviceDescriptor_Tristates_get;
*swig_Tristates_set = *AIOUSBc::DeviceDescriptor_Tristates_set;
*swig_bGateSelectable_get = *AIOUSBc::DeviceDescriptor_bGateSelectable_get;
*swig_bGateSelectable_set = *AIOUSBc::DeviceDescriptor_bGateSelectable_set;
*swig_RootClock_get = *AIOUSBc::DeviceDescriptor_RootClock_get;
*swig_RootClock_set = *AIOUSBc::DeviceDescriptor_RootClock_set;
*swig_bGetName_get = *AIOUSBc::DeviceDescriptor_bGetName_get;
*swig_bGetName_set = *AIOUSBc::DeviceDescriptor_bGetName_set;
*swig_ConfigBytes_get = *AIOUSBc::DeviceDescriptor_ConfigBytes_get;
*swig_ConfigBytes_set = *AIOUSBc::DeviceDescriptor_ConfigBytes_set;
*swig_ImmDACs_get = *AIOUSBc::DeviceDescriptor_ImmDACs_get;
*swig_ImmDACs_set = *AIOUSBc::DeviceDescriptor_ImmDACs_set;
*swig_bDACStream_get = *AIOUSBc::DeviceDescriptor_bDACStream_get;
*swig_bDACStream_set = *AIOUSBc::DeviceDescriptor_bDACStream_set;
*swig_DACsUsed_get = *AIOUSBc::DeviceDescriptor_DACsUsed_get;
*swig_DACsUsed_set = *AIOUSBc::DeviceDescriptor_DACsUsed_set;
*swig_bADCStream_get = *AIOUSBc::DeviceDescriptor_bADCStream_get;
*swig_bADCStream_set = *AIOUSBc::DeviceDescriptor_bADCStream_set;
*swig_ADCChannels_get = *AIOUSBc::DeviceDescriptor_ADCChannels_get;
*swig_ADCChannels_set = *AIOUSBc::DeviceDescriptor_ADCChannels_set;
*swig_ADCMUXChannels_get = *AIOUSBc::DeviceDescriptor_ADCMUXChannels_get;
*swig_ADCMUXChannels_set = *AIOUSBc::DeviceDescriptor_ADCMUXChannels_set;
*swig_RangeShift_get = *AIOUSBc::DeviceDescriptor_RangeShift_get;
*swig_RangeShift_set = *AIOUSBc::DeviceDescriptor_RangeShift_set;
*swig_ADCChannelsPerGroup_get = *AIOUSBc::DeviceDescriptor_ADCChannelsPerGroup_get;
*swig_ADCChannelsPerGroup_set = *AIOUSBc::DeviceDescriptor_ADCChannelsPerGroup_set;
*swig_bDIOStream_get = *AIOUSBc::DeviceDescriptor_bDIOStream_get;
*swig_bDIOStream_set = *AIOUSBc::DeviceDescriptor_bDIOStream_set;
*swig_StreamingBlockSize_get = *AIOUSBc::DeviceDescriptor_StreamingBlockSize_get;
*swig_StreamingBlockSize_set = *AIOUSBc::DeviceDescriptor_StreamingBlockSize_set;
*swig_bDIODebounce_get = *AIOUSBc::DeviceDescriptor_bDIODebounce_get;
*swig_bDIODebounce_set = *AIOUSBc::DeviceDescriptor_bDIODebounce_set;
*swig_bDIOSPI_get = *AIOUSBc::DeviceDescriptor_bDIOSPI_get;
*swig_bDIOSPI_set = *AIOUSBc::DeviceDescriptor_bDIOSPI_set;
*swig_bSetCustomClocks_get = *AIOUSBc::DeviceDescriptor_bSetCustomClocks_get;
*swig_bSetCustomClocks_set = *AIOUSBc::DeviceDescriptor_bSetCustomClocks_set;
*swig_WDGBytes_get = *AIOUSBc::DeviceDescriptor_WDGBytes_get;
*swig_WDGBytes_set = *AIOUSBc::DeviceDescriptor_WDGBytes_set;
*swig_bClearFIFO_get = *AIOUSBc::DeviceDescriptor_bClearFIFO_get;
*swig_bClearFIFO_set = *AIOUSBc::DeviceDescriptor_bClearFIFO_set;
*swig_ImmADCs_get = *AIOUSBc::DeviceDescriptor_ImmADCs_get;
*swig_ImmADCs_set = *AIOUSBc::DeviceDescriptor_ImmADCs_set;
*swig_bDACBoardRange_get = *AIOUSBc::DeviceDescriptor_bDACBoardRange_get;
*swig_bDACBoardRange_set = *AIOUSBc::DeviceDescriptor_bDACBoardRange_set;
*swig_bDACChannelCal_get = *AIOUSBc::DeviceDescriptor_bDACChannelCal_get;
*swig_bDACChannelCal_set = *AIOUSBc::DeviceDescriptor_bDACChannelCal_set;
*swig_FlashSectors_get = *AIOUSBc::DeviceDescriptor_FlashSectors_get;
*swig_FlashSectors_set = *AIOUSBc::DeviceDescriptor_FlashSectors_set;
*swig_bDACOpen_get = *AIOUSBc::DeviceDescriptor_bDACOpen_get;
*swig_bDACOpen_set = *AIOUSBc::DeviceDescriptor_bDACOpen_set;
*swig_bDACClosing_get = *AIOUSBc::DeviceDescriptor_bDACClosing_get;
*swig_bDACClosing_set = *AIOUSBc::DeviceDescriptor_bDACClosing_set;
*swig_bDACAborting_get = *AIOUSBc::DeviceDescriptor_bDACAborting_get;
*swig_bDACAborting_set = *AIOUSBc::DeviceDescriptor_bDACAborting_set;
*swig_bDACStarted_get = *AIOUSBc::DeviceDescriptor_bDACStarted_get;
*swig_bDACStarted_set = *AIOUSBc::DeviceDescriptor_bDACStarted_set;
*swig_DACData_get = *AIOUSBc::DeviceDescriptor_DACData_get;
*swig_DACData_set = *AIOUSBc::DeviceDescriptor_DACData_set;
*swig_PendingDACData_get = *AIOUSBc::DeviceDescriptor_PendingDACData_get;
*swig_PendingDACData_set = *AIOUSBc::DeviceDescriptor_PendingDACData_set;
*swig_hDACDataMutex_get = *AIOUSBc::DeviceDescriptor_hDACDataMutex_get;
*swig_hDACDataMutex_set = *AIOUSBc::DeviceDescriptor_hDACDataMutex_set;
*swig_hDACDataSem_get = *AIOUSBc::DeviceDescriptor_hDACDataSem_get;
*swig_hDACDataSem_set = *AIOUSBc::DeviceDescriptor_hDACDataSem_set;
*swig_bDIOOpen_get = *AIOUSBc::DeviceDescriptor_bDIOOpen_get;
*swig_bDIOOpen_set = *AIOUSBc::DeviceDescriptor_bDIOOpen_set;
*swig_bDIORead_get = *AIOUSBc::DeviceDescriptor_bDIORead_get;
*swig_bDIORead_set = *AIOUSBc::DeviceDescriptor_bDIORead_set;
*swig_bDeviceWasHere_get = *AIOUSBc::DeviceDescriptor_bDeviceWasHere_get;
*swig_bDeviceWasHere_set = *AIOUSBc::DeviceDescriptor_bDeviceWasHere_set;
*swig_LastDIOData_get = *AIOUSBc::DeviceDescriptor_LastDIOData_get;
*swig_LastDIOData_set = *AIOUSBc::DeviceDescriptor_LastDIOData_set;
*swig_cachedName_get = *AIOUSBc::DeviceDescriptor_cachedName_get;
*swig_cachedName_set = *AIOUSBc::DeviceDescriptor_cachedName_set;
*swig_cachedSerialNumber_get = *AIOUSBc::DeviceDescriptor_cachedSerialNumber_get;
*swig_cachedSerialNumber_set = *AIOUSBc::DeviceDescriptor_cachedSerialNumber_set;
*swig_cachedConfigBlock_get = *AIOUSBc::DeviceDescriptor_cachedConfigBlock_get;
*swig_cachedConfigBlock_set = *AIOUSBc::DeviceDescriptor_cachedConfigBlock_set;
*swig_workerBusy_get = *AIOUSBc::DeviceDescriptor_workerBusy_get;
*swig_workerBusy_set = *AIOUSBc::DeviceDescriptor_workerBusy_set;
*swig_workerStatus_get = *AIOUSBc::DeviceDescriptor_workerStatus_get;
*swig_workerStatus_set = *AIOUSBc::DeviceDescriptor_workerStatus_set;
*swig_workerResult_get = *AIOUSBc::DeviceDescriptor_workerResult_get;
*swig_workerResult_set = *AIOUSBc::DeviceDescriptor_workerResult_set;
*swig_FastITConfig_get = *AIOUSBc::DeviceDescriptor_FastITConfig_get;
*swig_FastITConfig_set = *AIOUSBc::DeviceDescriptor_FastITConfig_set;
*swig_FastITBakConfig_get = *AIOUSBc::DeviceDescriptor_FastITBakConfig_get;
*swig_FastITBakConfig_set = *AIOUSBc::DeviceDescriptor_FastITBakConfig_set;
*swig_FastITConfig_size_get = *AIOUSBc::DeviceDescriptor_FastITConfig_size_get;
*swig_FastITConfig_size_set = *AIOUSBc::DeviceDescriptor_FastITConfig_size_set;
*swig_ADBuf_get = *AIOUSBc::DeviceDescriptor_ADBuf_get;
*swig_ADBuf_set = *AIOUSBc::DeviceDescriptor_ADBuf_set;
*swig_ADBuf_size_get = *AIOUSBc::DeviceDescriptor_ADBuf_size_get;
*swig_ADBuf_size_set = *AIOUSBc::DeviceDescriptor_ADBuf_size_set;
sub new {
    my $pkg = shift;
    my $self = AIOUSBc::new_DeviceDescriptor(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        AIOUSBc::delete_DeviceDescriptor($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : AIOUSB::ADConfigBlock ##############

package AIOUSB::ADConfigBlock;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( AIOUSB );
%OWNER = ();
%ITERATORS = ();
*swig_device_get = *AIOUSBc::ADConfigBlock_device_get;
*swig_device_set = *AIOUSBc::ADConfigBlock_device_set;
*swig_size_get = *AIOUSBc::ADConfigBlock_size_get;
*swig_size_set = *AIOUSBc::ADConfigBlock_size_set;
*swig_registers_get = *AIOUSBc::ADConfigBlock_registers_get;
*swig_registers_set = *AIOUSBc::ADConfigBlock_registers_set;
sub new {
    my $pkg = shift;
    my $self = AIOUSBc::new_ADConfigBlock(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        AIOUSBc::delete_ADConfigBlock($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : AIOUSB::DeviceProperties ##############

package AIOUSB::DeviceProperties;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( AIOUSB );
%OWNER = ();
%ITERATORS = ();
*swig_Name_get = *AIOUSBc::DeviceProperties_Name_get;
*swig_Name_set = *AIOUSBc::DeviceProperties_Name_set;
*swig_SerialNumber_get = *AIOUSBc::DeviceProperties_SerialNumber_get;
*swig_SerialNumber_set = *AIOUSBc::DeviceProperties_SerialNumber_set;
*swig_ProductID_get = *AIOUSBc::DeviceProperties_ProductID_get;
*swig_ProductID_set = *AIOUSBc::DeviceProperties_ProductID_set;
*swig_DIOPorts_get = *AIOUSBc::DeviceProperties_DIOPorts_get;
*swig_DIOPorts_set = *AIOUSBc::DeviceProperties_DIOPorts_set;
*swig_Counters_get = *AIOUSBc::DeviceProperties_Counters_get;
*swig_Counters_set = *AIOUSBc::DeviceProperties_Counters_set;
*swig_Tristates_get = *AIOUSBc::DeviceProperties_Tristates_get;
*swig_Tristates_set = *AIOUSBc::DeviceProperties_Tristates_set;
*swig_RootClock_get = *AIOUSBc::DeviceProperties_RootClock_get;
*swig_RootClock_set = *AIOUSBc::DeviceProperties_RootClock_set;
*swig_DACChannels_get = *AIOUSBc::DeviceProperties_DACChannels_get;
*swig_DACChannels_set = *AIOUSBc::DeviceProperties_DACChannels_set;
*swig_ADCChannels_get = *AIOUSBc::DeviceProperties_ADCChannels_get;
*swig_ADCChannels_set = *AIOUSBc::DeviceProperties_ADCChannels_set;
*swig_ADCMUXChannels_get = *AIOUSBc::DeviceProperties_ADCMUXChannels_get;
*swig_ADCMUXChannels_set = *AIOUSBc::DeviceProperties_ADCMUXChannels_set;
*swig_ADCChannelsPerGroup_get = *AIOUSBc::DeviceProperties_ADCChannelsPerGroup_get;
*swig_ADCChannelsPerGroup_set = *AIOUSBc::DeviceProperties_ADCChannelsPerGroup_set;
sub new {
    my $pkg = shift;
    my $self = AIOUSBc::new_DeviceProperties(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        AIOUSBc::delete_DeviceProperties($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package AIOUSB;

*AUR_DIO_WRITE = *AIOUSBc::AUR_DIO_WRITE;
*AUR_DIO_READ = *AIOUSBc::AUR_DIO_READ;
*AUR_DIO_CONFIG = *AIOUSBc::AUR_DIO_CONFIG;
*AUR_DIO_CONFIG_QUERY = *AIOUSBc::AUR_DIO_CONFIG_QUERY;
*AUR_CTR_READ = *AIOUSBc::AUR_CTR_READ;
*AUR_CTR_MODE = *AIOUSBc::AUR_CTR_MODE;
*AUR_CTR_LOAD = *AIOUSBc::AUR_CTR_LOAD;
*AUR_CTR_MODELOAD = *AIOUSBc::AUR_CTR_MODELOAD;
*AUR_CTR_SELGATE = *AIOUSBc::AUR_CTR_SELGATE;
*AUR_CTR_READALL = *AIOUSBc::AUR_CTR_READALL;
*AUR_CTR_READLATCHED = *AIOUSBc::AUR_CTR_READLATCHED;
*AUR_CTR_COS_BULK_GATE2 = *AIOUSBc::AUR_CTR_COS_BULK_GATE2;
*AUR_CTR_PUR_FIRST = *AIOUSBc::AUR_CTR_PUR_FIRST;
*AUR_CTR_PUR_OFRQ = *AIOUSBc::AUR_CTR_PUR_OFRQ;
*AUR_CTR_COS_BULK_ABORT = *AIOUSBc::AUR_CTR_COS_BULK_ABORT;
*AUR_CTR_PUR_MFRQ = *AIOUSBc::AUR_CTR_PUR_MFRQ;
*AUR_CTR_PUR_EVCT = *AIOUSBc::AUR_CTR_PUR_EVCT;
*AUR_CTR_PUR_MPUL = *AIOUSBc::AUR_CTR_PUR_MPUL;
*AUR_DIO_WDG16_DEPREC = *AIOUSBc::AUR_DIO_WDG16_DEPREC;
*AUR_READBACK_GLOBAL_STATE = *AIOUSBc::AUR_READBACK_GLOBAL_STATE;
*AUR_SAVE_GLOBAL_STATE = *AIOUSBc::AUR_SAVE_GLOBAL_STATE;
*AUR_GEN_CLEAR_FIFO_NEXT = *AIOUSBc::AUR_GEN_CLEAR_FIFO_NEXT;
*AUR_GEN_CLEAR_FIFO = *AIOUSBc::AUR_GEN_CLEAR_FIFO;
*AUR_GEN_CLEAR_FIFO_WAIT = *AIOUSBc::AUR_GEN_CLEAR_FIFO_WAIT;
*AUR_GEN_ABORT_AND_CLEAR = *AIOUSBc::AUR_GEN_ABORT_AND_CLEAR;
*AUR_WDG = *AIOUSBc::AUR_WDG;
*AUR_OFFLINE_READWRITE = *AIOUSBc::AUR_OFFLINE_READWRITE;
*AUR_SELF_TEST_1 = *AIOUSBc::AUR_SELF_TEST_1;
*AUR_EEPROM_READ = *AIOUSBc::AUR_EEPROM_READ;
*AUR_EEPROM_WRITE = *AIOUSBc::AUR_EEPROM_WRITE;
*AUR_DAC_CONTROL = *AIOUSBc::AUR_DAC_CONTROL;
*AUR_DAC_DATAPTR = *AIOUSBc::AUR_DAC_DATAPTR;
*AUR_DAC_DIVISOR = *AIOUSBc::AUR_DAC_DIVISOR;
*AUR_DAC_IMMEDIATE = *AIOUSBc::AUR_DAC_IMMEDIATE;
*AUR_GEN_STREAM_STATUS = *AIOUSBc::AUR_GEN_STREAM_STATUS;
*AUR_FLASH_READWRITE = *AIOUSBc::AUR_FLASH_READWRITE;
*AUR_DAC_RANGE = *AIOUSBc::AUR_DAC_RANGE;
*AUR_PROBE_CALFEATURE = *AIOUSBc::AUR_PROBE_CALFEATURE;
*AUR_LOAD_BULK_CALIBRATION_BLOCK = *AIOUSBc::AUR_LOAD_BULK_CALIBRATION_BLOCK;
*AUR_DIO_STREAM_OPEN_OUTPUT = *AIOUSBc::AUR_DIO_STREAM_OPEN_OUTPUT;
*AUR_START_ACQUIRING_BLOCK = *AIOUSBc::AUR_START_ACQUIRING_BLOCK;
*AUR_DIO_STREAM_OPEN_INPUT = *AIOUSBc::AUR_DIO_STREAM_OPEN_INPUT;
*AUR_DIO_SETCLOCKS = *AIOUSBc::AUR_DIO_SETCLOCKS;
*AUR_ADC_SET_CONFIG = *AIOUSBc::AUR_ADC_SET_CONFIG;
*AUR_ADC_IMMEDIATE = *AIOUSBc::AUR_ADC_IMMEDIATE;
*AUR_DIO_SPI_WRITE = *AIOUSBc::AUR_DIO_SPI_WRITE;
*AUR_DIO_SPI_READ = *AIOUSBc::AUR_DIO_SPI_READ;
*AUR_ADC_GET_CONFIG = *AIOUSBc::AUR_ADC_GET_CONFIG;
*BITS_PER_BYTE = *AIOUSBc::BITS_PER_BYTE;
*AI_16_MAX_COUNTS = *AIOUSBc::AI_16_MAX_COUNTS;
*MAX_IMM_ADCS = *AIOUSBc::MAX_IMM_ADCS;
*CAL_TABLE_WORDS = *AIOUSBc::CAL_TABLE_WORDS;
*COUNTERS_PER_BLOCK = *AIOUSBc::COUNTERS_PER_BLOCK;
*COUNTER_NUM_MODES = *AIOUSBc::COUNTER_NUM_MODES;
*DAC_RESET = *AIOUSBc::DAC_RESET;
*EEPROM_SERIAL_NUMBER_ADDRESS = *AIOUSBc::EEPROM_SERIAL_NUMBER_ADDRESS;
*EEPROM_CUSTOM_BASE_ADDRESS = *AIOUSBc::EEPROM_CUSTOM_BASE_ADDRESS;
*EEPROM_CUSTOM_MIN_ADDRESS = *AIOUSBc::EEPROM_CUSTOM_MIN_ADDRESS;
*EEPROM_CUSTOM_MAX_ADDRESS = *AIOUSBc::EEPROM_CUSTOM_MAX_ADDRESS;
*AD_CONFIG_REGISTERS = *AIOUSBc::AD_CONFIG_REGISTERS;
*AD_MUX_CONFIG_REGISTERS = *AIOUSBc::AD_MUX_CONFIG_REGISTERS;
*USB_WRITE_TO_DEVICE = *AIOUSBc::USB_WRITE_TO_DEVICE;
*USB_READ_FROM_DEVICE = *AIOUSBc::USB_READ_FROM_DEVICE;
*USB_BULK_WRITE_ENDPOINT = *AIOUSBc::USB_BULK_WRITE_ENDPOINT;
*USB_BULK_READ_ENDPOINT = *AIOUSBc::USB_BULK_READ_ENDPOINT;
*MAX_USB_DEVICES = *AIOUSBc::MAX_USB_DEVICES;
*ACCES_VENDOR_ID = *AIOUSBc::ACCES_VENDOR_ID;
*USB_DA12_8A_REV_A = *AIOUSBc::USB_DA12_8A_REV_A;
*USB_DA12_8A = *AIOUSBc::USB_DA12_8A;
*USB_DA12_8E = *AIOUSBc::USB_DA12_8E;
*USB_DIO_32 = *AIOUSBc::USB_DIO_32;
*USB_DIO_48 = *AIOUSBc::USB_DIO_48;
*USB_DIO_96 = *AIOUSBc::USB_DIO_96;
*USB_DI16A_REV_A1 = *AIOUSBc::USB_DI16A_REV_A1;
*USB_DO16A_REV_A1 = *AIOUSBc::USB_DO16A_REV_A1;
*USB_DI16A_REV_A2 = *AIOUSBc::USB_DI16A_REV_A2;
*USB_DIO_16H = *AIOUSBc::USB_DIO_16H;
*USB_DI16A = *AIOUSBc::USB_DI16A;
*USB_DO16A = *AIOUSBc::USB_DO16A;
*USB_DIO_16A = *AIOUSBc::USB_DIO_16A;
*USB_IIRO_16 = *AIOUSBc::USB_IIRO_16;
*USB_II_16 = *AIOUSBc::USB_II_16;
*USB_RO_16 = *AIOUSBc::USB_RO_16;
*USB_IIRO_8 = *AIOUSBc::USB_IIRO_8;
*USB_II_8 = *AIOUSBc::USB_II_8;
*USB_IIRO_4 = *AIOUSBc::USB_IIRO_4;
*USB_IDIO_16 = *AIOUSBc::USB_IDIO_16;
*USB_II_16_OLD = *AIOUSBc::USB_II_16_OLD;
*USB_IDO_16 = *AIOUSBc::USB_IDO_16;
*USB_IDIO_8 = *AIOUSBc::USB_IDIO_8;
*USB_II_8_OLD = *AIOUSBc::USB_II_8_OLD;
*USB_IDIO_4 = *AIOUSBc::USB_IDIO_4;
*USB_CTR_15 = *AIOUSBc::USB_CTR_15;
*USB_IIRO4_2SM = *AIOUSBc::USB_IIRO4_2SM;
*USB_IIRO4_COM = *AIOUSBc::USB_IIRO4_COM;
*USB_DIO16RO8 = *AIOUSBc::USB_DIO16RO8;
*PICO_DIO16RO8 = *AIOUSBc::PICO_DIO16RO8;
*USB_AI16_16A = *AIOUSBc::USB_AI16_16A;
*USB_AI16_16E = *AIOUSBc::USB_AI16_16E;
*USB_AI12_16A = *AIOUSBc::USB_AI12_16A;
*USB_AI12_16 = *AIOUSBc::USB_AI12_16;
*USB_AI12_16E = *AIOUSBc::USB_AI12_16E;
*USB_AI16_64MA = *AIOUSBc::USB_AI16_64MA;
*USB_AI16_64ME = *AIOUSBc::USB_AI16_64ME;
*USB_AI12_64MA = *AIOUSBc::USB_AI12_64MA;
*USB_AI12_64M = *AIOUSBc::USB_AI12_64M;
*USB_AI12_64ME = *AIOUSBc::USB_AI12_64ME;
*USB_AI16_32A = *AIOUSBc::USB_AI16_32A;
*USB_AI16_32E = *AIOUSBc::USB_AI16_32E;
*USB_AI12_32A = *AIOUSBc::USB_AI12_32A;
*USB_AI12_32 = *AIOUSBc::USB_AI12_32;
*USB_AI12_32E = *AIOUSBc::USB_AI12_32E;
*USB_AI16_64A = *AIOUSBc::USB_AI16_64A;
*USB_AI16_64E = *AIOUSBc::USB_AI16_64E;
*USB_AI12_64A = *AIOUSBc::USB_AI12_64A;
*USB_AI12_64 = *AIOUSBc::USB_AI12_64;
*USB_AI12_64E = *AIOUSBc::USB_AI12_64E;
*USB_AI16_96A = *AIOUSBc::USB_AI16_96A;
*USB_AI16_96E = *AIOUSBc::USB_AI16_96E;
*USB_AI12_96A = *AIOUSBc::USB_AI12_96A;
*USB_AI12_96 = *AIOUSBc::USB_AI12_96;
*USB_AI12_96E = *AIOUSBc::USB_AI12_96E;
*USB_AI16_128A = *AIOUSBc::USB_AI16_128A;
*USB_AI16_128E = *AIOUSBc::USB_AI16_128E;
*USB_AI12_128A = *AIOUSBc::USB_AI12_128A;
*USB_AI12_128 = *AIOUSBc::USB_AI12_128;
*USB_AI12_128E = *AIOUSBc::USB_AI12_128E;
*USB_AO16_16A = *AIOUSBc::USB_AO16_16A;
*USB_AO16_16 = *AIOUSBc::USB_AO16_16;
*USB_AO16_12A = *AIOUSBc::USB_AO16_12A;
*USB_AO16_12 = *AIOUSBc::USB_AO16_12;
*USB_AO16_8A = *AIOUSBc::USB_AO16_8A;
*USB_AO16_8 = *AIOUSBc::USB_AO16_8;
*USB_AO16_4A = *AIOUSBc::USB_AO16_4A;
*USB_AO16_4 = *AIOUSBc::USB_AO16_4;
*USB_AO12_16A = *AIOUSBc::USB_AO12_16A;
*USB_AO12_16 = *AIOUSBc::USB_AO12_16;
*USB_AO12_12A = *AIOUSBc::USB_AO12_12A;
*USB_AO12_12 = *AIOUSBc::USB_AO12_12;
*USB_AO12_8A = *AIOUSBc::USB_AO12_8A;
*USB_AO12_8 = *AIOUSBc::USB_AO12_8;
*USB_AO12_4A = *AIOUSBc::USB_AO12_4A;
*USB_AO12_4 = *AIOUSBc::USB_AO12_4;
*USB_AIO16_16A = *AIOUSBc::USB_AIO16_16A;
*USB_AIO16_16E = *AIOUSBc::USB_AIO16_16E;
*USB_AIO12_16A = *AIOUSBc::USB_AIO12_16A;
*USB_AIO12_16 = *AIOUSBc::USB_AIO12_16;
*USB_AIO12_16E = *AIOUSBc::USB_AIO12_16E;
*USB_AIO16_64MA = *AIOUSBc::USB_AIO16_64MA;
*USB_AIO16_64ME = *AIOUSBc::USB_AIO16_64ME;
*USB_AIO12_64MA = *AIOUSBc::USB_AIO12_64MA;
*USB_AIO12_64M = *AIOUSBc::USB_AIO12_64M;
*USB_AIO12_64ME = *AIOUSBc::USB_AIO12_64ME;
*USB_AIO16_32A = *AIOUSBc::USB_AIO16_32A;
*USB_AIO16_32E = *AIOUSBc::USB_AIO16_32E;
*USB_AIO12_32A = *AIOUSBc::USB_AIO12_32A;
*USB_AIO12_32 = *AIOUSBc::USB_AIO12_32;
*USB_AIO12_32E = *AIOUSBc::USB_AIO12_32E;
*USB_AIO16_64A = *AIOUSBc::USB_AIO16_64A;
*USB_AIO16_64E = *AIOUSBc::USB_AIO16_64E;
*USB_AIO12_64A = *AIOUSBc::USB_AIO12_64A;
*USB_AIO12_64 = *AIOUSBc::USB_AIO12_64;
*USB_AIO12_64E = *AIOUSBc::USB_AIO12_64E;
*USB_AIO16_96A = *AIOUSBc::USB_AIO16_96A;
*USB_AIO16_96E = *AIOUSBc::USB_AIO16_96E;
*USB_AIO12_96A = *AIOUSBc::USB_AIO12_96A;
*USB_AIO12_96 = *AIOUSBc::USB_AIO12_96;
*USB_AIO12_96E = *AIOUSBc::USB_AIO12_96E;
*USB_AIO16_128A = *AIOUSBc::USB_AIO16_128A;
*USB_AIO16_128E = *AIOUSBc::USB_AIO16_128E;
*USB_AIO12_128A = *AIOUSBc::USB_AIO12_128A;
*USB_AIO12_128 = *AIOUSBc::USB_AIO12_128;
*USB_AIO12_128E = *AIOUSBc::USB_AIO12_128E;
*diFirst = *AIOUSBc::diFirst;
*diOnly = *AIOUSBc::diOnly;
*diNone = *AIOUSBc::diNone;
*DAC_RANGE_0_5V = *AIOUSBc::DAC_RANGE_0_5V;
*DAC_RANGE_5V = *AIOUSBc::DAC_RANGE_5V;
*DAC_RANGE_0_10V = *AIOUSBc::DAC_RANGE_0_10V;
*DAC_RANGE_10V = *AIOUSBc::DAC_RANGE_10V;
*CLEAR_FIFO_METHOD_IMMEDIATE = *AIOUSBc::CLEAR_FIFO_METHOD_IMMEDIATE;
*CLEAR_FIFO_METHOD_AUTO = *AIOUSBc::CLEAR_FIFO_METHOD_AUTO;
*CLEAR_FIFO_METHOD_IMMEDIATE_AND_ABORT = *AIOUSBc::CLEAR_FIFO_METHOD_IMMEDIATE_AND_ABORT;
*CLEAR_FIFO_METHOD_WAIT = *AIOUSBc::CLEAR_FIFO_METHOD_WAIT;
*num_FIFO_Method = *AIOUSBc::num_FIFO_Method;
*AIOUSB_SUCCESS = *AIOUSBc::AIOUSB_SUCCESS;
*AIOUSB_ERROR_DEVICE_NOT_CONNECTED = *AIOUSBc::AIOUSB_ERROR_DEVICE_NOT_CONNECTED;
*AIOUSB_ERROR_DUP_NAME = *AIOUSBc::AIOUSB_ERROR_DUP_NAME;
*AIOUSB_ERROR_FILE_NOT_FOUND = *AIOUSBc::AIOUSB_ERROR_FILE_NOT_FOUND;
*AIOUSB_ERROR_INVALID_DATA = *AIOUSBc::AIOUSB_ERROR_INVALID_DATA;
*AIOUSB_ERROR_INVALID_INDEX = *AIOUSBc::AIOUSB_ERROR_INVALID_INDEX;
*AIOUSB_ERROR_INVALID_MUTEX = *AIOUSBc::AIOUSB_ERROR_INVALID_MUTEX;
*AIOUSB_ERROR_INVALID_PARAMETER = *AIOUSBc::AIOUSB_ERROR_INVALID_PARAMETER;
*AIOUSB_ERROR_INVALID_THREAD = *AIOUSBc::AIOUSB_ERROR_INVALID_THREAD;
*AIOUSB_ERROR_NOT_ENOUGH_MEMORY = *AIOUSBc::AIOUSB_ERROR_NOT_ENOUGH_MEMORY;
*AIOUSB_ERROR_NOT_SUPPORTED = *AIOUSBc::AIOUSB_ERROR_NOT_SUPPORTED;
*AIOUSB_ERROR_OPEN_FAILED = *AIOUSBc::AIOUSB_ERROR_OPEN_FAILED;
*AIOUSB_ERROR_BAD_TOKEN_TYPE = *AIOUSBc::AIOUSB_ERROR_BAD_TOKEN_TYPE;
*AIOUSB_ERROR_TIMEOUT = *AIOUSBc::AIOUSB_ERROR_TIMEOUT;
*AIOUSB_ERROR_HANDLE_EOF = *AIOUSBc::AIOUSB_ERROR_HANDLE_EOF;
*AIOUSB_ERROR_LIBUSB = *AIOUSBc::AIOUSB_ERROR_LIBUSB;
*AD_MAX_CONFIG_REGISTERS = *AIOUSBc::AD_MAX_CONFIG_REGISTERS;
*AD_NUM_GAIN_CODE_REGISTERS = *AIOUSBc::AD_NUM_GAIN_CODE_REGISTERS;
*AD_CONFIG_GAIN_CODE = *AIOUSBc::AD_CONFIG_GAIN_CODE;
*AD_REGISTER_GAIN_CODE = *AIOUSBc::AD_REGISTER_GAIN_CODE;
*AD_CONFIG_CAL_MODE = *AIOUSBc::AD_CONFIG_CAL_MODE;
*AD_REGISTER_CAL_MODE = *AIOUSBc::AD_REGISTER_CAL_MODE;
*AD_CONFIG_TRIG_COUNT = *AIOUSBc::AD_CONFIG_TRIG_COUNT;
*AD_REGISTER_TRIG_COUNT = *AIOUSBc::AD_REGISTER_TRIG_COUNT;
*AD_CONFIG_START_END = *AIOUSBc::AD_CONFIG_START_END;
*AD_REGISTER_START_END = *AIOUSBc::AD_REGISTER_START_END;
*AD_CONFIG_OVERSAMPLE = *AIOUSBc::AD_CONFIG_OVERSAMPLE;
*AD_REGISTER_OVERSAMPLE = *AIOUSBc::AD_REGISTER_OVERSAMPLE;
*AD_CONFIG_MUX_START_END = *AIOUSBc::AD_CONFIG_MUX_START_END;
*AD_NUM_GAIN_CODES = *AIOUSBc::AD_NUM_GAIN_CODES;
*AD_DIFFERENTIAL_MODE = *AIOUSBc::AD_DIFFERENTIAL_MODE;
*AD_TRIGGER_CTR0_EXT = *AIOUSBc::AD_TRIGGER_CTR0_EXT;
*AD_TRIGGER_FALLING_EDGE = *AIOUSBc::AD_TRIGGER_FALLING_EDGE;
*AD_TRIGGER_SCAN = *AIOUSBc::AD_TRIGGER_SCAN;
*AD_TRIGGER_EXTERNAL = *AIOUSBc::AD_TRIGGER_EXTERNAL;
*AD_TRIGGER_TIMER = *AIOUSBc::AD_TRIGGER_TIMER;
*AD_TRIGGER_VALID_MASK = *AIOUSBc::AD_TRIGGER_VALID_MASK;
*AD_GAIN_CODE_MIN = *AIOUSBc::AD_GAIN_CODE_MIN;
*AD_GAIN_CODE_0_10V = *AIOUSBc::AD_GAIN_CODE_0_10V;
*AD_GAIN_CODE_10V = *AIOUSBc::AD_GAIN_CODE_10V;
*AD_GAIN_CODE_0_5V = *AIOUSBc::AD_GAIN_CODE_0_5V;
*AD_GAIN_CODE_5V = *AIOUSBc::AD_GAIN_CODE_5V;
*AD_GAIN_CODE_0_2V = *AIOUSBc::AD_GAIN_CODE_0_2V;
*AD_GAIN_CODE_2V = *AIOUSBc::AD_GAIN_CODE_2V;
*AD_GAIN_CODE_0_1V = *AIOUSBc::AD_GAIN_CODE_0_1V;
*AD_GAIN_CODE_1V = *AIOUSBc::AD_GAIN_CODE_1V;
*AD_GAIN_CODE_MAX = *AIOUSBc::AD_GAIN_CODE_MAX;
*AD_CAL_MODE_NORMAL = *AIOUSBc::AD_CAL_MODE_NORMAL;
*AD_CAL_MODE_GROUND = *AIOUSBc::AD_CAL_MODE_GROUND;
*AD_CAL_MODE_REFERENCE = *AIOUSBc::AD_CAL_MODE_REFERENCE;
*AD_CAL_MODE_BIP_GROUND = *AIOUSBc::AD_CAL_MODE_BIP_GROUND;
*AIOUSB_FALSE = *AIOUSBc::AIOUSB_FALSE;
*AIOUSB_TRUE = *AIOUSBc::AIOUSB_TRUE;
1;
