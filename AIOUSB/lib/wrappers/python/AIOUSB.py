# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AIOUSB', [dirname(__file__)])
        except ImportError:
            import _AIOUSB
            return _AIOUSB
        if fp is not None:
            try:
                _mod = imp.load_module('_AIOUSB', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _AIOUSB = swig_import_helper()
    del swig_import_helper
else:
    import _AIOUSB
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_ulp():
  return _AIOUSB.new_ulp()
new_ulp = _AIOUSB.new_ulp

def copy_ulp(*args):
  return _AIOUSB.copy_ulp(*args)
copy_ulp = _AIOUSB.copy_ulp

def delete_ulp(*args):
  return _AIOUSB.delete_ulp(*args)
delete_ulp = _AIOUSB.delete_ulp

def ulp_assign(*args):
  return _AIOUSB.ulp_assign(*args)
ulp_assign = _AIOUSB.ulp_assign

def ulp_value(*args):
  return _AIOUSB.ulp_value(*args)
ulp_value = _AIOUSB.ulp_value

def new_ip():
  return _AIOUSB.new_ip()
new_ip = _AIOUSB.new_ip

def copy_ip(*args):
  return _AIOUSB.copy_ip(*args)
copy_ip = _AIOUSB.copy_ip

def delete_ip(*args):
  return _AIOUSB.delete_ip(*args)
delete_ip = _AIOUSB.delete_ip

def ip_assign(*args):
  return _AIOUSB.ip_assign(*args)
ip_assign = _AIOUSB.ip_assign

def ip_value(*args):
  return _AIOUSB.ip_value(*args)
ip_value = _AIOUSB.ip_value

def new_usp():
  return _AIOUSB.new_usp()
new_usp = _AIOUSB.new_usp

def copy_usp(*args):
  return _AIOUSB.copy_usp(*args)
copy_usp = _AIOUSB.copy_usp

def delete_usp(*args):
  return _AIOUSB.delete_usp(*args)
delete_usp = _AIOUSB.delete_usp

def usp_assign(*args):
  return _AIOUSB.usp_assign(*args)
usp_assign = _AIOUSB.usp_assign

def usp_value(*args):
  return _AIOUSB.usp_value(*args)
usp_value = _AIOUSB.usp_value

def new_dp():
  return _AIOUSB.new_dp()
new_dp = _AIOUSB.new_dp

def copy_dp(*args):
  return _AIOUSB.copy_dp(*args)
copy_dp = _AIOUSB.copy_dp

def delete_dp(*args):
  return _AIOUSB.delete_dp(*args)
delete_dp = _AIOUSB.delete_dp

def dp_assign(*args):
  return _AIOUSB.dp_assign(*args)
dp_assign = _AIOUSB.dp_assign

def dp_value(*args):
  return _AIOUSB.dp_value(*args)
dp_value = _AIOUSB.dp_value

def new_cp():
  return _AIOUSB.new_cp()
new_cp = _AIOUSB.new_cp

def copy_cp(*args):
  return _AIOUSB.copy_cp(*args)
copy_cp = _AIOUSB.copy_cp

def delete_cp(*args):
  return _AIOUSB.delete_cp(*args)
delete_cp = _AIOUSB.delete_cp

def cp_assign(*args):
  return _AIOUSB.cp_assign(*args)
cp_assign = _AIOUSB.cp_assign

def cp_value(*args):
  return _AIOUSB.cp_value(*args)
cp_value = _AIOUSB.cp_value

def new_cstring(*args):
  return _AIOUSB.new_cstring(*args)
new_cstring = _AIOUSB.new_cstring

def delete_cstring(*args):
  return _AIOUSB.delete_cstring(*args)
delete_cstring = _AIOUSB.delete_cstring

def cstring_getitem(*args):
  return _AIOUSB.cstring_getitem(*args)
cstring_getitem = _AIOUSB.cstring_getitem

def cstring_setitem(*args):
  return _AIOUSB.cstring_setitem(*args)
cstring_setitem = _AIOUSB.cstring_setitem
class BulkAcquireWorkerParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BulkAcquireWorkerParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BulkAcquireWorkerParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DeviceIndex"] = _AIOUSB.BulkAcquireWorkerParams_DeviceIndex_set
    __swig_getmethods__["DeviceIndex"] = _AIOUSB.BulkAcquireWorkerParams_DeviceIndex_get
    if _newclass:DeviceIndex = _swig_property(_AIOUSB.BulkAcquireWorkerParams_DeviceIndex_get, _AIOUSB.BulkAcquireWorkerParams_DeviceIndex_set)
    __swig_setmethods__["BufSize"] = _AIOUSB.BulkAcquireWorkerParams_BufSize_set
    __swig_getmethods__["BufSize"] = _AIOUSB.BulkAcquireWorkerParams_BufSize_get
    if _newclass:BufSize = _swig_property(_AIOUSB.BulkAcquireWorkerParams_BufSize_get, _AIOUSB.BulkAcquireWorkerParams_BufSize_set)
    __swig_setmethods__["pBuf"] = _AIOUSB.BulkAcquireWorkerParams_pBuf_set
    __swig_getmethods__["pBuf"] = _AIOUSB.BulkAcquireWorkerParams_pBuf_get
    if _newclass:pBuf = _swig_property(_AIOUSB.BulkAcquireWorkerParams_pBuf_get, _AIOUSB.BulkAcquireWorkerParams_pBuf_set)
    def __init__(self): 
        this = _AIOUSB.new_BulkAcquireWorkerParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_BulkAcquireWorkerParams
    __del__ = lambda self : None;
BulkAcquireWorkerParams_swigregister = _AIOUSB.BulkAcquireWorkerParams_swigregister
BulkAcquireWorkerParams_swigregister(BulkAcquireWorkerParams)
cvar = _AIOUSB.cvar

class AIOOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AIOOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AIOOption, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AIOUSB.new_AIOOption()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_AIOOption
    __del__ = lambda self : None;
AIOOption_swigregister = _AIOUSB.AIOOption_swigregister
AIOOption_swigregister(AIOOption)

class AIOError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AIOError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AIOError, name)
    __repr__ = _swig_repr
    __swig_setmethods__["retval"] = _AIOUSB.AIOError_retval_set
    __swig_getmethods__["retval"] = _AIOUSB.AIOError_retval_get
    if _newclass:retval = _swig_property(_AIOUSB.AIOError_retval_get, _AIOUSB.AIOError_retval_set)
    __swig_setmethods__["error_message"] = _AIOUSB.AIOError_error_message_set
    __swig_getmethods__["error_message"] = _AIOUSB.AIOError_error_message_get
    if _newclass:error_message = _swig_property(_AIOUSB.AIOError_error_message_get, _AIOUSB.AIOError_error_message_set)
    def __init__(self): 
        this = _AIOUSB.new_AIOError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_AIOError
    __del__ = lambda self : None;
AIOError_swigregister = _AIOUSB.AIOError_swigregister
AIOError_swigregister(AIOError)

PROD_NAME_SIZE = _AIOUSB.PROD_NAME_SIZE
class ProductIDName(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProductIDName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProductIDName, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _AIOUSB.ProductIDName_id_set
    __swig_getmethods__["id"] = _AIOUSB.ProductIDName_id_get
    if _newclass:id = _swig_property(_AIOUSB.ProductIDName_id_get, _AIOUSB.ProductIDName_id_set)
    __swig_setmethods__["name"] = _AIOUSB.ProductIDName_name_set
    __swig_getmethods__["name"] = _AIOUSB.ProductIDName_name_get
    if _newclass:name = _swig_property(_AIOUSB.ProductIDName_name_get, _AIOUSB.ProductIDName_name_set)
    def __init__(self): 
        this = _AIOUSB.new_ProductIDName()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_ProductIDName
    __del__ = lambda self : None;
ProductIDName_swigregister = _AIOUSB.ProductIDName_swigregister
ProductIDName_swigregister(ProductIDName)

class ADRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADRange, name)
    __repr__ = _swig_repr
    __swig_setmethods__["minVolts"] = _AIOUSB.ADRange_minVolts_set
    __swig_getmethods__["minVolts"] = _AIOUSB.ADRange_minVolts_get
    if _newclass:minVolts = _swig_property(_AIOUSB.ADRange_minVolts_get, _AIOUSB.ADRange_minVolts_set)
    __swig_setmethods__["range"] = _AIOUSB.ADRange_range_set
    __swig_getmethods__["range"] = _AIOUSB.ADRange_range_get
    if _newclass:range = _swig_property(_AIOUSB.ADRange_range_get, _AIOUSB.ADRange_range_set)
    def __init__(self): 
        this = _AIOUSB.new_ADRange()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_ADRange
    __del__ = lambda self : None;
ADRange_swigregister = _AIOUSB.ADRange_swigregister
ADRange_swigregister(ADRange)


def ADC_ResetDevice(*args):
  return _AIOUSB.ADC_ResetDevice(*args)
ADC_ResetDevice = _AIOUSB.ADC_ResetDevice

def AIOUSB_GetDeviceSerialNumber(*args):
  return _AIOUSB.AIOUSB_GetDeviceSerialNumber(*args)
AIOUSB_GetDeviceSerialNumber = _AIOUSB.AIOUSB_GetDeviceSerialNumber

def ADC_WriteADConfigBlock(*args):
  return _AIOUSB.ADC_WriteADConfigBlock(*args)
ADC_WriteADConfigBlock = _AIOUSB.ADC_WriteADConfigBlock
class ADCMuxSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADCMuxSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADCMuxSettings, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADCChannelsPerGroup"] = _AIOUSB.ADCMuxSettings_ADCChannelsPerGroup_set
    __swig_getmethods__["ADCChannelsPerGroup"] = _AIOUSB.ADCMuxSettings_ADCChannelsPerGroup_get
    if _newclass:ADCChannelsPerGroup = _swig_property(_AIOUSB.ADCMuxSettings_ADCChannelsPerGroup_get, _AIOUSB.ADCMuxSettings_ADCChannelsPerGroup_set)
    __swig_setmethods__["ADCMUXChannels"] = _AIOUSB.ADCMuxSettings_ADCMUXChannels_set
    __swig_getmethods__["ADCMUXChannels"] = _AIOUSB.ADCMuxSettings_ADCMUXChannels_get
    if _newclass:ADCMUXChannels = _swig_property(_AIOUSB.ADCMuxSettings_ADCMUXChannels_get, _AIOUSB.ADCMuxSettings_ADCMUXChannels_set)
    __swig_setmethods__["defined"] = _AIOUSB.ADCMuxSettings_defined_set
    __swig_getmethods__["defined"] = _AIOUSB.ADCMuxSettings_defined_get
    if _newclass:defined = _swig_property(_AIOUSB.ADCMuxSettings_defined_get, _AIOUSB.ADCMuxSettings_defined_set)
    def __init__(self): 
        this = _AIOUSB.new_ADCMuxSettings()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_ADCMuxSettings
    __del__ = lambda self : None;
ADCMuxSettings_swigregister = _AIOUSB.ADCMuxSettings_swigregister
ADCMuxSettings_swigregister(ADCMuxSettings)

class ADCConfigBlock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADCConfigBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADCConfigBlock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device"] = _AIOUSB.ADCConfigBlock_device_set
    __swig_getmethods__["device"] = _AIOUSB.ADCConfigBlock_device_get
    if _newclass:device = _swig_property(_AIOUSB.ADCConfigBlock_device_get, _AIOUSB.ADCConfigBlock_device_set)
    __swig_setmethods__["size"] = _AIOUSB.ADCConfigBlock_size_set
    __swig_getmethods__["size"] = _AIOUSB.ADCConfigBlock_size_get
    if _newclass:size = _swig_property(_AIOUSB.ADCConfigBlock_size_get, _AIOUSB.ADCConfigBlock_size_set)
    __swig_setmethods__["testing"] = _AIOUSB.ADCConfigBlock_testing_set
    __swig_getmethods__["testing"] = _AIOUSB.ADCConfigBlock_testing_get
    if _newclass:testing = _swig_property(_AIOUSB.ADCConfigBlock_testing_get, _AIOUSB.ADCConfigBlock_testing_set)
    __swig_setmethods__["registers"] = _AIOUSB.ADCConfigBlock_registers_set
    __swig_getmethods__["registers"] = _AIOUSB.ADCConfigBlock_registers_get
    if _newclass:registers = _swig_property(_AIOUSB.ADCConfigBlock_registers_get, _AIOUSB.ADCConfigBlock_registers_set)
    __swig_setmethods__["timeout"] = _AIOUSB.ADCConfigBlock_timeout_set
    __swig_getmethods__["timeout"] = _AIOUSB.ADCConfigBlock_timeout_get
    if _newclass:timeout = _swig_property(_AIOUSB.ADCConfigBlock_timeout_get, _AIOUSB.ADCConfigBlock_timeout_set)
    __swig_setmethods__["mux_settings"] = _AIOUSB.ADCConfigBlock_mux_settings_set
    __swig_getmethods__["mux_settings"] = _AIOUSB.ADCConfigBlock_mux_settings_get
    if _newclass:mux_settings = _swig_property(_AIOUSB.ADCConfigBlock_mux_settings_get, _AIOUSB.ADCConfigBlock_mux_settings_set)
    __swig_setmethods__["discardFirstSample"] = _AIOUSB.ADCConfigBlock_discardFirstSample_set
    __swig_getmethods__["discardFirstSample"] = _AIOUSB.ADCConfigBlock_discardFirstSample_get
    if _newclass:discardFirstSample = _swig_property(_AIOUSB.ADCConfigBlock_discardFirstSample_get, _AIOUSB.ADCConfigBlock_discardFirstSample_set)
    __swig_setmethods__["debug"] = _AIOUSB.ADCConfigBlock_debug_set
    __swig_getmethods__["debug"] = _AIOUSB.ADCConfigBlock_debug_get
    if _newclass:debug = _swig_property(_AIOUSB.ADCConfigBlock_debug_get, _AIOUSB.ADCConfigBlock_debug_set)
    def __init__(self): 
        this = _AIOUSB.new_ADCConfigBlock()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_ADCConfigBlock
    __del__ = lambda self : None;
ADCConfigBlock_swigregister = _AIOUSB.ADCConfigBlock_swigregister
ADCConfigBlock_swigregister(ADCConfigBlock)

class EnumStringLookup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnumStringLookup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnumStringLookup, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _AIOUSB.EnumStringLookup_value_set
    __swig_getmethods__["value"] = _AIOUSB.EnumStringLookup_value_get
    if _newclass:value = _swig_property(_AIOUSB.EnumStringLookup_value_get, _AIOUSB.EnumStringLookup_value_set)
    __swig_setmethods__["str"] = _AIOUSB.EnumStringLookup_str_set
    __swig_getmethods__["str"] = _AIOUSB.EnumStringLookup_str_get
    if _newclass:str = _swig_property(_AIOUSB.EnumStringLookup_str_get, _AIOUSB.EnumStringLookup_str_set)
    __swig_setmethods__["strvalue"] = _AIOUSB.EnumStringLookup_strvalue_set
    __swig_getmethods__["strvalue"] = _AIOUSB.EnumStringLookup_strvalue_get
    if _newclass:strvalue = _swig_property(_AIOUSB.EnumStringLookup_strvalue_get, _AIOUSB.EnumStringLookup_strvalue_set)
    def __init__(self): 
        this = _AIOUSB.new_EnumStringLookup()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_EnumStringLookup
    __del__ = lambda self : None;
EnumStringLookup_swigregister = _AIOUSB.EnumStringLookup_swigregister
EnumStringLookup_swigregister(EnumStringLookup)


def ADCConfigBlockInit(*args):
  return _AIOUSB.ADCConfigBlockInit(*args)
ADCConfigBlockInit = _AIOUSB.ADCConfigBlockInit

def ADC_VerifyAndCorrectConfigBlock(*args):
  return _AIOUSB.ADC_VerifyAndCorrectConfigBlock(*args)
ADC_VerifyAndCorrectConfigBlock = _AIOUSB.ADC_VerifyAndCorrectConfigBlock

def ADCConfigBlockSetAllGainCodeAndDiffMode(*args):
  return _AIOUSB.ADCConfigBlockSetAllGainCodeAndDiffMode(*args)
ADCConfigBlockSetAllGainCodeAndDiffMode = _AIOUSB.ADCConfigBlockSetAllGainCodeAndDiffMode

def ADCConfigBlockGetRegisters(*args):
  return _AIOUSB.ADCConfigBlockGetRegisters(*args)
ADCConfigBlockGetRegisters = _AIOUSB.ADCConfigBlockGetRegisters

def ADCConfigBlockSetRegister(*args):
  return _AIOUSB.ADCConfigBlockSetRegister(*args)
ADCConfigBlockSetRegister = _AIOUSB.ADCConfigBlockSetRegister

def ADCConfigBlockGetGainCode(*args):
  return _AIOUSB.ADCConfigBlockGetGainCode(*args)
ADCConfigBlockGetGainCode = _AIOUSB.ADCConfigBlockGetGainCode

def ADCConfigBlockSetGainCode(*args):
  return _AIOUSB.ADCConfigBlockSetGainCode(*args)
ADCConfigBlockSetGainCode = _AIOUSB.ADCConfigBlockSetGainCode

def ADCConfigBlockSetScanRange(*args):
  return _AIOUSB.ADCConfigBlockSetScanRange(*args)
ADCConfigBlockSetScanRange = _AIOUSB.ADCConfigBlockSetScanRange

def ADCConfigBlockSetStartChannel(*args):
  return _AIOUSB.ADCConfigBlockSetStartChannel(*args)
ADCConfigBlockSetStartChannel = _AIOUSB.ADCConfigBlockSetStartChannel

def ADCConfigBlockSetEndChannel(*args):
  return _AIOUSB.ADCConfigBlockSetEndChannel(*args)
ADCConfigBlockSetEndChannel = _AIOUSB.ADCConfigBlockSetEndChannel

def ADCConfigBlockSetCalMode(*args):
  return _AIOUSB.ADCConfigBlockSetCalMode(*args)
ADCConfigBlockSetCalMode = _AIOUSB.ADCConfigBlockSetCalMode

def ADCConfigBlockGetCalMode(*args):
  return _AIOUSB.ADCConfigBlockGetCalMode(*args)
ADCConfigBlockGetCalMode = _AIOUSB.ADCConfigBlockGetCalMode

def ADCConfigBlockToYAML(*args):
  return _AIOUSB.ADCConfigBlockToYAML(*args)
ADCConfigBlockToYAML = _AIOUSB.ADCConfigBlockToYAML

def ADCConfigBlockGetStartChannel(*args):
  return _AIOUSB.ADCConfigBlockGetStartChannel(*args)
ADCConfigBlockGetStartChannel = _AIOUSB.ADCConfigBlockGetStartChannel

def ADCConfigBlockGetEndChannel(*args):
  return _AIOUSB.ADCConfigBlockGetEndChannel(*args)
ADCConfigBlockGetEndChannel = _AIOUSB.ADCConfigBlockGetEndChannel

def ADCConfigBlockGetOversample(*args):
  return _AIOUSB.ADCConfigBlockGetOversample(*args)
ADCConfigBlockGetOversample = _AIOUSB.ADCConfigBlockGetOversample

def ADCConfigBlockSetOversample(*args):
  return _AIOUSB.ADCConfigBlockSetOversample(*args)
ADCConfigBlockSetOversample = _AIOUSB.ADCConfigBlockSetOversample

def ADCConfigBlockGetTimeout(*args):
  return _AIOUSB.ADCConfigBlockGetTimeout(*args)
ADCConfigBlockGetTimeout = _AIOUSB.ADCConfigBlockGetTimeout

def ADCConfigBlockSetTimeout(*args):
  return _AIOUSB.ADCConfigBlockSetTimeout(*args)
ADCConfigBlockSetTimeout = _AIOUSB.ADCConfigBlockSetTimeout

def ADCConfigBlockGetTriggerMode(*args):
  return _AIOUSB.ADCConfigBlockGetTriggerMode(*args)
ADCConfigBlockGetTriggerMode = _AIOUSB.ADCConfigBlockGetTriggerMode

def ADCConfigBlockSetTriggerMode(*args):
  return _AIOUSB.ADCConfigBlockSetTriggerMode(*args)
ADCConfigBlockSetTriggerMode = _AIOUSB.ADCConfigBlockSetTriggerMode

def ADCConfigBlockSetDifferentialMode(*args):
  return _AIOUSB.ADCConfigBlockSetDifferentialMode(*args)
ADCConfigBlockSetDifferentialMode = _AIOUSB.ADCConfigBlockSetDifferentialMode

def ADCConfigBlockSetRangeSingle(*args):
  return _AIOUSB.ADCConfigBlockSetRangeSingle(*args)
ADCConfigBlockSetRangeSingle = _AIOUSB.ADCConfigBlockSetRangeSingle

def ADCConfigBlockCopy(*args):
  return _AIOUSB.ADCConfigBlockCopy(*args)
ADCConfigBlockCopy = _AIOUSB.ADCConfigBlockCopy

def ADCConfigBlockSetDevice(*args):
  return _AIOUSB.ADCConfigBlockSetDevice(*args)
ADCConfigBlockSetDevice = _AIOUSB.ADCConfigBlockSetDevice

def ADCConfigBlockGetAIOUSBDevice(*args):
  return _AIOUSB.ADCConfigBlockGetAIOUSBDevice(*args)
ADCConfigBlockGetAIOUSBDevice = _AIOUSB.ADCConfigBlockGetAIOUSBDevice

def ADCConfigBlockInitialize(*args):
  return _AIOUSB.ADCConfigBlockInitialize(*args)
ADCConfigBlockInitialize = _AIOUSB.ADCConfigBlockInitialize

def ADCConfigBlockSetTesting(*args):
  return _AIOUSB.ADCConfigBlockSetTesting(*args)
ADCConfigBlockSetTesting = _AIOUSB.ADCConfigBlockSetTesting

def ADCConfigBlockGetTesting(*args):
  return _AIOUSB.ADCConfigBlockGetTesting(*args)
ADCConfigBlockGetTesting = _AIOUSB.ADCConfigBlockGetTesting

def ADCConfigBlockSetDebug(*args):
  return _AIOUSB.ADCConfigBlockSetDebug(*args)
ADCConfigBlockSetDebug = _AIOUSB.ADCConfigBlockSetDebug

def ADCConfigBlockGetDebug(*args):
  return _AIOUSB.ADCConfigBlockGetDebug(*args)
ADCConfigBlockGetDebug = _AIOUSB.ADCConfigBlockGetDebug

def ADCConfigBlockToJSON(*args):
  return _AIOUSB.ADCConfigBlockToJSON(*args)
ADCConfigBlockToJSON = _AIOUSB.ADCConfigBlockToJSON

def NewADCConfigBlockFromJSON(*args):
  return _AIOUSB.NewADCConfigBlockFromJSON(*args)
NewADCConfigBlockFromJSON = _AIOUSB.NewADCConfigBlockFromJSON

def DeleteADCConfigBlock(*args):
  return _AIOUSB.DeleteADCConfigBlock(*args)
DeleteADCConfigBlock = _AIOUSB.DeleteADCConfigBlock
class AIOContinuousBuf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AIOContinuousBuf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AIOContinuousBuf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callback"] = _AIOUSB.AIOContinuousBuf_callback_set
    __swig_getmethods__["callback"] = _AIOUSB.AIOContinuousBuf_callback_get
    if _newclass:callback = _swig_property(_AIOUSB.AIOContinuousBuf_callback_get, _AIOUSB.AIOContinuousBuf_callback_set)
    __swig_setmethods__["work"] = _AIOUSB.AIOContinuousBuf_work_set
    __swig_getmethods__["work"] = _AIOUSB.AIOContinuousBuf_work_get
    if _newclass:work = _swig_property(_AIOUSB.AIOContinuousBuf_work_get, _AIOUSB.AIOContinuousBuf_work_set)
    __swig_setmethods__["DeviceIndex"] = _AIOUSB.AIOContinuousBuf_DeviceIndex_set
    __swig_getmethods__["DeviceIndex"] = _AIOUSB.AIOContinuousBuf_DeviceIndex_get
    if _newclass:DeviceIndex = _swig_property(_AIOUSB.AIOContinuousBuf_DeviceIndex_get, _AIOUSB.AIOContinuousBuf_DeviceIndex_set)
    __swig_setmethods__["buffer"] = _AIOUSB.AIOContinuousBuf_buffer_set
    __swig_getmethods__["buffer"] = _AIOUSB.AIOContinuousBuf_buffer_get
    if _newclass:buffer = _swig_property(_AIOUSB.AIOContinuousBuf_buffer_get, _AIOUSB.AIOContinuousBuf_buffer_set)
    __swig_setmethods__["countsbuf"] = _AIOUSB.AIOContinuousBuf_countsbuf_set
    __swig_getmethods__["countsbuf"] = _AIOUSB.AIOContinuousBuf_countsbuf_get
    if _newclass:countsbuf = _swig_property(_AIOUSB.AIOContinuousBuf_countsbuf_get, _AIOUSB.AIOContinuousBuf_countsbuf_set)
    __swig_setmethods__["bufunitsize"] = _AIOUSB.AIOContinuousBuf_bufunitsize_set
    __swig_getmethods__["bufunitsize"] = _AIOUSB.AIOContinuousBuf_bufunitsize_get
    if _newclass:bufunitsize = _swig_property(_AIOUSB.AIOContinuousBuf_bufunitsize_get, _AIOUSB.AIOContinuousBuf_bufunitsize_set)
    __swig_setmethods__["hz"] = _AIOUSB.AIOContinuousBuf_hz_set
    __swig_getmethods__["hz"] = _AIOUSB.AIOContinuousBuf_hz_get
    if _newclass:hz = _swig_property(_AIOUSB.AIOContinuousBuf_hz_get, _AIOUSB.AIOContinuousBuf_hz_set)
    __swig_setmethods__["usbbuf_size"] = _AIOUSB.AIOContinuousBuf_usbbuf_size_set
    __swig_getmethods__["usbbuf_size"] = _AIOUSB.AIOContinuousBuf_usbbuf_size_get
    if _newclass:usbbuf_size = _swig_property(_AIOUSB.AIOContinuousBuf_usbbuf_size_get, _AIOUSB.AIOContinuousBuf_usbbuf_size_set)
    __swig_setmethods__["divisora"] = _AIOUSB.AIOContinuousBuf_divisora_set
    __swig_getmethods__["divisora"] = _AIOUSB.AIOContinuousBuf_divisora_get
    if _newclass:divisora = _swig_property(_AIOUSB.AIOContinuousBuf_divisora_get, _AIOUSB.AIOContinuousBuf_divisora_set)
    __swig_setmethods__["divisorb"] = _AIOUSB.AIOContinuousBuf_divisorb_set
    __swig_getmethods__["divisorb"] = _AIOUSB.AIOContinuousBuf_divisorb_get
    if _newclass:divisorb = _swig_property(_AIOUSB.AIOContinuousBuf_divisorb_get, _AIOUSB.AIOContinuousBuf_divisorb_set)
    __swig_setmethods__["_read_pos"] = _AIOUSB.AIOContinuousBuf__read_pos_set
    __swig_getmethods__["_read_pos"] = _AIOUSB.AIOContinuousBuf__read_pos_get
    if _newclass:_read_pos = _swig_property(_AIOUSB.AIOContinuousBuf__read_pos_get, _AIOUSB.AIOContinuousBuf__read_pos_set)
    __swig_setmethods__["_write_pos"] = _AIOUSB.AIOContinuousBuf__write_pos_set
    __swig_getmethods__["_write_pos"] = _AIOUSB.AIOContinuousBuf__write_pos_get
    if _newclass:_write_pos = _swig_property(_AIOUSB.AIOContinuousBuf__write_pos_get, _AIOUSB.AIOContinuousBuf__write_pos_set)
    __swig_setmethods__["basesize"] = _AIOUSB.AIOContinuousBuf_basesize_set
    __swig_getmethods__["basesize"] = _AIOUSB.AIOContinuousBuf_basesize_get
    if _newclass:basesize = _swig_property(_AIOUSB.AIOContinuousBuf_basesize_get, _AIOUSB.AIOContinuousBuf_basesize_set)
    __swig_setmethods__["size"] = _AIOUSB.AIOContinuousBuf_size_set
    __swig_getmethods__["size"] = _AIOUSB.AIOContinuousBuf_size_get
    if _newclass:size = _swig_property(_AIOUSB.AIOContinuousBuf_size_get, _AIOUSB.AIOContinuousBuf_size_set)
    __swig_setmethods__["scans_to_read"] = _AIOUSB.AIOContinuousBuf_scans_to_read_set
    __swig_getmethods__["scans_to_read"] = _AIOUSB.AIOContinuousBuf_scans_to_read_get
    if _newclass:scans_to_read = _swig_property(_AIOUSB.AIOContinuousBuf_scans_to_read_get, _AIOUSB.AIOContinuousBuf_scans_to_read_set)
    __swig_setmethods__["counter_control"] = _AIOUSB.AIOContinuousBuf_counter_control_set
    __swig_getmethods__["counter_control"] = _AIOUSB.AIOContinuousBuf_counter_control_get
    if _newclass:counter_control = _swig_property(_AIOUSB.AIOContinuousBuf_counter_control_get, _AIOUSB.AIOContinuousBuf_counter_control_set)
    __swig_setmethods__["timeout"] = _AIOUSB.AIOContinuousBuf_timeout_set
    __swig_getmethods__["timeout"] = _AIOUSB.AIOContinuousBuf_timeout_get
    if _newclass:timeout = _swig_property(_AIOUSB.AIOContinuousBuf_timeout_get, _AIOUSB.AIOContinuousBuf_timeout_set)
    __swig_setmethods__["exitcode"] = _AIOUSB.AIOContinuousBuf_exitcode_set
    __swig_getmethods__["exitcode"] = _AIOUSB.AIOContinuousBuf_exitcode_get
    if _newclass:exitcode = _swig_property(_AIOUSB.AIOContinuousBuf_exitcode_get, _AIOUSB.AIOContinuousBuf_exitcode_set)
    __swig_setmethods__["testing"] = _AIOUSB.AIOContinuousBuf_testing_set
    __swig_getmethods__["testing"] = _AIOUSB.AIOContinuousBuf_testing_get
    if _newclass:testing = _swig_property(_AIOUSB.AIOContinuousBuf_testing_get, _AIOUSB.AIOContinuousBuf_testing_set)
    __swig_setmethods__["debug"] = _AIOUSB.AIOContinuousBuf_debug_set
    __swig_getmethods__["debug"] = _AIOUSB.AIOContinuousBuf_debug_get
    if _newclass:debug = _swig_property(_AIOUSB.AIOContinuousBuf_debug_get, _AIOUSB.AIOContinuousBuf_debug_set)
    __swig_setmethods__["extra"] = _AIOUSB.AIOContinuousBuf_extra_set
    __swig_getmethods__["extra"] = _AIOUSB.AIOContinuousBuf_extra_get
    if _newclass:extra = _swig_property(_AIOUSB.AIOContinuousBuf_extra_get, _AIOUSB.AIOContinuousBuf_extra_set)
    __swig_setmethods__["mask"] = _AIOUSB.AIOContinuousBuf_mask_set
    __swig_getmethods__["mask"] = _AIOUSB.AIOContinuousBuf_mask_get
    if _newclass:mask = _swig_property(_AIOUSB.AIOContinuousBuf_mask_get, _AIOUSB.AIOContinuousBuf_mask_set)
    __swig_setmethods__["tmpbuf"] = _AIOUSB.AIOContinuousBuf_tmpbuf_set
    __swig_getmethods__["tmpbuf"] = _AIOUSB.AIOContinuousBuf_tmpbuf_get
    if _newclass:tmpbuf = _swig_property(_AIOUSB.AIOContinuousBuf_tmpbuf_get, _AIOUSB.AIOContinuousBuf_tmpbuf_set)
    __swig_setmethods__["tmpbufsize"] = _AIOUSB.AIOContinuousBuf_tmpbufsize_set
    __swig_getmethods__["tmpbufsize"] = _AIOUSB.AIOContinuousBuf_tmpbufsize_get
    if _newclass:tmpbufsize = _swig_property(_AIOUSB.AIOContinuousBuf_tmpbufsize_get, _AIOUSB.AIOContinuousBuf_tmpbufsize_set)
    __swig_setmethods__["status"] = _AIOUSB.AIOContinuousBuf_status_set
    __swig_getmethods__["status"] = _AIOUSB.AIOContinuousBuf_status_get
    if _newclass:status = _swig_property(_AIOUSB.AIOContinuousBuf_status_get, _AIOUSB.AIOContinuousBuf_status_set)
    def __init__(self, *args): 
        this = _AIOUSB.new_AIOContinuousBuf(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_AIOContinuousBuf
    __del__ = lambda self : None;
AIOContinuousBuf_swigregister = _AIOUSB.AIOContinuousBuf_swigregister
AIOContinuousBuf_swigregister(AIOContinuousBuf)


def NewAIOContinuousBuf(*args):
  return _AIOUSB.NewAIOContinuousBuf(*args)
NewAIOContinuousBuf = _AIOUSB.NewAIOContinuousBuf

def NewAIOContinuousBufWithoutConfig(*args):
  return _AIOUSB.NewAIOContinuousBufWithoutConfig(*args)
NewAIOContinuousBufWithoutConfig = _AIOUSB.NewAIOContinuousBufWithoutConfig

def NewAIOContinuousBufForCounts(*args):
  return _AIOUSB.NewAIOContinuousBufForCounts(*args)
NewAIOContinuousBufForCounts = _AIOUSB.NewAIOContinuousBufForCounts

def NewAIOContinuousBufTesting(*args):
  return _AIOUSB.NewAIOContinuousBufTesting(*args)
NewAIOContinuousBufTesting = _AIOUSB.NewAIOContinuousBufTesting

def DeleteAIOContinuousBuf(*args):
  return _AIOUSB.DeleteAIOContinuousBuf(*args)
DeleteAIOContinuousBuf = _AIOUSB.DeleteAIOContinuousBuf

def AIOContinuousBufInitConfiguration(*args):
  return _AIOUSB.AIOContinuousBufInitConfiguration(*args)
AIOContinuousBufInitConfiguration = _AIOUSB.AIOContinuousBufInitConfiguration

def AIOContinuousBufGetCallback(*args):
  return _AIOUSB.AIOContinuousBufGetCallback(*args)
AIOContinuousBufGetCallback = _AIOUSB.AIOContinuousBufGetCallback

def AIOContinuousBufSetCallback(*args):
  return _AIOUSB.AIOContinuousBufSetCallback(*args)
AIOContinuousBufSetCallback = _AIOUSB.AIOContinuousBufSetCallback

def AIOContinuousBufSetTesting(*args):
  return _AIOUSB.AIOContinuousBufSetTesting(*args)
AIOContinuousBufSetTesting = _AIOUSB.AIOContinuousBufSetTesting

def AIOContinuousBufGetTesting(*args):
  return _AIOUSB.AIOContinuousBufGetTesting(*args)
AIOContinuousBufGetTesting = _AIOUSB.AIOContinuousBufGetTesting

def AIOContinuousBufSendPreConfig(*args):
  return _AIOUSB.AIOContinuousBufSendPreConfig(*args)
AIOContinuousBufSendPreConfig = _AIOUSB.AIOContinuousBufSendPreConfig

def AIOContinuousBufSetStartAndEndChannel(*args):
  return _AIOUSB.AIOContinuousBufSetStartAndEndChannel(*args)
AIOContinuousBufSetStartAndEndChannel = _AIOUSB.AIOContinuousBufSetStartAndEndChannel

def AIOContinuousBufSetAllGainCodeAndDiffMode(*args):
  return _AIOUSB.AIOContinuousBufSetAllGainCodeAndDiffMode(*args)
AIOContinuousBufSetAllGainCodeAndDiffMode = _AIOUSB.AIOContinuousBufSetAllGainCodeAndDiffMode

def AIOContinuousBufGetDeviceIndex(*args):
  return _AIOUSB.AIOContinuousBufGetDeviceIndex(*args)
AIOContinuousBufGetDeviceIndex = _AIOUSB.AIOContinuousBufGetDeviceIndex

def AIOContinuousBufGetOverSample(*args):
  return _AIOUSB.AIOContinuousBufGetOverSample(*args)
AIOContinuousBufGetOverSample = _AIOUSB.AIOContinuousBufGetOverSample

def AIOContinuousBufSetDiscardFirstSample(*args):
  return _AIOUSB.AIOContinuousBufSetDiscardFirstSample(*args)
AIOContinuousBufSetDiscardFirstSample = _AIOUSB.AIOContinuousBufSetDiscardFirstSample

def AIOContinuousBufNumberChannels(*args):
  return _AIOUSB.AIOContinuousBufNumberChannels(*args)
AIOContinuousBufNumberChannels = _AIOUSB.AIOContinuousBufNumberChannels

def AIOContinuousBufSetChannelMask(*args):
  return _AIOUSB.AIOContinuousBufSetChannelMask(*args)
AIOContinuousBufSetChannelMask = _AIOUSB.AIOContinuousBufSetChannelMask

def AIOContinuousBufNumberSignals(*args):
  return _AIOUSB.AIOContinuousBufNumberSignals(*args)
AIOContinuousBufNumberSignals = _AIOUSB.AIOContinuousBufNumberSignals

def AIOContinuousBufSetChannelRange(*args):
  return _AIOUSB.AIOContinuousBufSetChannelRange(*args)
AIOContinuousBufSetChannelRange = _AIOUSB.AIOContinuousBufSetChannelRange

def AIOContinuousBufSaveConfig(*args):
  return _AIOUSB.AIOContinuousBufSaveConfig(*args)
AIOContinuousBufSaveConfig = _AIOUSB.AIOContinuousBufSaveConfig

def AIOContinuousBufSetDeviceIndex(*args):
  return _AIOUSB.AIOContinuousBufSetDeviceIndex(*args)
AIOContinuousBufSetDeviceIndex = _AIOUSB.AIOContinuousBufSetDeviceIndex

def AIOContinuousBufNumberWriteScansInCounts(*args):
  return _AIOUSB.AIOContinuousBufNumberWriteScansInCounts(*args)
AIOContinuousBufNumberWriteScansInCounts = _AIOUSB.AIOContinuousBufNumberWriteScansInCounts

def AIOContinuousBufResetDevice(*args):
  return _AIOUSB.AIOContinuousBufResetDevice(*args)
AIOContinuousBufResetDevice = _AIOUSB.AIOContinuousBufResetDevice

def AIOContinuousBufSetOverSample(*args):
  return _AIOUSB.AIOContinuousBufSetOverSample(*args)
AIOContinuousBufSetOverSample = _AIOUSB.AIOContinuousBufSetOverSample

def AIOContinuousBufSetTimeout(*args):
  return _AIOUSB.AIOContinuousBufSetTimeout(*args)
AIOContinuousBufSetTimeout = _AIOUSB.AIOContinuousBufSetTimeout

def AIOContinuousBufGetTimeout(*args):
  return _AIOUSB.AIOContinuousBufGetTimeout(*args)
AIOContinuousBufGetTimeout = _AIOUSB.AIOContinuousBufGetTimeout

def AIOContinuousBufSetDebug(*args):
  return _AIOUSB.AIOContinuousBufSetDebug(*args)
AIOContinuousBufSetDebug = _AIOUSB.AIOContinuousBufSetDebug

def AIOContinuousBufGetDebug(*args):
  return _AIOUSB.AIOContinuousBufGetDebug(*args)
AIOContinuousBufGetDebug = _AIOUSB.AIOContinuousBufGetDebug

def AIOContinuousBufGetNumberScansToRead(*args):
  return _AIOUSB.AIOContinuousBufGetNumberScansToRead(*args)
AIOContinuousBufGetNumberScansToRead = _AIOUSB.AIOContinuousBufGetNumberScansToRead

def AIOContinuousBufSetNumberScansToRead(*args):
  return _AIOUSB.AIOContinuousBufSetNumberScansToRead(*args)
AIOContinuousBufSetNumberScansToRead = _AIOUSB.AIOContinuousBufSetNumberScansToRead

def AIOContinuousBufLock(*args):
  return _AIOUSB.AIOContinuousBufLock(*args)
AIOContinuousBufLock = _AIOUSB.AIOContinuousBufLock

def AIOContinuousBufUnlock(*args):
  return _AIOUSB.AIOContinuousBufUnlock(*args)
AIOContinuousBufUnlock = _AIOUSB.AIOContinuousBufUnlock

def AIOContinuousBufCallbackStart(*args):
  return _AIOUSB.AIOContinuousBufCallbackStart(*args)
AIOContinuousBufCallbackStart = _AIOUSB.AIOContinuousBufCallbackStart

def AIOContinuousBufGetReadPosition(*args):
  return _AIOUSB.AIOContinuousBufGetReadPosition(*args)
AIOContinuousBufGetReadPosition = _AIOUSB.AIOContinuousBufGetReadPosition

def AIOContinuousBufGetWritePosition(*args):
  return _AIOUSB.AIOContinuousBufGetWritePosition(*args)
AIOContinuousBufGetWritePosition = _AIOUSB.AIOContinuousBufGetWritePosition

def AIOContinuousBufAvailableReadSize(*args):
  return _AIOUSB.AIOContinuousBufAvailableReadSize(*args)
AIOContinuousBufAvailableReadSize = _AIOUSB.AIOContinuousBufAvailableReadSize

def AIOContinuousBufGetSize(*args):
  return _AIOUSB.AIOContinuousBufGetSize(*args)
AIOContinuousBufGetSize = _AIOUSB.AIOContinuousBufGetSize

def AIOContinuousBufGetStatus(*args):
  return _AIOUSB.AIOContinuousBufGetStatus(*args)
AIOContinuousBufGetStatus = _AIOUSB.AIOContinuousBufGetStatus

def AIOContinuousBufGetExitCode(*args):
  return _AIOUSB.AIOContinuousBufGetExitCode(*args)
AIOContinuousBufGetExitCode = _AIOUSB.AIOContinuousBufGetExitCode

def AIOContinuousBufReadIntegerScanCounts(*args):
  return _AIOUSB.AIOContinuousBufReadIntegerScanCounts(*args)
AIOContinuousBufReadIntegerScanCounts = _AIOUSB.AIOContinuousBufReadIntegerScanCounts

def AIOContinuousBufReadCompleteScanCounts(*args):
  return _AIOUSB.AIOContinuousBufReadCompleteScanCounts(*args)
AIOContinuousBufReadCompleteScanCounts = _AIOUSB.AIOContinuousBufReadCompleteScanCounts

def AIOContinuousBufReadIntegerNumberOfScans(*args):
  return _AIOUSB.AIOContinuousBufReadIntegerNumberOfScans(*args)
AIOContinuousBufReadIntegerNumberOfScans = _AIOUSB.AIOContinuousBufReadIntegerNumberOfScans

def AIOContinuousBufCountScansAvailable(*args):
  return _AIOUSB.AIOContinuousBufCountScansAvailable(*args)
AIOContinuousBufCountScansAvailable = _AIOUSB.AIOContinuousBufCountScansAvailable

def AIOContinuousBufSetClock(*args):
  return _AIOUSB.AIOContinuousBufSetClock(*args)
AIOContinuousBufSetClock = _AIOUSB.AIOContinuousBufSetClock

def AIOContinuousBufEnd(*args):
  return _AIOUSB.AIOContinuousBufEnd(*args)
AIOContinuousBufEnd = _AIOUSB.AIOContinuousBufEnd

def AIOContinuousBufSimpleSetupConfig(*args):
  return _AIOUSB.AIOContinuousBufSimpleSetupConfig(*args)
AIOContinuousBufSimpleSetupConfig = _AIOUSB.AIOContinuousBufSimpleSetupConfig

def AIOContinuousBufRead(*args):
  return _AIOUSB.AIOContinuousBufRead(*args)
AIOContinuousBufRead = _AIOUSB.AIOContinuousBufRead

def AIOContinuousBufWrite(*args):
  return _AIOUSB.AIOContinuousBufWrite(*args)
AIOContinuousBufWrite = _AIOUSB.AIOContinuousBufWrite

def AIOContinuousBufWriteCounts(*args):
  return _AIOUSB.AIOContinuousBufWriteCounts(*args)
AIOContinuousBufWriteCounts = _AIOUSB.AIOContinuousBufWriteCounts

def Launch(*args):
  return _AIOUSB.Launch(*args)
Launch = _AIOUSB.Launch

def AIOContinuousBufCleanup(*args):
  return _AIOUSB.AIOContinuousBufCleanup(*args)
AIOContinuousBufCleanup = _AIOUSB.AIOContinuousBufCleanup
BASIC = _AIOUSB.BASIC
TERSE = _AIOUSB.TERSE
JSON = _AIOUSB.JSON
YAML = _AIOUSB.YAML

def AIOUSB_GetDeviceByProductID(*args):
  return _AIOUSB.AIOUSB_GetDeviceByProductID(*args)
AIOUSB_GetDeviceByProductID = _AIOUSB.AIOUSB_GetDeviceByProductID

def GetDeviceBySerialNumber(*args):
  return _AIOUSB.GetDeviceBySerialNumber(*args)
GetDeviceBySerialNumber = _AIOUSB.GetDeviceBySerialNumber

def GetDeviceSerialNumber(*args):
  return _AIOUSB.GetDeviceSerialNumber(*args)
GetDeviceSerialNumber = _AIOUSB.GetDeviceSerialNumber

def FindDevices(*args):
  return _AIOUSB.FindDevices(*args)
FindDevices = _AIOUSB.FindDevices

def AIOUSB_GetDeviceProperties(*args):
  return _AIOUSB.AIOUSB_GetDeviceProperties(*args)
AIOUSB_GetDeviceProperties = _AIOUSB.AIOUSB_GetDeviceProperties

def AIOUSB_GetResultCodeAsString(*args):
  return _AIOUSB.AIOUSB_GetResultCodeAsString(*args)
AIOUSB_GetResultCodeAsString = _AIOUSB.AIOUSB_GetResultCodeAsString

def AIOUSB_ListDevices():
  return _AIOUSB.AIOUSB_ListDevices()
AIOUSB_ListDevices = _AIOUSB.AIOUSB_ListDevices

def AIOUSB_ShowDevices(*args):
  return _AIOUSB.AIOUSB_ShowDevices(*args)
AIOUSB_ShowDevices = _AIOUSB.AIOUSB_ShowDevices
class AIOChannelMask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AIOChannelMask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AIOChannelMask, name)
    __repr__ = _swig_repr
    __swig_setmethods__["signal_indices"] = _AIOUSB.AIOChannelMask_signal_indices_set
    __swig_getmethods__["signal_indices"] = _AIOUSB.AIOChannelMask_signal_indices_get
    if _newclass:signal_indices = _swig_property(_AIOUSB.AIOChannelMask_signal_indices_get, _AIOUSB.AIOChannelMask_signal_indices_set)
    __swig_setmethods__["signal_index"] = _AIOUSB.AIOChannelMask_signal_index_set
    __swig_getmethods__["signal_index"] = _AIOUSB.AIOChannelMask_signal_index_get
    if _newclass:signal_index = _swig_property(_AIOUSB.AIOChannelMask_signal_index_get, _AIOUSB.AIOChannelMask_signal_index_set)
    __swig_setmethods__["active_signals"] = _AIOUSB.AIOChannelMask_active_signals_set
    __swig_getmethods__["active_signals"] = _AIOUSB.AIOChannelMask_active_signals_get
    if _newclass:active_signals = _swig_property(_AIOUSB.AIOChannelMask_active_signals_get, _AIOUSB.AIOChannelMask_active_signals_set)
    __swig_setmethods__["signals"] = _AIOUSB.AIOChannelMask_signals_set
    __swig_getmethods__["signals"] = _AIOUSB.AIOChannelMask_signals_get
    if _newclass:signals = _swig_property(_AIOUSB.AIOChannelMask_signals_get, _AIOUSB.AIOChannelMask_signals_set)
    __swig_setmethods__["number_signals"] = _AIOUSB.AIOChannelMask_number_signals_set
    __swig_getmethods__["number_signals"] = _AIOUSB.AIOChannelMask_number_signals_get
    if _newclass:number_signals = _swig_property(_AIOUSB.AIOChannelMask_number_signals_get, _AIOUSB.AIOChannelMask_number_signals_set)
    __swig_setmethods__["pos"] = _AIOUSB.AIOChannelMask_pos_set
    __swig_getmethods__["pos"] = _AIOUSB.AIOChannelMask_pos_get
    if _newclass:pos = _swig_property(_AIOUSB.AIOChannelMask_pos_get, _AIOUSB.AIOChannelMask_pos_set)
    __swig_setmethods__["size"] = _AIOUSB.AIOChannelMask_size_set
    __swig_getmethods__["size"] = _AIOUSB.AIOChannelMask_size_get
    if _newclass:size = _swig_property(_AIOUSB.AIOChannelMask_size_get, _AIOUSB.AIOChannelMask_size_set)
    __swig_setmethods__["strrep"] = _AIOUSB.AIOChannelMask_strrep_set
    __swig_getmethods__["strrep"] = _AIOUSB.AIOChannelMask_strrep_get
    if _newclass:strrep = _swig_property(_AIOUSB.AIOChannelMask_strrep_get, _AIOUSB.AIOChannelMask_strrep_set)
    __swig_setmethods__["strrepsmall"] = _AIOUSB.AIOChannelMask_strrepsmall_set
    __swig_getmethods__["strrepsmall"] = _AIOUSB.AIOChannelMask_strrepsmall_get
    if _newclass:strrepsmall = _swig_property(_AIOUSB.AIOChannelMask_strrepsmall_get, _AIOUSB.AIOChannelMask_strrepsmall_set)
    def __init__(self, *args): 
        this = _AIOUSB.new_AIOChannelMask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_AIOChannelMask
    __del__ = lambda self : None;
    def __str__(self): return _AIOUSB.AIOChannelMask___str__(self)
AIOChannelMask_swigregister = _AIOUSB.AIOChannelMask_swigregister
AIOChannelMask_swigregister(AIOChannelMask)


def NewAIOChannelMask(*args):
  return _AIOUSB.NewAIOChannelMask(*args)
NewAIOChannelMask = _AIOUSB.NewAIOChannelMask

def DeleteAIOChannelMask(*args):
  return _AIOUSB.DeleteAIOChannelMask(*args)
DeleteAIOChannelMask = _AIOUSB.DeleteAIOChannelMask

def NewAIOChannelMaskFromStr(*args):
  return _AIOUSB.NewAIOChannelMaskFromStr(*args)
NewAIOChannelMaskFromStr = _AIOUSB.NewAIOChannelMaskFromStr

def AIOChannelMaskToString(*args):
  return _AIOUSB.AIOChannelMaskToString(*args)
AIOChannelMaskToString = _AIOUSB.AIOChannelMaskToString

def AIOChannelMaskToStringAtIndex(*args):
  return _AIOUSB.AIOChannelMaskToStringAtIndex(*args)
AIOChannelMaskToStringAtIndex = _AIOUSB.AIOChannelMaskToStringAtIndex

def AIOChannelMaskGetMask(*args):
  return _AIOUSB.AIOChannelMaskGetMask(*args)
AIOChannelMaskGetMask = _AIOUSB.AIOChannelMaskGetMask

def AIOChannelMaskGetMaskAtIndex(*args):
  return _AIOUSB.AIOChannelMaskGetMaskAtIndex(*args)
AIOChannelMaskGetMaskAtIndex = _AIOUSB.AIOChannelMaskGetMaskAtIndex

def AIOChannelMaskNumberChannels(*args):
  return _AIOUSB.AIOChannelMaskNumberChannels(*args)
AIOChannelMaskNumberChannels = _AIOUSB.AIOChannelMaskNumberChannels

def AIOChannelMaskNumberSignals(*args):
  return _AIOUSB.AIOChannelMaskNumberSignals(*args)
AIOChannelMaskNumberSignals = _AIOUSB.AIOChannelMaskNumberSignals

def AIOChannelMaskGetSize(*args):
  return _AIOUSB.AIOChannelMaskGetSize(*args)
AIOChannelMaskGetSize = _AIOUSB.AIOChannelMaskGetSize

def AIOChannelMaskIndices(*args):
  return _AIOUSB.AIOChannelMaskIndices(*args)
AIOChannelMaskIndices = _AIOUSB.AIOChannelMaskIndices

def AIOChannelMaskNextIndex(*args):
  return _AIOUSB.AIOChannelMaskNextIndex(*args)
AIOChannelMaskNextIndex = _AIOUSB.AIOChannelMaskNextIndex

def AIOChannelMaskSetMaskFromInt(*args):
  return _AIOUSB.AIOChannelMaskSetMaskFromInt(*args)
AIOChannelMaskSetMaskFromInt = _AIOUSB.AIOChannelMaskSetMaskFromInt

def AIOChannelMaskSetMaskAtIndex(*args):
  return _AIOUSB.AIOChannelMaskSetMaskAtIndex(*args)
AIOChannelMaskSetMaskAtIndex = _AIOUSB.AIOChannelMaskSetMaskAtIndex

def AIOChannelMaskSetMaskFromStr(*args):
  return _AIOUSB.AIOChannelMaskSetMaskFromStr(*args)
AIOChannelMaskSetMaskFromStr = _AIOUSB.AIOChannelMaskSetMaskFromStr

def AIODeviceTableAddDeviceToDeviceTable(*args):
  return _AIOUSB.AIODeviceTableAddDeviceToDeviceTable(*args)
AIODeviceTableAddDeviceToDeviceTable = _AIOUSB.AIODeviceTableAddDeviceToDeviceTable

def AIODeviceTableAddDeviceToDeviceTableWithUSBDevice(*args):
  return _AIOUSB.AIODeviceTableAddDeviceToDeviceTableWithUSBDevice(*args)
AIODeviceTableAddDeviceToDeviceTableWithUSBDevice = _AIOUSB.AIODeviceTableAddDeviceToDeviceTableWithUSBDevice

def AIODeviceTablePopulateTable():
  return _AIOUSB.AIODeviceTablePopulateTable()
AIODeviceTablePopulateTable = _AIOUSB.AIODeviceTablePopulateTable

def AIODeviceTablePopulateTableTest(*args):
  return _AIOUSB.AIODeviceTablePopulateTableTest(*args)
AIODeviceTablePopulateTableTest = _AIOUSB.AIODeviceTablePopulateTableTest

def AIODeviceTableClearDevices():
  return _AIOUSB.AIODeviceTableClearDevices()
AIODeviceTableClearDevices = _AIOUSB.AIODeviceTableClearDevices

def AIODeviceTableGetDeviceAtIndex(*args):
  return _AIOUSB.AIODeviceTableGetDeviceAtIndex(*args)
AIODeviceTableGetDeviceAtIndex = _AIOUSB.AIODeviceTableGetDeviceAtIndex

def AIODeviceTableGetUSBDeviceAtIndex(*args):
  return _AIOUSB.AIODeviceTableGetUSBDeviceAtIndex(*args)
AIODeviceTableGetUSBDeviceAtIndex = _AIOUSB.AIODeviceTableGetUSBDeviceAtIndex

def _setup_device_parameters(*args):
  return _AIOUSB._setup_device_parameters(*args)
_setup_device_parameters = _AIOUSB._setup_device_parameters

def QueryDeviceInfo(*args):
  return _AIOUSB.QueryDeviceInfo(*args)
QueryDeviceInfo = _AIOUSB.QueryDeviceInfo

def GetDevices():
  return _AIOUSB.GetDevices()
GetDevices = _AIOUSB.GetDevices

def GetSafeDeviceName(*args):
  return _AIOUSB.GetSafeDeviceName(*args)
GetSafeDeviceName = _AIOUSB.GetSafeDeviceName

def ProductIDToName(*args):
  return _AIOUSB.ProductIDToName(*args)
ProductIDToName = _AIOUSB.ProductIDToName

def AIOUSB_Init():
  return _AIOUSB.AIOUSB_Init()
AIOUSB_Init = _AIOUSB.AIOUSB_Init

def AIOUSB_EnsureOpen(*args):
  return _AIOUSB.AIOUSB_EnsureOpen(*args)
AIOUSB_EnsureOpen = _AIOUSB.AIOUSB_EnsureOpen

def AIOUSB_IsInit():
  return _AIOUSB.AIOUSB_IsInit()
AIOUSB_IsInit = _AIOUSB.AIOUSB_IsInit

def AIOUSB_Exit():
  return _AIOUSB.AIOUSB_Exit()
AIOUSB_Exit = _AIOUSB.AIOUSB_Exit

def AIOUSB_Reset(*args):
  return _AIOUSB.AIOUSB_Reset(*args)
AIOUSB_Reset = _AIOUSB.AIOUSB_Reset

def AIODeviceTableInit():
  return _AIOUSB.AIODeviceTableInit()
AIODeviceTableInit = _AIOUSB.AIODeviceTableInit

def CloseAllDevices():
  return _AIOUSB.CloseAllDevices()
CloseAllDevices = _AIOUSB.CloseAllDevices

def AIOUSB_GetAllDevices():
  return _AIOUSB.AIOUSB_GetAllDevices()
AIOUSB_GetAllDevices = _AIOUSB.AIOUSB_GetAllDevices

def ADC_GetScanV(*args):
  return _AIOUSB.ADC_GetScanV(*args)
ADC_GetScanV = _AIOUSB.ADC_GetScanV

def ADC_SetAllGainCodeAndDiffMode(*args):
  return _AIOUSB.ADC_SetAllGainCodeAndDiffMode(*args)
ADC_SetAllGainCodeAndDiffMode = _AIOUSB.ADC_SetAllGainCodeAndDiffMode

def ADC_GetChannelV(*args):
  return _AIOUSB.ADC_GetChannelV(*args)
ADC_GetChannelV = _AIOUSB.ADC_GetChannelV

def ADC_GetScan(*args):
  return _AIOUSB.ADC_GetScan(*args)
ADC_GetScan = _AIOUSB.ADC_GetScan

def ADC_GetConfig(*args):
  return _AIOUSB.ADC_GetConfig(*args)
ADC_GetConfig = _AIOUSB.ADC_GetConfig

def ADC_SetConfig(*args):
  return _AIOUSB.ADC_SetConfig(*args)
ADC_SetConfig = _AIOUSB.ADC_SetConfig

def ADC_RangeAll(*args):
  return _AIOUSB.ADC_RangeAll(*args)
ADC_RangeAll = _AIOUSB.ADC_RangeAll

def ADC_Range1(*args):
  return _AIOUSB.ADC_Range1(*args)
ADC_Range1 = _AIOUSB.ADC_Range1

def ADC_ADMode(*args):
  return _AIOUSB.ADC_ADMode(*args)
ADC_ADMode = _AIOUSB.ADC_ADMode

def ADC_SetScanLimits(*args):
  return _AIOUSB.ADC_SetScanLimits(*args)
ADC_SetScanLimits = _AIOUSB.ADC_SetScanLimits

def ADC_SetCal(*args):
  return _AIOUSB.ADC_SetCal(*args)
ADC_SetCal = _AIOUSB.ADC_SetCal

def ADC_QueryCal(*args):
  return _AIOUSB.ADC_QueryCal(*args)
ADC_QueryCal = _AIOUSB.ADC_QueryCal

def ADC_Initialize(*args):
  return _AIOUSB.ADC_Initialize(*args)
ADC_Initialize = _AIOUSB.ADC_Initialize

def ADC_BulkAcquire(*args):
  return _AIOUSB.ADC_BulkAcquire(*args)
ADC_BulkAcquire = _AIOUSB.ADC_BulkAcquire

def ADC_BulkPoll(*args):
  return _AIOUSB.ADC_BulkPoll(*args)
ADC_BulkPoll = _AIOUSB.ADC_BulkPoll

def ADC_InitFastITScanV(*args):
  return _AIOUSB.ADC_InitFastITScanV(*args)
ADC_InitFastITScanV = _AIOUSB.ADC_InitFastITScanV

def ADC_CreateFastITConfig(*args):
  return _AIOUSB.ADC_CreateFastITConfig(*args)
ADC_CreateFastITConfig = _AIOUSB.ADC_CreateFastITConfig

def ADC_ResetFastITScanV(*args):
  return _AIOUSB.ADC_ResetFastITScanV(*args)
ADC_ResetFastITScanV = _AIOUSB.ADC_ResetFastITScanV

def ADC_SetFastITScanVChannels(*args):
  return _AIOUSB.ADC_SetFastITScanVChannels(*args)
ADC_SetFastITScanVChannels = _AIOUSB.ADC_SetFastITScanVChannels

def ADC_GetFastITScanV(*args):
  return _AIOUSB.ADC_GetFastITScanV(*args)
ADC_GetFastITScanV = _AIOUSB.ADC_GetFastITScanV

def ADC_GetITScanV(*args):
  return _AIOUSB.ADC_GetITScanV(*args)
ADC_GetITScanV = _AIOUSB.ADC_GetITScanV

def ADC_GetOversample(*args):
  return _AIOUSB.ADC_GetOversample(*args)
ADC_GetOversample = _AIOUSB.ADC_GetOversample

def ADC_SetOversample(*args):
  return _AIOUSB.ADC_SetOversample(*args)
ADC_SetOversample = _AIOUSB.ADC_SetOversample

def WriteConfigBlock(*args):
  return _AIOUSB.WriteConfigBlock(*args)
WriteConfigBlock = _AIOUSB.WriteConfigBlock

def ReadConfigBlock(*args):
  return _AIOUSB.ReadConfigBlock(*args)
ReadConfigBlock = _AIOUSB.ReadConfigBlock

def AIOUSB_SetAllGainCodeAndDiffMode(*args):
  return _AIOUSB.AIOUSB_SetAllGainCodeAndDiffMode(*args)
AIOUSB_SetAllGainCodeAndDiffMode = _AIOUSB.AIOUSB_SetAllGainCodeAndDiffMode

def AIOUSB_GetGainCode(*args):
  return _AIOUSB.AIOUSB_GetGainCode(*args)
AIOUSB_GetGainCode = _AIOUSB.AIOUSB_GetGainCode

def AIOUSB_SetGainCode(*args):
  return _AIOUSB.AIOUSB_SetGainCode(*args)
AIOUSB_SetGainCode = _AIOUSB.AIOUSB_SetGainCode

def AIOUSB_IsDifferentialMode(*args):
  return _AIOUSB.AIOUSB_IsDifferentialMode(*args)
AIOUSB_IsDifferentialMode = _AIOUSB.AIOUSB_IsDifferentialMode

def AIOUSB_SetDifferentialMode(*args):
  return _AIOUSB.AIOUSB_SetDifferentialMode(*args)
AIOUSB_SetDifferentialMode = _AIOUSB.AIOUSB_SetDifferentialMode

def AIOUSB_GetCalMode(*args):
  return _AIOUSB.AIOUSB_GetCalMode(*args)
AIOUSB_GetCalMode = _AIOUSB.AIOUSB_GetCalMode

def AIOUSB_SetCalMode(*args):
  return _AIOUSB.AIOUSB_SetCalMode(*args)
AIOUSB_SetCalMode = _AIOUSB.AIOUSB_SetCalMode

def AIOUSB_ADC_ExternalCal(*args):
  return _AIOUSB.AIOUSB_ADC_ExternalCal(*args)
AIOUSB_ADC_ExternalCal = _AIOUSB.AIOUSB_ADC_ExternalCal

def AIOUSB_GetTriggerMode(*args):
  return _AIOUSB.AIOUSB_GetTriggerMode(*args)
AIOUSB_GetTriggerMode = _AIOUSB.AIOUSB_GetTriggerMode

def AIOUSB_SetTriggerMode(*args):
  return _AIOUSB.AIOUSB_SetTriggerMode(*args)
AIOUSB_SetTriggerMode = _AIOUSB.AIOUSB_SetTriggerMode

def AIOUSB_GetStartChannel(*args):
  return _AIOUSB.AIOUSB_GetStartChannel(*args)
AIOUSB_GetStartChannel = _AIOUSB.AIOUSB_GetStartChannel

def AIOUSB_GetEndChannel(*args):
  return _AIOUSB.AIOUSB_GetEndChannel(*args)
AIOUSB_GetEndChannel = _AIOUSB.AIOUSB_GetEndChannel

def AIOUSB_SetScanRange(*args):
  return _AIOUSB.AIOUSB_SetScanRange(*args)
AIOUSB_SetScanRange = _AIOUSB.AIOUSB_SetScanRange

def NewBuffer(*args):
  return _AIOUSB.NewBuffer(*args)
NewBuffer = _AIOUSB.NewBuffer

def DeleteBuffer(*args):
  return _AIOUSB.DeleteBuffer(*args)
DeleteBuffer = _AIOUSB.DeleteBuffer

def CreateSmartBuffer(*args):
  return _AIOUSB.CreateSmartBuffer(*args)
CreateSmartBuffer = _AIOUSB.CreateSmartBuffer

def DACDirect(*args):
  return _AIOUSB.DACDirect(*args)
DACDirect = _AIOUSB.DACDirect

def DACMultiDirect(*args):
  return _AIOUSB.DACMultiDirect(*args)
DACMultiDirect = _AIOUSB.DACMultiDirect

def DACSetBoardRange(*args):
  return _AIOUSB.DACSetBoardRange(*args)
DACSetBoardRange = _AIOUSB.DACSetBoardRange

def DACOutputOpen(*args):
  return _AIOUSB.DACOutputOpen(*args)
DACOutputOpen = _AIOUSB.DACOutputOpen

def DACOutputClose(*args):
  return _AIOUSB.DACOutputClose(*args)
DACOutputClose = _AIOUSB.DACOutputClose

def DACOutputCloseNoEnd(*args):
  return _AIOUSB.DACOutputCloseNoEnd(*args)
DACOutputCloseNoEnd = _AIOUSB.DACOutputCloseNoEnd

def DACOutputSetCount(*args):
  return _AIOUSB.DACOutputSetCount(*args)
DACOutputSetCount = _AIOUSB.DACOutputSetCount

def DACOutputFrame(*args):
  return _AIOUSB.DACOutputFrame(*args)
DACOutputFrame = _AIOUSB.DACOutputFrame

def DACOutputFrameRaw(*args):
  return _AIOUSB.DACOutputFrameRaw(*args)
DACOutputFrameRaw = _AIOUSB.DACOutputFrameRaw

def DACOutputStart(*args):
  return _AIOUSB.DACOutputStart(*args)
DACOutputStart = _AIOUSB.DACOutputStart

def DACOutputSetInterlock(*args):
  return _AIOUSB.DACOutputSetInterlock(*args)
DACOutputSetInterlock = _AIOUSB.DACOutputSetInterlock
class AIOUSBDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AIOUSBDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AIOUSBDevice, name)
    __repr__ = _swig_repr
    __swig_setmethods__["usb_device"] = _AIOUSB.AIOUSBDevice_usb_device_set
    __swig_getmethods__["usb_device"] = _AIOUSB.AIOUSBDevice_usb_device_get
    if _newclass:usb_device = _swig_property(_AIOUSB.AIOUSBDevice_usb_device_get, _AIOUSB.AIOUSBDevice_usb_device_set)
    __swig_setmethods__["bOpen"] = _AIOUSB.AIOUSBDevice_bOpen_set
    __swig_getmethods__["bOpen"] = _AIOUSB.AIOUSBDevice_bOpen_get
    if _newclass:bOpen = _swig_property(_AIOUSB.AIOUSBDevice_bOpen_get, _AIOUSB.AIOUSBDevice_bOpen_set)
    __swig_setmethods__["deviceIndex"] = _AIOUSB.AIOUSBDevice_deviceIndex_set
    __swig_getmethods__["deviceIndex"] = _AIOUSB.AIOUSBDevice_deviceIndex_get
    if _newclass:deviceIndex = _swig_property(_AIOUSB.AIOUSBDevice_deviceIndex_get, _AIOUSB.AIOUSBDevice_deviceIndex_set)
    __swig_setmethods__["isInit"] = _AIOUSB.AIOUSBDevice_isInit_set
    __swig_getmethods__["isInit"] = _AIOUSB.AIOUSBDevice_isInit_get
    if _newclass:isInit = _swig_property(_AIOUSB.AIOUSBDevice_isInit_get, _AIOUSB.AIOUSBDevice_isInit_set)
    __swig_setmethods__["PID"] = _AIOUSB.AIOUSBDevice_PID_set
    __swig_getmethods__["PID"] = _AIOUSB.AIOUSBDevice_PID_get
    if _newclass:PID = _swig_property(_AIOUSB.AIOUSBDevice_PID_get, _AIOUSB.AIOUSBDevice_PID_set)
    __swig_setmethods__["DIOConfigBits"] = _AIOUSB.AIOUSBDevice_DIOConfigBits_set
    __swig_getmethods__["DIOConfigBits"] = _AIOUSB.AIOUSBDevice_DIOConfigBits_get
    if _newclass:DIOConfigBits = _swig_property(_AIOUSB.AIOUSBDevice_DIOConfigBits_get, _AIOUSB.AIOUSBDevice_DIOConfigBits_set)
    __swig_setmethods__["discardFirstSample"] = _AIOUSB.AIOUSBDevice_discardFirstSample_set
    __swig_getmethods__["discardFirstSample"] = _AIOUSB.AIOUSBDevice_discardFirstSample_get
    if _newclass:discardFirstSample = _swig_property(_AIOUSB.AIOUSBDevice_discardFirstSample_get, _AIOUSB.AIOUSBDevice_discardFirstSample_set)
    __swig_setmethods__["commTimeout"] = _AIOUSB.AIOUSBDevice_commTimeout_set
    __swig_getmethods__["commTimeout"] = _AIOUSB.AIOUSBDevice_commTimeout_get
    if _newclass:commTimeout = _swig_property(_AIOUSB.AIOUSBDevice_commTimeout_get, _AIOUSB.AIOUSBDevice_commTimeout_set)
    __swig_setmethods__["miscClockHz"] = _AIOUSB.AIOUSBDevice_miscClockHz_set
    __swig_getmethods__["miscClockHz"] = _AIOUSB.AIOUSBDevice_miscClockHz_get
    if _newclass:miscClockHz = _swig_property(_AIOUSB.AIOUSBDevice_miscClockHz_get, _AIOUSB.AIOUSBDevice_miscClockHz_set)
    __swig_setmethods__["ProductID"] = _AIOUSB.AIOUSBDevice_ProductID_set
    __swig_getmethods__["ProductID"] = _AIOUSB.AIOUSBDevice_ProductID_get
    if _newclass:ProductID = _swig_property(_AIOUSB.AIOUSBDevice_ProductID_get, _AIOUSB.AIOUSBDevice_ProductID_set)
    __swig_setmethods__["DIOBytes"] = _AIOUSB.AIOUSBDevice_DIOBytes_set
    __swig_getmethods__["DIOBytes"] = _AIOUSB.AIOUSBDevice_DIOBytes_get
    if _newclass:DIOBytes = _swig_property(_AIOUSB.AIOUSBDevice_DIOBytes_get, _AIOUSB.AIOUSBDevice_DIOBytes_set)
    __swig_setmethods__["Counters"] = _AIOUSB.AIOUSBDevice_Counters_set
    __swig_getmethods__["Counters"] = _AIOUSB.AIOUSBDevice_Counters_get
    if _newclass:Counters = _swig_property(_AIOUSB.AIOUSBDevice_Counters_get, _AIOUSB.AIOUSBDevice_Counters_set)
    __swig_setmethods__["Tristates"] = _AIOUSB.AIOUSBDevice_Tristates_set
    __swig_getmethods__["Tristates"] = _AIOUSB.AIOUSBDevice_Tristates_get
    if _newclass:Tristates = _swig_property(_AIOUSB.AIOUSBDevice_Tristates_get, _AIOUSB.AIOUSBDevice_Tristates_set)
    __swig_setmethods__["bGateSelectable"] = _AIOUSB.AIOUSBDevice_bGateSelectable_set
    __swig_getmethods__["bGateSelectable"] = _AIOUSB.AIOUSBDevice_bGateSelectable_get
    if _newclass:bGateSelectable = _swig_property(_AIOUSB.AIOUSBDevice_bGateSelectable_get, _AIOUSB.AIOUSBDevice_bGateSelectable_set)
    __swig_setmethods__["RootClock"] = _AIOUSB.AIOUSBDevice_RootClock_set
    __swig_getmethods__["RootClock"] = _AIOUSB.AIOUSBDevice_RootClock_get
    if _newclass:RootClock = _swig_property(_AIOUSB.AIOUSBDevice_RootClock_get, _AIOUSB.AIOUSBDevice_RootClock_set)
    __swig_setmethods__["bGetName"] = _AIOUSB.AIOUSBDevice_bGetName_set
    __swig_getmethods__["bGetName"] = _AIOUSB.AIOUSBDevice_bGetName_get
    if _newclass:bGetName = _swig_property(_AIOUSB.AIOUSBDevice_bGetName_get, _AIOUSB.AIOUSBDevice_bGetName_set)
    __swig_setmethods__["ConfigBytes"] = _AIOUSB.AIOUSBDevice_ConfigBytes_set
    __swig_getmethods__["ConfigBytes"] = _AIOUSB.AIOUSBDevice_ConfigBytes_get
    if _newclass:ConfigBytes = _swig_property(_AIOUSB.AIOUSBDevice_ConfigBytes_get, _AIOUSB.AIOUSBDevice_ConfigBytes_set)
    __swig_setmethods__["ImmDACs"] = _AIOUSB.AIOUSBDevice_ImmDACs_set
    __swig_getmethods__["ImmDACs"] = _AIOUSB.AIOUSBDevice_ImmDACs_get
    if _newclass:ImmDACs = _swig_property(_AIOUSB.AIOUSBDevice_ImmDACs_get, _AIOUSB.AIOUSBDevice_ImmDACs_set)
    __swig_setmethods__["bDACStream"] = _AIOUSB.AIOUSBDevice_bDACStream_set
    __swig_getmethods__["bDACStream"] = _AIOUSB.AIOUSBDevice_bDACStream_get
    if _newclass:bDACStream = _swig_property(_AIOUSB.AIOUSBDevice_bDACStream_get, _AIOUSB.AIOUSBDevice_bDACStream_set)
    __swig_setmethods__["DACsUsed"] = _AIOUSB.AIOUSBDevice_DACsUsed_set
    __swig_getmethods__["DACsUsed"] = _AIOUSB.AIOUSBDevice_DACsUsed_get
    if _newclass:DACsUsed = _swig_property(_AIOUSB.AIOUSBDevice_DACsUsed_get, _AIOUSB.AIOUSBDevice_DACsUsed_set)
    __swig_setmethods__["bADCStream"] = _AIOUSB.AIOUSBDevice_bADCStream_set
    __swig_getmethods__["bADCStream"] = _AIOUSB.AIOUSBDevice_bADCStream_get
    if _newclass:bADCStream = _swig_property(_AIOUSB.AIOUSBDevice_bADCStream_get, _AIOUSB.AIOUSBDevice_bADCStream_set)
    __swig_setmethods__["ADCChannels"] = _AIOUSB.AIOUSBDevice_ADCChannels_set
    __swig_getmethods__["ADCChannels"] = _AIOUSB.AIOUSBDevice_ADCChannels_get
    if _newclass:ADCChannels = _swig_property(_AIOUSB.AIOUSBDevice_ADCChannels_get, _AIOUSB.AIOUSBDevice_ADCChannels_set)
    __swig_setmethods__["ADCMUXChannels"] = _AIOUSB.AIOUSBDevice_ADCMUXChannels_set
    __swig_getmethods__["ADCMUXChannels"] = _AIOUSB.AIOUSBDevice_ADCMUXChannels_get
    if _newclass:ADCMUXChannels = _swig_property(_AIOUSB.AIOUSBDevice_ADCMUXChannels_get, _AIOUSB.AIOUSBDevice_ADCMUXChannels_set)
    __swig_setmethods__["RangeShift"] = _AIOUSB.AIOUSBDevice_RangeShift_set
    __swig_getmethods__["RangeShift"] = _AIOUSB.AIOUSBDevice_RangeShift_get
    if _newclass:RangeShift = _swig_property(_AIOUSB.AIOUSBDevice_RangeShift_get, _AIOUSB.AIOUSBDevice_RangeShift_set)
    __swig_setmethods__["ADCChannelsPerGroup"] = _AIOUSB.AIOUSBDevice_ADCChannelsPerGroup_set
    __swig_getmethods__["ADCChannelsPerGroup"] = _AIOUSB.AIOUSBDevice_ADCChannelsPerGroup_get
    if _newclass:ADCChannelsPerGroup = _swig_property(_AIOUSB.AIOUSBDevice_ADCChannelsPerGroup_get, _AIOUSB.AIOUSBDevice_ADCChannelsPerGroup_set)
    __swig_setmethods__["bDIOStream"] = _AIOUSB.AIOUSBDevice_bDIOStream_set
    __swig_getmethods__["bDIOStream"] = _AIOUSB.AIOUSBDevice_bDIOStream_get
    if _newclass:bDIOStream = _swig_property(_AIOUSB.AIOUSBDevice_bDIOStream_get, _AIOUSB.AIOUSBDevice_bDIOStream_set)
    __swig_setmethods__["StreamingBlockSize"] = _AIOUSB.AIOUSBDevice_StreamingBlockSize_set
    __swig_getmethods__["StreamingBlockSize"] = _AIOUSB.AIOUSBDevice_StreamingBlockSize_get
    if _newclass:StreamingBlockSize = _swig_property(_AIOUSB.AIOUSBDevice_StreamingBlockSize_get, _AIOUSB.AIOUSBDevice_StreamingBlockSize_set)
    __swig_setmethods__["bDIODebounce"] = _AIOUSB.AIOUSBDevice_bDIODebounce_set
    __swig_getmethods__["bDIODebounce"] = _AIOUSB.AIOUSBDevice_bDIODebounce_get
    if _newclass:bDIODebounce = _swig_property(_AIOUSB.AIOUSBDevice_bDIODebounce_get, _AIOUSB.AIOUSBDevice_bDIODebounce_set)
    __swig_setmethods__["bDIOSPI"] = _AIOUSB.AIOUSBDevice_bDIOSPI_set
    __swig_getmethods__["bDIOSPI"] = _AIOUSB.AIOUSBDevice_bDIOSPI_get
    if _newclass:bDIOSPI = _swig_property(_AIOUSB.AIOUSBDevice_bDIOSPI_get, _AIOUSB.AIOUSBDevice_bDIOSPI_set)
    __swig_setmethods__["bSetCustomClocks"] = _AIOUSB.AIOUSBDevice_bSetCustomClocks_set
    __swig_getmethods__["bSetCustomClocks"] = _AIOUSB.AIOUSBDevice_bSetCustomClocks_get
    if _newclass:bSetCustomClocks = _swig_property(_AIOUSB.AIOUSBDevice_bSetCustomClocks_get, _AIOUSB.AIOUSBDevice_bSetCustomClocks_set)
    __swig_setmethods__["WDGBytes"] = _AIOUSB.AIOUSBDevice_WDGBytes_set
    __swig_getmethods__["WDGBytes"] = _AIOUSB.AIOUSBDevice_WDGBytes_get
    if _newclass:WDGBytes = _swig_property(_AIOUSB.AIOUSBDevice_WDGBytes_get, _AIOUSB.AIOUSBDevice_WDGBytes_set)
    __swig_setmethods__["bClearFIFO"] = _AIOUSB.AIOUSBDevice_bClearFIFO_set
    __swig_getmethods__["bClearFIFO"] = _AIOUSB.AIOUSBDevice_bClearFIFO_get
    if _newclass:bClearFIFO = _swig_property(_AIOUSB.AIOUSBDevice_bClearFIFO_get, _AIOUSB.AIOUSBDevice_bClearFIFO_set)
    __swig_setmethods__["ImmADCs"] = _AIOUSB.AIOUSBDevice_ImmADCs_set
    __swig_getmethods__["ImmADCs"] = _AIOUSB.AIOUSBDevice_ImmADCs_get
    if _newclass:ImmADCs = _swig_property(_AIOUSB.AIOUSBDevice_ImmADCs_get, _AIOUSB.AIOUSBDevice_ImmADCs_set)
    __swig_setmethods__["bDACBoardRange"] = _AIOUSB.AIOUSBDevice_bDACBoardRange_set
    __swig_getmethods__["bDACBoardRange"] = _AIOUSB.AIOUSBDevice_bDACBoardRange_get
    if _newclass:bDACBoardRange = _swig_property(_AIOUSB.AIOUSBDevice_bDACBoardRange_get, _AIOUSB.AIOUSBDevice_bDACBoardRange_set)
    __swig_setmethods__["bDACChannelCal"] = _AIOUSB.AIOUSBDevice_bDACChannelCal_set
    __swig_getmethods__["bDACChannelCal"] = _AIOUSB.AIOUSBDevice_bDACChannelCal_get
    if _newclass:bDACChannelCal = _swig_property(_AIOUSB.AIOUSBDevice_bDACChannelCal_get, _AIOUSB.AIOUSBDevice_bDACChannelCal_set)
    __swig_setmethods__["FlashSectors"] = _AIOUSB.AIOUSBDevice_FlashSectors_set
    __swig_getmethods__["FlashSectors"] = _AIOUSB.AIOUSBDevice_FlashSectors_get
    if _newclass:FlashSectors = _swig_property(_AIOUSB.AIOUSBDevice_FlashSectors_get, _AIOUSB.AIOUSBDevice_FlashSectors_set)
    __swig_setmethods__["bDACOpen"] = _AIOUSB.AIOUSBDevice_bDACOpen_set
    __swig_getmethods__["bDACOpen"] = _AIOUSB.AIOUSBDevice_bDACOpen_get
    if _newclass:bDACOpen = _swig_property(_AIOUSB.AIOUSBDevice_bDACOpen_get, _AIOUSB.AIOUSBDevice_bDACOpen_set)
    __swig_setmethods__["bDACClosing"] = _AIOUSB.AIOUSBDevice_bDACClosing_set
    __swig_getmethods__["bDACClosing"] = _AIOUSB.AIOUSBDevice_bDACClosing_get
    if _newclass:bDACClosing = _swig_property(_AIOUSB.AIOUSBDevice_bDACClosing_get, _AIOUSB.AIOUSBDevice_bDACClosing_set)
    __swig_setmethods__["bDACAborting"] = _AIOUSB.AIOUSBDevice_bDACAborting_set
    __swig_getmethods__["bDACAborting"] = _AIOUSB.AIOUSBDevice_bDACAborting_get
    if _newclass:bDACAborting = _swig_property(_AIOUSB.AIOUSBDevice_bDACAborting_get, _AIOUSB.AIOUSBDevice_bDACAborting_set)
    __swig_setmethods__["bDACStarted"] = _AIOUSB.AIOUSBDevice_bDACStarted_set
    __swig_getmethods__["bDACStarted"] = _AIOUSB.AIOUSBDevice_bDACStarted_get
    if _newclass:bDACStarted = _swig_property(_AIOUSB.AIOUSBDevice_bDACStarted_get, _AIOUSB.AIOUSBDevice_bDACStarted_set)
    __swig_setmethods__["DACData"] = _AIOUSB.AIOUSBDevice_DACData_set
    __swig_getmethods__["DACData"] = _AIOUSB.AIOUSBDevice_DACData_get
    if _newclass:DACData = _swig_property(_AIOUSB.AIOUSBDevice_DACData_get, _AIOUSB.AIOUSBDevice_DACData_set)
    __swig_setmethods__["PendingDACData"] = _AIOUSB.AIOUSBDevice_PendingDACData_set
    __swig_getmethods__["PendingDACData"] = _AIOUSB.AIOUSBDevice_PendingDACData_get
    if _newclass:PendingDACData = _swig_property(_AIOUSB.AIOUSBDevice_PendingDACData_get, _AIOUSB.AIOUSBDevice_PendingDACData_set)
    __swig_setmethods__["hDACDataMutex"] = _AIOUSB.AIOUSBDevice_hDACDataMutex_set
    __swig_getmethods__["hDACDataMutex"] = _AIOUSB.AIOUSBDevice_hDACDataMutex_get
    if _newclass:hDACDataMutex = _swig_property(_AIOUSB.AIOUSBDevice_hDACDataMutex_get, _AIOUSB.AIOUSBDevice_hDACDataMutex_set)
    __swig_setmethods__["hDACDataSem"] = _AIOUSB.AIOUSBDevice_hDACDataSem_set
    __swig_getmethods__["hDACDataSem"] = _AIOUSB.AIOUSBDevice_hDACDataSem_get
    if _newclass:hDACDataSem = _swig_property(_AIOUSB.AIOUSBDevice_hDACDataSem_get, _AIOUSB.AIOUSBDevice_hDACDataSem_set)
    __swig_setmethods__["bDIOOpen"] = _AIOUSB.AIOUSBDevice_bDIOOpen_set
    __swig_getmethods__["bDIOOpen"] = _AIOUSB.AIOUSBDevice_bDIOOpen_get
    if _newclass:bDIOOpen = _swig_property(_AIOUSB.AIOUSBDevice_bDIOOpen_get, _AIOUSB.AIOUSBDevice_bDIOOpen_set)
    __swig_setmethods__["bDIORead"] = _AIOUSB.AIOUSBDevice_bDIORead_set
    __swig_getmethods__["bDIORead"] = _AIOUSB.AIOUSBDevice_bDIORead_get
    if _newclass:bDIORead = _swig_property(_AIOUSB.AIOUSBDevice_bDIORead_get, _AIOUSB.AIOUSBDevice_bDIORead_set)
    __swig_setmethods__["bDeviceWasHere"] = _AIOUSB.AIOUSBDevice_bDeviceWasHere_set
    __swig_getmethods__["bDeviceWasHere"] = _AIOUSB.AIOUSBDevice_bDeviceWasHere_get
    if _newclass:bDeviceWasHere = _swig_property(_AIOUSB.AIOUSBDevice_bDeviceWasHere_get, _AIOUSB.AIOUSBDevice_bDeviceWasHere_set)
    __swig_setmethods__["LastDIOData"] = _AIOUSB.AIOUSBDevice_LastDIOData_set
    __swig_getmethods__["LastDIOData"] = _AIOUSB.AIOUSBDevice_LastDIOData_get
    if _newclass:LastDIOData = _swig_property(_AIOUSB.AIOUSBDevice_LastDIOData_get, _AIOUSB.AIOUSBDevice_LastDIOData_set)
    __swig_setmethods__["cachedName"] = _AIOUSB.AIOUSBDevice_cachedName_set
    __swig_getmethods__["cachedName"] = _AIOUSB.AIOUSBDevice_cachedName_get
    if _newclass:cachedName = _swig_property(_AIOUSB.AIOUSBDevice_cachedName_get, _AIOUSB.AIOUSBDevice_cachedName_set)
    __swig_setmethods__["cachedSerialNumber"] = _AIOUSB.AIOUSBDevice_cachedSerialNumber_set
    __swig_getmethods__["cachedSerialNumber"] = _AIOUSB.AIOUSBDevice_cachedSerialNumber_get
    if _newclass:cachedSerialNumber = _swig_property(_AIOUSB.AIOUSBDevice_cachedSerialNumber_get, _AIOUSB.AIOUSBDevice_cachedSerialNumber_set)
    __swig_setmethods__["cachedConfigBlock"] = _AIOUSB.AIOUSBDevice_cachedConfigBlock_set
    __swig_getmethods__["cachedConfigBlock"] = _AIOUSB.AIOUSBDevice_cachedConfigBlock_get
    if _newclass:cachedConfigBlock = _swig_property(_AIOUSB.AIOUSBDevice_cachedConfigBlock_get, _AIOUSB.AIOUSBDevice_cachedConfigBlock_set)
    __swig_setmethods__["workerBusy"] = _AIOUSB.AIOUSBDevice_workerBusy_set
    __swig_getmethods__["workerBusy"] = _AIOUSB.AIOUSBDevice_workerBusy_get
    if _newclass:workerBusy = _swig_property(_AIOUSB.AIOUSBDevice_workerBusy_get, _AIOUSB.AIOUSBDevice_workerBusy_set)
    __swig_setmethods__["workerStatus"] = _AIOUSB.AIOUSBDevice_workerStatus_set
    __swig_getmethods__["workerStatus"] = _AIOUSB.AIOUSBDevice_workerStatus_get
    if _newclass:workerStatus = _swig_property(_AIOUSB.AIOUSBDevice_workerStatus_get, _AIOUSB.AIOUSBDevice_workerStatus_set)
    __swig_setmethods__["workerResult"] = _AIOUSB.AIOUSBDevice_workerResult_set
    __swig_getmethods__["workerResult"] = _AIOUSB.AIOUSBDevice_workerResult_get
    if _newclass:workerResult = _swig_property(_AIOUSB.AIOUSBDevice_workerResult_get, _AIOUSB.AIOUSBDevice_workerResult_set)
    __swig_setmethods__["FastITConfig"] = _AIOUSB.AIOUSBDevice_FastITConfig_set
    __swig_getmethods__["FastITConfig"] = _AIOUSB.AIOUSBDevice_FastITConfig_get
    if _newclass:FastITConfig = _swig_property(_AIOUSB.AIOUSBDevice_FastITConfig_get, _AIOUSB.AIOUSBDevice_FastITConfig_set)
    __swig_setmethods__["FastITBakConfig"] = _AIOUSB.AIOUSBDevice_FastITBakConfig_set
    __swig_getmethods__["FastITBakConfig"] = _AIOUSB.AIOUSBDevice_FastITBakConfig_get
    if _newclass:FastITBakConfig = _swig_property(_AIOUSB.AIOUSBDevice_FastITBakConfig_get, _AIOUSB.AIOUSBDevice_FastITBakConfig_set)
    __swig_setmethods__["FastITConfig_size"] = _AIOUSB.AIOUSBDevice_FastITConfig_size_set
    __swig_getmethods__["FastITConfig_size"] = _AIOUSB.AIOUSBDevice_FastITConfig_size_get
    if _newclass:FastITConfig_size = _swig_property(_AIOUSB.AIOUSBDevice_FastITConfig_size_get, _AIOUSB.AIOUSBDevice_FastITConfig_size_set)
    __swig_setmethods__["ADBuf"] = _AIOUSB.AIOUSBDevice_ADBuf_set
    __swig_getmethods__["ADBuf"] = _AIOUSB.AIOUSBDevice_ADBuf_get
    if _newclass:ADBuf = _swig_property(_AIOUSB.AIOUSBDevice_ADBuf_get, _AIOUSB.AIOUSBDevice_ADBuf_set)
    __swig_setmethods__["ADBuf_size"] = _AIOUSB.AIOUSBDevice_ADBuf_size_set
    __swig_getmethods__["ADBuf_size"] = _AIOUSB.AIOUSBDevice_ADBuf_size_get
    if _newclass:ADBuf_size = _swig_property(_AIOUSB.AIOUSBDevice_ADBuf_size_get, _AIOUSB.AIOUSBDevice_ADBuf_size_set)
    __swig_setmethods__["testing"] = _AIOUSB.AIOUSBDevice_testing_set
    __swig_getmethods__["testing"] = _AIOUSB.AIOUSBDevice_testing_get
    if _newclass:testing = _swig_property(_AIOUSB.AIOUSBDevice_testing_get, _AIOUSB.AIOUSBDevice_testing_set)
    __swig_setmethods__["valid"] = _AIOUSB.AIOUSBDevice_valid_set
    __swig_getmethods__["valid"] = _AIOUSB.AIOUSBDevice_valid_get
    if _newclass:valid = _swig_property(_AIOUSB.AIOUSBDevice_valid_get, _AIOUSB.AIOUSBDevice_valid_set)
    def __init__(self): 
        this = _AIOUSB.new_AIOUSBDevice()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_AIOUSBDevice
    __del__ = lambda self : None;
AIOUSBDevice_swigregister = _AIOUSB.AIOUSBDevice_swigregister
AIOUSBDevice_swigregister(AIOUSBDevice)


def AIOUSBDeviceToJSON(*args):
  return _AIOUSB.AIOUSBDeviceToJSON(*args)
AIOUSBDeviceToJSON = _AIOUSB.AIOUSBDeviceToJSON

def NewAIOUSBDeviceFromJSON(*args):
  return _AIOUSB.NewAIOUSBDeviceFromJSON(*args)
NewAIOUSBDeviceFromJSON = _AIOUSB.NewAIOUSBDeviceFromJSON

def AIOUSBDeviceInitializeWithProductID(*args):
  return _AIOUSB.AIOUSBDeviceInitializeWithProductID(*args)
AIOUSBDeviceInitializeWithProductID = _AIOUSB.AIOUSBDeviceInitializeWithProductID

def AIOUSBDeviceGetUSBHandle(*args):
  return _AIOUSB.AIOUSBDeviceGetUSBHandle(*args)
AIOUSBDeviceGetUSBHandle = _AIOUSB.AIOUSBDeviceGetUSBHandle

def AIOUSBDeviceGetUSBHandleFromDeviceIndex(*args):
  return _AIOUSB.AIOUSBDeviceGetUSBHandleFromDeviceIndex(*args)
AIOUSBDeviceGetUSBHandleFromDeviceIndex = _AIOUSB.AIOUSBDeviceGetUSBHandleFromDeviceIndex

def AIOUSBDeviceSetUSBHandle(*args):
  return _AIOUSB.AIOUSBDeviceSetUSBHandle(*args)
AIOUSBDeviceSetUSBHandle = _AIOUSB.AIOUSBDeviceSetUSBHandle

def AIOUSBDeviceSetADCConfigBlock(*args):
  return _AIOUSB.AIOUSBDeviceSetADCConfigBlock(*args)
AIOUSBDeviceSetADCConfigBlock = _AIOUSB.AIOUSBDeviceSetADCConfigBlock

def AIOUSBDeviceGetADCConfigBlock(*args):
  return _AIOUSB.AIOUSBDeviceGetADCConfigBlock(*args)
AIOUSBDeviceGetADCConfigBlock = _AIOUSB.AIOUSBDeviceGetADCConfigBlock

def AIOUSBDeviceCopyADCConfigBlock(*args):
  return _AIOUSB.AIOUSBDeviceCopyADCConfigBlock(*args)
AIOUSBDeviceCopyADCConfigBlock = _AIOUSB.AIOUSBDeviceCopyADCConfigBlock

def AIOUSBDeviceSetTesting(*args):
  return _AIOUSB.AIOUSBDeviceSetTesting(*args)
AIOUSBDeviceSetTesting = _AIOUSB.AIOUSBDeviceSetTesting

def AIOUSBDeviceSize():
  return _AIOUSB.AIOUSBDeviceSize()
AIOUSBDeviceSize = _AIOUSB.AIOUSBDeviceSize

def AIOUSBDeviceGetTesting(*args):
  return _AIOUSB.AIOUSBDeviceGetTesting(*args)
AIOUSBDeviceGetTesting = _AIOUSB.AIOUSBDeviceGetTesting

def AIOUSBDeviceGetStreamingBlockSize(*args):
  return _AIOUSB.AIOUSBDeviceGetStreamingBlockSize(*args)
AIOUSBDeviceGetStreamingBlockSize = _AIOUSB.AIOUSBDeviceGetStreamingBlockSize

def AIOUSBDeviceGetDiscardFirstSample(*args):
  return _AIOUSB.AIOUSBDeviceGetDiscardFirstSample(*args)
AIOUSBDeviceGetDiscardFirstSample = _AIOUSB.AIOUSBDeviceGetDiscardFirstSample

def AIOUSBDeviceSetDiscardFirstSample(*args):
  return _AIOUSB.AIOUSBDeviceSetDiscardFirstSample(*args)
AIOUSBDeviceSetDiscardFirstSample = _AIOUSB.AIOUSBDeviceSetDiscardFirstSample

def AIOUSBDeviceSetTimeout(*args):
  return _AIOUSB.AIOUSBDeviceSetTimeout(*args)
AIOUSBDeviceSetTimeout = _AIOUSB.AIOUSBDeviceSetTimeout

def AIOUSBDeviceGetTimeout(*args):
  return _AIOUSB.AIOUSBDeviceGetTimeout(*args)
AIOUSBDeviceGetTimeout = _AIOUSB.AIOUSBDeviceGetTimeout
class AIODeviceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AIODeviceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AIODeviceInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PID"] = _AIOUSB.AIODeviceInfo_PID_set
    __swig_getmethods__["PID"] = _AIOUSB.AIODeviceInfo_PID_get
    if _newclass:PID = _swig_property(_AIOUSB.AIODeviceInfo_PID_get, _AIOUSB.AIODeviceInfo_PID_set)
    __swig_setmethods__["NameSize"] = _AIOUSB.AIODeviceInfo_NameSize_set
    __swig_getmethods__["NameSize"] = _AIOUSB.AIODeviceInfo_NameSize_get
    if _newclass:NameSize = _swig_property(_AIOUSB.AIODeviceInfo_NameSize_get, _AIOUSB.AIODeviceInfo_NameSize_set)
    __swig_setmethods__["Name"] = _AIOUSB.AIODeviceInfo_Name_set
    __swig_getmethods__["Name"] = _AIOUSB.AIODeviceInfo_Name_get
    if _newclass:Name = _swig_property(_AIOUSB.AIODeviceInfo_Name_get, _AIOUSB.AIODeviceInfo_Name_set)
    __swig_setmethods__["DIOBytes"] = _AIOUSB.AIODeviceInfo_DIOBytes_set
    __swig_getmethods__["DIOBytes"] = _AIOUSB.AIODeviceInfo_DIOBytes_get
    if _newclass:DIOBytes = _swig_property(_AIOUSB.AIODeviceInfo_DIOBytes_get, _AIOUSB.AIODeviceInfo_DIOBytes_set)
    __swig_setmethods__["Counters"] = _AIOUSB.AIODeviceInfo_Counters_set
    __swig_getmethods__["Counters"] = _AIOUSB.AIODeviceInfo_Counters_get
    if _newclass:Counters = _swig_property(_AIOUSB.AIODeviceInfo_Counters_get, _AIOUSB.AIODeviceInfo_Counters_set)
    def __init__(self): 
        this = _AIOUSB.new_AIODeviceInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_AIODeviceInfo
    __del__ = lambda self : None;
AIODeviceInfo_swigregister = _AIOUSB.AIODeviceInfo_swigregister
AIODeviceInfo_swigregister(AIODeviceInfo)


def NewAIODeviceInfo():
  return _AIOUSB.NewAIODeviceInfo()
NewAIODeviceInfo = _AIOUSB.NewAIODeviceInfo

def DeleteAIODeviceInfo(*args):
  return _AIOUSB.DeleteAIODeviceInfo(*args)
DeleteAIODeviceInfo = _AIOUSB.DeleteAIODeviceInfo

def AIODeviceInfoGetName(*args):
  return _AIOUSB.AIODeviceInfoGetName(*args)
AIODeviceInfoGetName = _AIOUSB.AIODeviceInfoGetName

def AIODeviceInfoGetCounters(*args):
  return _AIOUSB.AIODeviceInfoGetCounters(*args)
AIODeviceInfoGetCounters = _AIOUSB.AIODeviceInfoGetCounters

def AIODeviceInfoGetDIOBytes(*args):
  return _AIOUSB.AIODeviceInfoGetDIOBytes(*args)
AIODeviceInfoGetDIOBytes = _AIOUSB.AIODeviceInfoGetDIOBytes

def AIODeviceInfoGet(*args):
  return _AIOUSB.AIODeviceInfoGet(*args)
AIODeviceInfoGet = _AIOUSB.AIODeviceInfoGet

def DIO_Configure(*args):
  return _AIOUSB.DIO_Configure(*args)
DIO_Configure = _AIOUSB.DIO_Configure

def DIO_ConfigureRaw(*args):
  return _AIOUSB.DIO_ConfigureRaw(*args)
DIO_ConfigureRaw = _AIOUSB.DIO_ConfigureRaw

def DIO_ConfigureEx(*args):
  return _AIOUSB.DIO_ConfigureEx(*args)
DIO_ConfigureEx = _AIOUSB.DIO_ConfigureEx

def DIO_ConfigurationQuery(*args):
  return _AIOUSB.DIO_ConfigurationQuery(*args)
DIO_ConfigurationQuery = _AIOUSB.DIO_ConfigurationQuery

def DIO_WriteAll(*args):
  return _AIOUSB.DIO_WriteAll(*args)
DIO_WriteAll = _AIOUSB.DIO_WriteAll

def DIO_Write8(*args):
  return _AIOUSB.DIO_Write8(*args)
DIO_Write8 = _AIOUSB.DIO_Write8

def DIO_Write1(*args):
  return _AIOUSB.DIO_Write1(*args)
DIO_Write1 = _AIOUSB.DIO_Write1

def DIO_ReadAll(*args):
  return _AIOUSB.DIO_ReadAll(*args)
DIO_ReadAll = _AIOUSB.DIO_ReadAll

def DIO_ReadAllToCharStr(*args):
  return _AIOUSB.DIO_ReadAllToCharStr(*args)
DIO_ReadAllToCharStr = _AIOUSB.DIO_ReadAllToCharStr

def DIO_Read8(*args):
  return _AIOUSB.DIO_Read8(*args)
DIO_Read8 = _AIOUSB.DIO_Read8

def DIO_Read1(*args):
  return _AIOUSB.DIO_Read1(*args)
DIO_Read1 = _AIOUSB.DIO_Read1

def DIO_StreamOpen(*args):
  return _AIOUSB.DIO_StreamOpen(*args)
DIO_StreamOpen = _AIOUSB.DIO_StreamOpen

def DIO_StreamClose(*args):
  return _AIOUSB.DIO_StreamClose(*args)
DIO_StreamClose = _AIOUSB.DIO_StreamClose

def DIO_StreamSetClocks(*args):
  return _AIOUSB.DIO_StreamSetClocks(*args)
DIO_StreamSetClocks = _AIOUSB.DIO_StreamSetClocks

def DIO_StreamFrame(*args):
  return _AIOUSB.DIO_StreamFrame(*args)
DIO_StreamFrame = _AIOUSB.DIO_StreamFrame
cJSON_False = _AIOUSB.cJSON_False
cJSON_True = _AIOUSB.cJSON_True
cJSON_NULL = _AIOUSB.cJSON_NULL
cJSON_Number = _AIOUSB.cJSON_Number
cJSON_String = _AIOUSB.cJSON_String
cJSON_Array = _AIOUSB.cJSON_Array
cJSON_Object = _AIOUSB.cJSON_Object
cJSON_IsReference = _AIOUSB.cJSON_IsReference
class cJSON(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cJSON, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cJSON, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _AIOUSB.cJSON_next_set
    __swig_getmethods__["next"] = _AIOUSB.cJSON_next_get
    if _newclass:next = _swig_property(_AIOUSB.cJSON_next_get, _AIOUSB.cJSON_next_set)
    __swig_setmethods__["prev"] = _AIOUSB.cJSON_prev_set
    __swig_getmethods__["prev"] = _AIOUSB.cJSON_prev_get
    if _newclass:prev = _swig_property(_AIOUSB.cJSON_prev_get, _AIOUSB.cJSON_prev_set)
    __swig_setmethods__["child"] = _AIOUSB.cJSON_child_set
    __swig_getmethods__["child"] = _AIOUSB.cJSON_child_get
    if _newclass:child = _swig_property(_AIOUSB.cJSON_child_get, _AIOUSB.cJSON_child_set)
    __swig_setmethods__["type"] = _AIOUSB.cJSON_type_set
    __swig_getmethods__["type"] = _AIOUSB.cJSON_type_get
    if _newclass:type = _swig_property(_AIOUSB.cJSON_type_get, _AIOUSB.cJSON_type_set)
    __swig_setmethods__["valuestring"] = _AIOUSB.cJSON_valuestring_set
    __swig_getmethods__["valuestring"] = _AIOUSB.cJSON_valuestring_get
    if _newclass:valuestring = _swig_property(_AIOUSB.cJSON_valuestring_get, _AIOUSB.cJSON_valuestring_set)
    __swig_setmethods__["valueint"] = _AIOUSB.cJSON_valueint_set
    __swig_getmethods__["valueint"] = _AIOUSB.cJSON_valueint_get
    if _newclass:valueint = _swig_property(_AIOUSB.cJSON_valueint_get, _AIOUSB.cJSON_valueint_set)
    __swig_setmethods__["valuedouble"] = _AIOUSB.cJSON_valuedouble_set
    __swig_getmethods__["valuedouble"] = _AIOUSB.cJSON_valuedouble_get
    if _newclass:valuedouble = _swig_property(_AIOUSB.cJSON_valuedouble_get, _AIOUSB.cJSON_valuedouble_set)
    __swig_setmethods__["string"] = _AIOUSB.cJSON_string_set
    __swig_getmethods__["string"] = _AIOUSB.cJSON_string_get
    if _newclass:string = _swig_property(_AIOUSB.cJSON_string_get, _AIOUSB.cJSON_string_set)
    def __init__(self): 
        this = _AIOUSB.new_cJSON()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_cJSON
    __del__ = lambda self : None;
cJSON_swigregister = _AIOUSB.cJSON_swigregister
cJSON_swigregister(cJSON)

class cJSON_Hooks(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cJSON_Hooks, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cJSON_Hooks, name)
    __repr__ = _swig_repr
    __swig_setmethods__["malloc_fn"] = _AIOUSB.cJSON_Hooks_malloc_fn_set
    __swig_getmethods__["malloc_fn"] = _AIOUSB.cJSON_Hooks_malloc_fn_get
    if _newclass:malloc_fn = _swig_property(_AIOUSB.cJSON_Hooks_malloc_fn_get, _AIOUSB.cJSON_Hooks_malloc_fn_set)
    __swig_setmethods__["free_fn"] = _AIOUSB.cJSON_Hooks_free_fn_set
    __swig_getmethods__["free_fn"] = _AIOUSB.cJSON_Hooks_free_fn_get
    if _newclass:free_fn = _swig_property(_AIOUSB.cJSON_Hooks_free_fn_get, _AIOUSB.cJSON_Hooks_free_fn_set)
    def __init__(self): 
        this = _AIOUSB.new_cJSON_Hooks()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_cJSON_Hooks
    __del__ = lambda self : None;
cJSON_Hooks_swigregister = _AIOUSB.cJSON_Hooks_swigregister
cJSON_Hooks_swigregister(cJSON_Hooks)


def cJSON_InitHooks(*args):
  return _AIOUSB.cJSON_InitHooks(*args)
cJSON_InitHooks = _AIOUSB.cJSON_InitHooks

def cJSON_Parse(*args):
  return _AIOUSB.cJSON_Parse(*args)
cJSON_Parse = _AIOUSB.cJSON_Parse

def cJSON_Print(*args):
  return _AIOUSB.cJSON_Print(*args)
cJSON_Print = _AIOUSB.cJSON_Print

def cJSON_PrintUnformatted(*args):
  return _AIOUSB.cJSON_PrintUnformatted(*args)
cJSON_PrintUnformatted = _AIOUSB.cJSON_PrintUnformatted

def cJSON_Delete(*args):
  return _AIOUSB.cJSON_Delete(*args)
cJSON_Delete = _AIOUSB.cJSON_Delete

def cJSON_AsInteger(*args):
  return _AIOUSB.cJSON_AsInteger(*args)
cJSON_AsInteger = _AIOUSB.cJSON_AsInteger

def cJSON_GetArraySize(*args):
  return _AIOUSB.cJSON_GetArraySize(*args)
cJSON_GetArraySize = _AIOUSB.cJSON_GetArraySize

def cJSON_GetArrayItem(*args):
  return _AIOUSB.cJSON_GetArrayItem(*args)
cJSON_GetArrayItem = _AIOUSB.cJSON_GetArrayItem

def cJSON_GetObjectItem(*args):
  return _AIOUSB.cJSON_GetObjectItem(*args)
cJSON_GetObjectItem = _AIOUSB.cJSON_GetObjectItem

def cJSON_GetErrorPtr():
  return _AIOUSB.cJSON_GetErrorPtr()
cJSON_GetErrorPtr = _AIOUSB.cJSON_GetErrorPtr

def cJSON_CreateNull():
  return _AIOUSB.cJSON_CreateNull()
cJSON_CreateNull = _AIOUSB.cJSON_CreateNull

def cJSON_CreateTrue():
  return _AIOUSB.cJSON_CreateTrue()
cJSON_CreateTrue = _AIOUSB.cJSON_CreateTrue

def cJSON_CreateFalse():
  return _AIOUSB.cJSON_CreateFalse()
cJSON_CreateFalse = _AIOUSB.cJSON_CreateFalse

def cJSON_CreateBool(*args):
  return _AIOUSB.cJSON_CreateBool(*args)
cJSON_CreateBool = _AIOUSB.cJSON_CreateBool

def cJSON_CreateNumber(*args):
  return _AIOUSB.cJSON_CreateNumber(*args)
cJSON_CreateNumber = _AIOUSB.cJSON_CreateNumber

def cJSON_CreateString(*args):
  return _AIOUSB.cJSON_CreateString(*args)
cJSON_CreateString = _AIOUSB.cJSON_CreateString

def cJSON_CreateArray():
  return _AIOUSB.cJSON_CreateArray()
cJSON_CreateArray = _AIOUSB.cJSON_CreateArray

def cJSON_CreateObject():
  return _AIOUSB.cJSON_CreateObject()
cJSON_CreateObject = _AIOUSB.cJSON_CreateObject

def cJSON_CreateIntArray(*args):
  return _AIOUSB.cJSON_CreateIntArray(*args)
cJSON_CreateIntArray = _AIOUSB.cJSON_CreateIntArray

def cJSON_CreateFloatArray(*args):
  return _AIOUSB.cJSON_CreateFloatArray(*args)
cJSON_CreateFloatArray = _AIOUSB.cJSON_CreateFloatArray

def cJSON_CreateDoubleArray(*args):
  return _AIOUSB.cJSON_CreateDoubleArray(*args)
cJSON_CreateDoubleArray = _AIOUSB.cJSON_CreateDoubleArray

def cJSON_CreateStringArray(*args):
  return _AIOUSB.cJSON_CreateStringArray(*args)
cJSON_CreateStringArray = _AIOUSB.cJSON_CreateStringArray

def cJSON_AddItemToArray(*args):
  return _AIOUSB.cJSON_AddItemToArray(*args)
cJSON_AddItemToArray = _AIOUSB.cJSON_AddItemToArray

def cJSON_AddItemToObject(*args):
  return _AIOUSB.cJSON_AddItemToObject(*args)
cJSON_AddItemToObject = _AIOUSB.cJSON_AddItemToObject

def cJSON_AddItemReferenceToArray(*args):
  return _AIOUSB.cJSON_AddItemReferenceToArray(*args)
cJSON_AddItemReferenceToArray = _AIOUSB.cJSON_AddItemReferenceToArray

def cJSON_AddItemReferenceToObject(*args):
  return _AIOUSB.cJSON_AddItemReferenceToObject(*args)
cJSON_AddItemReferenceToObject = _AIOUSB.cJSON_AddItemReferenceToObject

def cJSON_DetachItemFromArray(*args):
  return _AIOUSB.cJSON_DetachItemFromArray(*args)
cJSON_DetachItemFromArray = _AIOUSB.cJSON_DetachItemFromArray

def cJSON_DeleteItemFromArray(*args):
  return _AIOUSB.cJSON_DeleteItemFromArray(*args)
cJSON_DeleteItemFromArray = _AIOUSB.cJSON_DeleteItemFromArray

def cJSON_DetachItemFromObject(*args):
  return _AIOUSB.cJSON_DetachItemFromObject(*args)
cJSON_DetachItemFromObject = _AIOUSB.cJSON_DetachItemFromObject

def cJSON_DeleteItemFromObject(*args):
  return _AIOUSB.cJSON_DeleteItemFromObject(*args)
cJSON_DeleteItemFromObject = _AIOUSB.cJSON_DeleteItemFromObject

def cJSON_ReplaceItemInArray(*args):
  return _AIOUSB.cJSON_ReplaceItemInArray(*args)
cJSON_ReplaceItemInArray = _AIOUSB.cJSON_ReplaceItemInArray

def cJSON_ReplaceItemInObject(*args):
  return _AIOUSB.cJSON_ReplaceItemInObject(*args)
cJSON_ReplaceItemInObject = _AIOUSB.cJSON_ReplaceItemInObject

def cJSON_Duplicate(*args):
  return _AIOUSB.cJSON_Duplicate(*args)
cJSON_Duplicate = _AIOUSB.cJSON_Duplicate

def cJSON_ParseWithOpts(*args):
  return _AIOUSB.cJSON_ParseWithOpts(*args)
cJSON_ParseWithOpts = _AIOUSB.cJSON_ParseWithOpts

def cJSON_Minify(*args):
  return _AIOUSB.cJSON_Minify(*args)
cJSON_Minify = _AIOUSB.cJSON_Minify
HAS_PTHREAD = _AIOUSB.HAS_PTHREAD
THREAD_STATUS_begin = _AIOUSB.THREAD_STATUS_begin
NOT_STARTED = _AIOUSB.NOT_STARTED
RUNNING = _AIOUSB.RUNNING
TERMINATED = _AIOUSB.TERMINATED
JOINED = _AIOUSB.JOINED
THREAD_STATUS_end = _AIOUSB.THREAD_STATUS_end
AIOContinuousBufMode_begin = _AIOUSB.AIOContinuousBufMode_begin
AIOCONTINUOUS_BUF_ALLORNONE = _AIOUSB.AIOCONTINUOUS_BUF_ALLORNONE
AIOCONTINUOUS_BUF_NORMAL = _AIOUSB.AIOCONTINUOUS_BUF_NORMAL
AIOCONTINUOUS_BUF_OVERRIDE = _AIOUSB.AIOCONTINUOUS_BUF_OVERRIDE
AIOContinuousBufMode_end = _AIOUSB.AIOContinuousBufMode_end
AUR_CBUF_SETUP = _AIOUSB.AUR_CBUF_SETUP
AUR_CBUF_EXIT = _AIOUSB.AUR_CBUF_EXIT
NUMBER_CHANNELS = _AIOUSB.NUMBER_CHANNELS
MAX_USB_DEVICES = _AIOUSB.MAX_USB_DEVICES
AIOUSB_FALSE = _AIOUSB.AIOUSB_FALSE
AIOUSB_TRUE = _AIOUSB.AIOUSB_TRUE
ProductIDS_begin = _AIOUSB.ProductIDS_begin
ACCES_VENDOR_ID = _AIOUSB.ACCES_VENDOR_ID
USB_DA12_8A_REV_A = _AIOUSB.USB_DA12_8A_REV_A
USB_DA12_8A = _AIOUSB.USB_DA12_8A
USB_DA12_8E = _AIOUSB.USB_DA12_8E
USB_DIO_32 = _AIOUSB.USB_DIO_32
USB_DIO_32I = _AIOUSB.USB_DIO_32I
USB_DIO_48 = _AIOUSB.USB_DIO_48
USB_DIO_96 = _AIOUSB.USB_DIO_96
USB_DI16A_REV_A1 = _AIOUSB.USB_DI16A_REV_A1
USB_DO16A_REV_A1 = _AIOUSB.USB_DO16A_REV_A1
USB_DI16A_REV_A2 = _AIOUSB.USB_DI16A_REV_A2
USB_DIO_16H = _AIOUSB.USB_DIO_16H
USB_DI16A = _AIOUSB.USB_DI16A
USB_DO16A = _AIOUSB.USB_DO16A
USB_DIO_16A = _AIOUSB.USB_DIO_16A
USB_IIRO_16 = _AIOUSB.USB_IIRO_16
USB_II_16 = _AIOUSB.USB_II_16
USB_RO_16 = _AIOUSB.USB_RO_16
USB_IIRO_8 = _AIOUSB.USB_IIRO_8
USB_II_8 = _AIOUSB.USB_II_8
USB_IIRO_4 = _AIOUSB.USB_IIRO_4
USB_IDIO_16 = _AIOUSB.USB_IDIO_16
USB_II_16_OLD = _AIOUSB.USB_II_16_OLD
USB_IDO_16 = _AIOUSB.USB_IDO_16
USB_IDIO_8 = _AIOUSB.USB_IDIO_8
USB_II_8_OLD = _AIOUSB.USB_II_8_OLD
USB_IDIO_4 = _AIOUSB.USB_IDIO_4
USB_CTR_15 = _AIOUSB.USB_CTR_15
USB_IIRO4_2SM = _AIOUSB.USB_IIRO4_2SM
USB_IIRO4_COM = _AIOUSB.USB_IIRO4_COM
USB_DIO16RO8 = _AIOUSB.USB_DIO16RO8
USB_DIO48DO24 = _AIOUSB.USB_DIO48DO24
USB_DIO24DO12 = _AIOUSB.USB_DIO24DO12
USB_DO24 = _AIOUSB.USB_DO24
PICO_DIO16RO8 = _AIOUSB.PICO_DIO16RO8
USBP_II8IDO4A = _AIOUSB.USBP_II8IDO4A
USB_AI16_16A = _AIOUSB.USB_AI16_16A
USB_AI16_16E = _AIOUSB.USB_AI16_16E
USB_AI12_16A = _AIOUSB.USB_AI12_16A
USB_AI12_16 = _AIOUSB.USB_AI12_16
USB_AI12_16E = _AIOUSB.USB_AI12_16E
USB_AI16_64MA = _AIOUSB.USB_AI16_64MA
USB_AI16_64ME = _AIOUSB.USB_AI16_64ME
USB_AI12_64MA = _AIOUSB.USB_AI12_64MA
USB_AI12_64M = _AIOUSB.USB_AI12_64M
USB_AI12_64ME = _AIOUSB.USB_AI12_64ME
USB_AI16_32A = _AIOUSB.USB_AI16_32A
USB_AI16_32E = _AIOUSB.USB_AI16_32E
USB_AI12_32A = _AIOUSB.USB_AI12_32A
USB_AI12_32 = _AIOUSB.USB_AI12_32
USB_AI12_32E = _AIOUSB.USB_AI12_32E
USB_AI16_64A = _AIOUSB.USB_AI16_64A
USB_AI16_64E = _AIOUSB.USB_AI16_64E
USB_AI12_64A = _AIOUSB.USB_AI12_64A
USB_AI12_64 = _AIOUSB.USB_AI12_64
USB_AI12_64E = _AIOUSB.USB_AI12_64E
USB_AI16_96A = _AIOUSB.USB_AI16_96A
USB_AI16_96E = _AIOUSB.USB_AI16_96E
USB_AI12_96A = _AIOUSB.USB_AI12_96A
USB_AI12_96 = _AIOUSB.USB_AI12_96
USB_AI12_96E = _AIOUSB.USB_AI12_96E
USB_AI16_128A = _AIOUSB.USB_AI16_128A
USB_AI16_128E = _AIOUSB.USB_AI16_128E
USB_AI12_128A = _AIOUSB.USB_AI12_128A
USB_AI12_128 = _AIOUSB.USB_AI12_128
USB_AI12_128E = _AIOUSB.USB_AI12_128E
USB_AO16_16A = _AIOUSB.USB_AO16_16A
USB_AO16_16 = _AIOUSB.USB_AO16_16
USB_AO16_12A = _AIOUSB.USB_AO16_12A
USB_AO16_12 = _AIOUSB.USB_AO16_12
USB_AO16_8A = _AIOUSB.USB_AO16_8A
USB_AO16_8 = _AIOUSB.USB_AO16_8
USB_AO16_4A = _AIOUSB.USB_AO16_4A
USB_AO16_4 = _AIOUSB.USB_AO16_4
USB_AO12_16A = _AIOUSB.USB_AO12_16A
USB_AO12_16 = _AIOUSB.USB_AO12_16
USB_AO12_12A = _AIOUSB.USB_AO12_12A
USB_AO12_12 = _AIOUSB.USB_AO12_12
USB_AO12_8A = _AIOUSB.USB_AO12_8A
USB_AO12_8 = _AIOUSB.USB_AO12_8
USB_AO12_4A = _AIOUSB.USB_AO12_4A
USB_AO12_4 = _AIOUSB.USB_AO12_4
USB_AIO16_16A = _AIOUSB.USB_AIO16_16A
USB_AIO16_16E = _AIOUSB.USB_AIO16_16E
USB_AIO12_16A = _AIOUSB.USB_AIO12_16A
USB_AIO12_16 = _AIOUSB.USB_AIO12_16
USB_AIO12_16E = _AIOUSB.USB_AIO12_16E
USB_AIO16_64MA = _AIOUSB.USB_AIO16_64MA
USB_AIO16_64ME = _AIOUSB.USB_AIO16_64ME
USB_AIO12_64MA = _AIOUSB.USB_AIO12_64MA
USB_AIO12_64M = _AIOUSB.USB_AIO12_64M
USB_AIO12_64ME = _AIOUSB.USB_AIO12_64ME
USB_AIO16_32A = _AIOUSB.USB_AIO16_32A
USB_AIO16_32E = _AIOUSB.USB_AIO16_32E
USB_AIO12_32A = _AIOUSB.USB_AIO12_32A
USB_AIO12_32 = _AIOUSB.USB_AIO12_32
USB_AIO12_32E = _AIOUSB.USB_AIO12_32E
USB_AIO16_64A = _AIOUSB.USB_AIO16_64A
USB_AIO16_64E = _AIOUSB.USB_AIO16_64E
USB_AIO12_64A = _AIOUSB.USB_AIO12_64A
USB_AIO12_64 = _AIOUSB.USB_AIO12_64
USB_AIO12_64E = _AIOUSB.USB_AIO12_64E
USB_AIO16_96A = _AIOUSB.USB_AIO16_96A
USB_AIO16_96E = _AIOUSB.USB_AIO16_96E
USB_AIO12_96A = _AIOUSB.USB_AIO12_96A
USB_AIO12_96 = _AIOUSB.USB_AIO12_96
USB_AIO12_96E = _AIOUSB.USB_AIO12_96E
USB_AIO16_128A = _AIOUSB.USB_AIO16_128A
USB_AIO16_128E = _AIOUSB.USB_AIO16_128E
USB_AIO12_128A = _AIOUSB.USB_AIO12_128A
USB_AIO12_128 = _AIOUSB.USB_AIO12_128
USB_AIO12_128E = _AIOUSB.USB_AIO12_128E
ProductIDS_end = _AIOUSB.ProductIDS_end
diFirst = _AIOUSB.diFirst
diOnly = _AIOUSB.diOnly
diNone = _AIOUSB.diNone
DACRange_begin = _AIOUSB.DACRange_begin
DAC_RANGE_0_5V = _AIOUSB.DAC_RANGE_0_5V
DAC_RANGE_5V = _AIOUSB.DAC_RANGE_5V
DAC_RANGE_0_10V = _AIOUSB.DAC_RANGE_0_10V
DAC_RANGE_10V = _AIOUSB.DAC_RANGE_10V
DACRange_end = _AIOUSB.DACRange_end
FIFO_Method_begin = _AIOUSB.FIFO_Method_begin
CLEAR_FIFO_METHOD_IMMEDIATE = _AIOUSB.CLEAR_FIFO_METHOD_IMMEDIATE
CLEAR_FIFO_METHOD_AUTO = _AIOUSB.CLEAR_FIFO_METHOD_AUTO
CLEAR_FIFO_METHOD_IMMEDIATE_AND_ABORT = _AIOUSB.CLEAR_FIFO_METHOD_IMMEDIATE_AND_ABORT
CLEAR_FIFO_METHOD_WAIT = _AIOUSB.CLEAR_FIFO_METHOD_WAIT
FIFO_Method_end = _AIOUSB.FIFO_Method_end
ResultCode_begin = _AIOUSB.ResultCode_begin
AIOUSB_SUCCESS = _AIOUSB.AIOUSB_SUCCESS
AIOUSB_ERROR_DEVICE_NOT_CONNECTED = _AIOUSB.AIOUSB_ERROR_DEVICE_NOT_CONNECTED
AIOUSB_ERROR_DUP_NAME = _AIOUSB.AIOUSB_ERROR_DUP_NAME
AIOUSB_ERROR_NOT_INIT = _AIOUSB.AIOUSB_ERROR_NOT_INIT
AIOUSB_ERROR_FILE_NOT_FOUND = _AIOUSB.AIOUSB_ERROR_FILE_NOT_FOUND
AIOUSB_ERROR_INVALID_DATA = _AIOUSB.AIOUSB_ERROR_INVALID_DATA
AIOUSB_ERROR_INVALID_INDEX = _AIOUSB.AIOUSB_ERROR_INVALID_INDEX
AIOUSB_ERROR_INVALID_MUTEX = _AIOUSB.AIOUSB_ERROR_INVALID_MUTEX
AIOUSB_ERROR_INVALID_PARAMETER = _AIOUSB.AIOUSB_ERROR_INVALID_PARAMETER
AIOUSB_ERROR_INVALID_THREAD = _AIOUSB.AIOUSB_ERROR_INVALID_THREAD
AIOUSB_ERROR_NOT_ENOUGH_MEMORY = _AIOUSB.AIOUSB_ERROR_NOT_ENOUGH_MEMORY
AIOUSB_ERROR_NOT_SUPPORTED = _AIOUSB.AIOUSB_ERROR_NOT_SUPPORTED
AIOUSB_ERROR_OPEN_FAILED = _AIOUSB.AIOUSB_ERROR_OPEN_FAILED
AIOUSB_ERROR_BAD_TOKEN_TYPE = _AIOUSB.AIOUSB_ERROR_BAD_TOKEN_TYPE
AIOUSB_ERROR_TIMEOUT = _AIOUSB.AIOUSB_ERROR_TIMEOUT
AIOUSB_ERROR_HANDLE_EOF = _AIOUSB.AIOUSB_ERROR_HANDLE_EOF
AIOUSB_ERROR_DEVICE_NOT_FOUND = _AIOUSB.AIOUSB_ERROR_DEVICE_NOT_FOUND
AIOUSB_ERROR_USBDEVICE_NOT_FOUND = _AIOUSB.AIOUSB_ERROR_USBDEVICE_NOT_FOUND
AIOUSB_ERROR_INVALID_TIMEOUT = _AIOUSB.AIOUSB_ERROR_INVALID_TIMEOUT
AIOUSB_ERROR_INVALID_USBDEVICE = _AIOUSB.AIOUSB_ERROR_INVALID_USBDEVICE
AIOUSB_ERROR_INVALID_VOLTAGES = _AIOUSB.AIOUSB_ERROR_INVALID_VOLTAGES
AIOUSB_ERROR_INVALID_COUNTS = _AIOUSB.AIOUSB_ERROR_INVALID_COUNTS
AIOUSB_ERROR_INVALID_DEVICE = _AIOUSB.AIOUSB_ERROR_INVALID_DEVICE
AIOUSB_ERROR_INVALID_DEVICE_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_DEVICE_SETTING
AIOUSB_ERROR_INVALID_DEVICE_FUNCTIONAL_PARAMETER = _AIOUSB.AIOUSB_ERROR_INVALID_DEVICE_FUNCTIONAL_PARAMETER
AIOUSB_ERROR_INVALID_DEVICE_STREAM_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_DEVICE_STREAM_SETTING
AIOUSB_ERROR_INVALID_DEVICE_CHANNEL_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_DEVICE_CHANNEL_SETTING
AIOUSB_ERROR_INVALID_DEVICE_MUX_CHANNEL_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_DEVICE_MUX_CHANNEL_SETTING
AIOUSB_ERROR_INVALID_CHANNELS_PER_GROUP_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_CHANNELS_PER_GROUP_SETTING
AIOUSB_ERROR_INVALID_CONFIG = _AIOUSB.AIOUSB_ERROR_INVALID_CONFIG
AIOUSB_ERROR_INVALID_AIOCONFIGURATION = _AIOUSB.AIOUSB_ERROR_INVALID_AIOCONFIGURATION
AIOUSB_ERROR_INVALID_AIOARGUMENT = _AIOUSB.AIOUSB_ERROR_INVALID_AIOARGUMENT
AIOUSB_ERROR_INVALID_ADCONFIG_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_ADCONFIG_SETTING
AIOUSB_ERROR_INVALID_ADCONFIG_CHANNEL_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_ADCONFIG_CHANNEL_SETTING
AIOUSB_ERROR_INVALID_ADCONFIG_CAL_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_ADCONFIG_CAL_SETTING
AIOUSB_ERROR_INVALID_ADCCONFIG = _AIOUSB.AIOUSB_ERROR_INVALID_ADCCONFIG
AIOUSB_ERROR_INVALID_ADCCONFIG_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_ADCCONFIG_SETTING
AIOUSB_ERROR_INVALID_ADCCONFIG_TRIGGER_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_ADCCONFIG_TRIGGER_SETTING
AIOUSB_ERROR_INVALID_ADCCONFIG_CAL_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_ADCCONFIG_CAL_SETTING
AIOUSB_ERROR_INVALID_ADCCONFIG_CHANNEL_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_ADCCONFIG_CHANNEL_SETTING
AIOUSB_ERROR_INVALID_ADCCONFIG_OVERSAMPLE_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_ADCCONFIG_OVERSAMPLE_SETTING
AIOUSB_ERROR_INVALID_ADCCONFIG_REGISTER_SETTING = _AIOUSB.AIOUSB_ERROR_INVALID_ADCCONFIG_REGISTER_SETTING
AIOUSB_ERROR_INVALID_AIOCONTINUOUS_BUFFER = _AIOUSB.AIOUSB_ERROR_INVALID_AIOCONTINUOUS_BUFFER
AIOUSB_ERROR_LIBUSB = _AIOUSB.AIOUSB_ERROR_LIBUSB
ResultCode_end = _AIOUSB.ResultCode_end
AD_MAX_CHANNELS = _AIOUSB.AD_MAX_CHANNELS
AD_GAIN_CODE_MASK = _AIOUSB.AD_GAIN_CODE_MASK
AIOUSB_ERROR_OFFSET = _AIOUSB.AIOUSB_ERROR_OFFSET
ADRegister_begin = _AIOUSB.ADRegister_begin
AD_REGISTER_CAL_MODE = _AIOUSB.AD_REGISTER_CAL_MODE
AD_REGISTER_TRIG_COUNT = _AIOUSB.AD_REGISTER_TRIG_COUNT
AD_REGISTER_START_END = _AIOUSB.AD_REGISTER_START_END
AD_REGISTER_OVERSAMPLE = _AIOUSB.AD_REGISTER_OVERSAMPLE
AD_REGISTER_MUX_START_END = _AIOUSB.AD_REGISTER_MUX_START_END
ADRegister_end = _AIOUSB.ADRegister_end
AD_MAX_CONFIG_REGISTERS = _AIOUSB.AD_MAX_CONFIG_REGISTERS
AD_MIN_CONFIG_REGISTERS = _AIOUSB.AD_MIN_CONFIG_REGISTERS
AD_MAX_TIMEOUT = _AIOUSB.AD_MAX_TIMEOUT
AD_MIN_TIMEOUT = _AIOUSB.AD_MIN_TIMEOUT
AD_NUM_GAIN_CODE_REGISTERS = _AIOUSB.AD_NUM_GAIN_CODE_REGISTERS
AD_CONFIG_GAIN_CODE = _AIOUSB.AD_CONFIG_GAIN_CODE
AD_REGISTER_GAIN_CODE = _AIOUSB.AD_REGISTER_GAIN_CODE
AD_CONFIG_CAL_MODE = _AIOUSB.AD_CONFIG_CAL_MODE
AD_CONFIG_TRIG_COUNT = _AIOUSB.AD_CONFIG_TRIG_COUNT
AD_CONFIG_START_END = _AIOUSB.AD_CONFIG_START_END
AD_CONFIG_OVERSAMPLE = _AIOUSB.AD_CONFIG_OVERSAMPLE
AD_CONFIG_MUX_START_END = _AIOUSB.AD_CONFIG_MUX_START_END
AD_CONFIG_START_STOP_CHANNEL_EX = _AIOUSB.AD_CONFIG_START_STOP_CHANNEL_EX
AD_NUM_GAIN_CODES = _AIOUSB.AD_NUM_GAIN_CODES
AD_DIFFERENTIAL_MODE = _AIOUSB.AD_DIFFERENTIAL_MODE
AD_TRIGGER_CTR0_EXT = _AIOUSB.AD_TRIGGER_CTR0_EXT
AD_TRIGGER_FALLING_EDGE = _AIOUSB.AD_TRIGGER_FALLING_EDGE
AD_TRIGGER_SCAN = _AIOUSB.AD_TRIGGER_SCAN
AD_TRIGGER_EXTERNAL = _AIOUSB.AD_TRIGGER_EXTERNAL
AD_TRIGGER_TIMER = _AIOUSB.AD_TRIGGER_TIMER
AD_TRIGGER_VALID_MASK = _AIOUSB.AD_TRIGGER_VALID_MASK
ADGainCode_begin = _AIOUSB.ADGainCode_begin
AD_GAIN_CODE_0_10V = _AIOUSB.AD_GAIN_CODE_0_10V
AD_GAIN_CODE_10V = _AIOUSB.AD_GAIN_CODE_10V
AD_GAIN_CODE_0_5V = _AIOUSB.AD_GAIN_CODE_0_5V
AD_GAIN_CODE_5V = _AIOUSB.AD_GAIN_CODE_5V
AD_GAIN_CODE_0_2V = _AIOUSB.AD_GAIN_CODE_0_2V
AD_GAIN_CODE_2V = _AIOUSB.AD_GAIN_CODE_2V
AD_GAIN_CODE_0_1V = _AIOUSB.AD_GAIN_CODE_0_1V
AD_GAIN_CODE_1V = _AIOUSB.AD_GAIN_CODE_1V
ADGainCode_end = _AIOUSB.ADGainCode_end
VENDOR_REQUEST_begin = _AIOUSB.VENDOR_REQUEST_begin
AUR_DIO_WRITE = _AIOUSB.AUR_DIO_WRITE
AUR_DIO_READ = _AIOUSB.AUR_DIO_READ
AUR_DIO_CONFIG = _AIOUSB.AUR_DIO_CONFIG
AUR_DIO_CONFIG_QUERY = _AIOUSB.AUR_DIO_CONFIG_QUERY
AUR_CTR_READ = _AIOUSB.AUR_CTR_READ
AUR_CTR_MODE = _AIOUSB.AUR_CTR_MODE
AUR_CTR_LOAD = _AIOUSB.AUR_CTR_LOAD
AUR_CTR_MODELOAD = _AIOUSB.AUR_CTR_MODELOAD
AUR_CTR_SELGATE = _AIOUSB.AUR_CTR_SELGATE
AUR_CTR_READALL = _AIOUSB.AUR_CTR_READALL
AUR_CTR_READLATCHED = _AIOUSB.AUR_CTR_READLATCHED
AUR_CTR_COS_BULK_GATE2 = _AIOUSB.AUR_CTR_COS_BULK_GATE2
AUR_CTR_PUR_FIRST = _AIOUSB.AUR_CTR_PUR_FIRST
AUR_CTR_PUR_OFRQ = _AIOUSB.AUR_CTR_PUR_OFRQ
AUR_CTR_COS_BULK_ABORT = _AIOUSB.AUR_CTR_COS_BULK_ABORT
AUR_CTR_PUR_MFRQ = _AIOUSB.AUR_CTR_PUR_MFRQ
AUR_CTR_PUR_EVCT = _AIOUSB.AUR_CTR_PUR_EVCT
AUR_CTR_PUR_MPUL = _AIOUSB.AUR_CTR_PUR_MPUL
AUR_WDG_STATUS = _AIOUSB.AUR_WDG_STATUS
AUR_DIO_WDG16_DEPREC = _AIOUSB.AUR_DIO_WDG16_DEPREC
AUR_READBACK_GLOBAL_STATE = _AIOUSB.AUR_READBACK_GLOBAL_STATE
AUR_SAVE_GLOBAL_STATE = _AIOUSB.AUR_SAVE_GLOBAL_STATE
AUR_GEN_CLEAR_FIFO_NEXT = _AIOUSB.AUR_GEN_CLEAR_FIFO_NEXT
AUR_GEN_CLEAR_FIFO = _AIOUSB.AUR_GEN_CLEAR_FIFO
AUR_GEN_CLEAR_FIFO_WAIT = _AIOUSB.AUR_GEN_CLEAR_FIFO_WAIT
AUR_GEN_ABORT_AND_CLEAR = _AIOUSB.AUR_GEN_ABORT_AND_CLEAR
AUR_WDG = _AIOUSB.AUR_WDG
AUR_OFFLINE_READWRITE = _AIOUSB.AUR_OFFLINE_READWRITE
AUR_SELF_TEST_1 = _AIOUSB.AUR_SELF_TEST_1
AUR_EEPROM_READ = _AIOUSB.AUR_EEPROM_READ
AUR_EEPROM_WRITE = _AIOUSB.AUR_EEPROM_WRITE
AUR_DAC_CONTROL = _AIOUSB.AUR_DAC_CONTROL
AUR_DAC_DATAPTR = _AIOUSB.AUR_DAC_DATAPTR
AUR_DAC_DIVISOR = _AIOUSB.AUR_DAC_DIVISOR
AUR_DAC_IMMEDIATE = _AIOUSB.AUR_DAC_IMMEDIATE
AUR_GEN_STREAM_STATUS = _AIOUSB.AUR_GEN_STREAM_STATUS
AUR_FLASH_READWRITE = _AIOUSB.AUR_FLASH_READWRITE
AUR_DAC_RANGE = _AIOUSB.AUR_DAC_RANGE
AUR_PROBE_CALFEATURE = _AIOUSB.AUR_PROBE_CALFEATURE
AUR_LOAD_BULK_CALIBRATION_BLOCK = _AIOUSB.AUR_LOAD_BULK_CALIBRATION_BLOCK
AUR_DIO_STREAM_OPEN_OUTPUT = _AIOUSB.AUR_DIO_STREAM_OPEN_OUTPUT
AUR_START_ACQUIRING_BLOCK = _AIOUSB.AUR_START_ACQUIRING_BLOCK
AUR_DIO_STREAM_OPEN_INPUT = _AIOUSB.AUR_DIO_STREAM_OPEN_INPUT
AUR_DIO_SETCLOCKS = _AIOUSB.AUR_DIO_SETCLOCKS
AUR_ADC_SET_CONFIG = _AIOUSB.AUR_ADC_SET_CONFIG
AUR_ADC_IMMEDIATE = _AIOUSB.AUR_ADC_IMMEDIATE
AUR_DIO_SPI_WRITE = _AIOUSB.AUR_DIO_SPI_WRITE
AUR_DIO_SPI_READ = _AIOUSB.AUR_DIO_SPI_READ
AUR_ADC_GET_CONFIG = _AIOUSB.AUR_ADC_GET_CONFIG
VENDOR_REQUEST_end = _AIOUSB.VENDOR_REQUEST_end
BITS_PER_BYTE = _AIOUSB.BITS_PER_BYTE
AI_16_MAX_COUNTS = _AIOUSB.AI_16_MAX_COUNTS
MAX_IMM_ADCS = _AIOUSB.MAX_IMM_ADCS
CAL_TABLE_WORDS = _AIOUSB.CAL_TABLE_WORDS
COUNTERS_PER_BLOCK = _AIOUSB.COUNTERS_PER_BLOCK
COUNTER_NUM_MODES = _AIOUSB.COUNTER_NUM_MODES
DAC_RESET = _AIOUSB.DAC_RESET
EEPROM_SERIAL_NUMBER_ADDRESS = _AIOUSB.EEPROM_SERIAL_NUMBER_ADDRESS
EEPROM_CUSTOM_BASE_ADDRESS = _AIOUSB.EEPROM_CUSTOM_BASE_ADDRESS
EEPROM_CUSTOM_MIN_ADDRESS = _AIOUSB.EEPROM_CUSTOM_MIN_ADDRESS
EEPROM_CUSTOM_MAX_ADDRESS = _AIOUSB.EEPROM_CUSTOM_MAX_ADDRESS
AD_CONFIG_REGISTERS = _AIOUSB.AD_CONFIG_REGISTERS
AD_MUX_CONFIG_REGISTERS = _AIOUSB.AD_MUX_CONFIG_REGISTERS
USB_WRITE_TO_DEVICE = _AIOUSB.USB_WRITE_TO_DEVICE
USB_READ_FROM_DEVICE = _AIOUSB.USB_READ_FROM_DEVICE
USB_BULK_WRITE_ENDPOINT = _AIOUSB.USB_BULK_WRITE_ENDPOINT
USB_BULK_READ_ENDPOINT = _AIOUSB.USB_BULK_READ_ENDPOINT
ADCalMode_begin = _AIOUSB.ADCalMode_begin
AD_CAL_MODE_NORMAL = _AIOUSB.AD_CAL_MODE_NORMAL
AD_CAL_MODE_GROUND = _AIOUSB.AD_CAL_MODE_GROUND
AD_CAL_MODE_REFERENCE = _AIOUSB.AD_CAL_MODE_REFERENCE
AD_CAL_MODE_BIP_GROUND = _AIOUSB.AD_CAL_MODE_BIP_GROUND
ADCalMode_end = _AIOUSB.ADCalMode_end
class AIOBuf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AIOBuf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AIOBuf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bufsize"] = _AIOUSB.AIOBuf_bufsize_set
    __swig_getmethods__["bufsize"] = _AIOUSB.AIOBuf_bufsize_get
    if _newclass:bufsize = _swig_property(_AIOUSB.AIOBuf_bufsize_get, _AIOUSB.AIOBuf_bufsize_set)
    __swig_setmethods__["buffer"] = _AIOUSB.AIOBuf_buffer_set
    __swig_getmethods__["buffer"] = _AIOUSB.AIOBuf_buffer_get
    if _newclass:buffer = _swig_property(_AIOUSB.AIOBuf_buffer_get, _AIOUSB.AIOBuf_buffer_set)
    __swig_setmethods__["bytes_remaining"] = _AIOUSB.AIOBuf_bytes_remaining_set
    __swig_getmethods__["bytes_remaining"] = _AIOUSB.AIOBuf_bytes_remaining_get
    if _newclass:bytes_remaining = _swig_property(_AIOUSB.AIOBuf_bytes_remaining_get, _AIOUSB.AIOBuf_bytes_remaining_set)
    def __init__(self, *args): 
        this = _AIOUSB.new_AIOBuf(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_AIOBuf
    __del__ = lambda self : None;
AIOBuf_swigregister = _AIOUSB.AIOBuf_swigregister
AIOBuf_swigregister(AIOBuf)

class DeviceProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceProperties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Name"] = _AIOUSB.DeviceProperties_Name_set
    __swig_getmethods__["Name"] = _AIOUSB.DeviceProperties_Name_get
    if _newclass:Name = _swig_property(_AIOUSB.DeviceProperties_Name_get, _AIOUSB.DeviceProperties_Name_set)
    __swig_setmethods__["SerialNumber"] = _AIOUSB.DeviceProperties_SerialNumber_set
    __swig_getmethods__["SerialNumber"] = _AIOUSB.DeviceProperties_SerialNumber_get
    if _newclass:SerialNumber = _swig_property(_AIOUSB.DeviceProperties_SerialNumber_get, _AIOUSB.DeviceProperties_SerialNumber_set)
    __swig_setmethods__["ProductID"] = _AIOUSB.DeviceProperties_ProductID_set
    __swig_getmethods__["ProductID"] = _AIOUSB.DeviceProperties_ProductID_get
    if _newclass:ProductID = _swig_property(_AIOUSB.DeviceProperties_ProductID_get, _AIOUSB.DeviceProperties_ProductID_set)
    __swig_setmethods__["DIOPorts"] = _AIOUSB.DeviceProperties_DIOPorts_set
    __swig_getmethods__["DIOPorts"] = _AIOUSB.DeviceProperties_DIOPorts_get
    if _newclass:DIOPorts = _swig_property(_AIOUSB.DeviceProperties_DIOPorts_get, _AIOUSB.DeviceProperties_DIOPorts_set)
    __swig_setmethods__["Counters"] = _AIOUSB.DeviceProperties_Counters_set
    __swig_getmethods__["Counters"] = _AIOUSB.DeviceProperties_Counters_get
    if _newclass:Counters = _swig_property(_AIOUSB.DeviceProperties_Counters_get, _AIOUSB.DeviceProperties_Counters_set)
    __swig_setmethods__["Tristates"] = _AIOUSB.DeviceProperties_Tristates_set
    __swig_getmethods__["Tristates"] = _AIOUSB.DeviceProperties_Tristates_get
    if _newclass:Tristates = _swig_property(_AIOUSB.DeviceProperties_Tristates_get, _AIOUSB.DeviceProperties_Tristates_set)
    __swig_setmethods__["RootClock"] = _AIOUSB.DeviceProperties_RootClock_set
    __swig_getmethods__["RootClock"] = _AIOUSB.DeviceProperties_RootClock_get
    if _newclass:RootClock = _swig_property(_AIOUSB.DeviceProperties_RootClock_get, _AIOUSB.DeviceProperties_RootClock_set)
    __swig_setmethods__["DACChannels"] = _AIOUSB.DeviceProperties_DACChannels_set
    __swig_getmethods__["DACChannels"] = _AIOUSB.DeviceProperties_DACChannels_get
    if _newclass:DACChannels = _swig_property(_AIOUSB.DeviceProperties_DACChannels_get, _AIOUSB.DeviceProperties_DACChannels_set)
    __swig_setmethods__["ADCChannels"] = _AIOUSB.DeviceProperties_ADCChannels_set
    __swig_getmethods__["ADCChannels"] = _AIOUSB.DeviceProperties_ADCChannels_get
    if _newclass:ADCChannels = _swig_property(_AIOUSB.DeviceProperties_ADCChannels_get, _AIOUSB.DeviceProperties_ADCChannels_set)
    __swig_setmethods__["ADCMUXChannels"] = _AIOUSB.DeviceProperties_ADCMUXChannels_set
    __swig_getmethods__["ADCMUXChannels"] = _AIOUSB.DeviceProperties_ADCMUXChannels_get
    if _newclass:ADCMUXChannels = _swig_property(_AIOUSB.DeviceProperties_ADCMUXChannels_get, _AIOUSB.DeviceProperties_ADCMUXChannels_set)
    __swig_setmethods__["ADCChannelsPerGroup"] = _AIOUSB.DeviceProperties_ADCChannelsPerGroup_set
    __swig_getmethods__["ADCChannelsPerGroup"] = _AIOUSB.DeviceProperties_ADCChannelsPerGroup_get
    if _newclass:ADCChannelsPerGroup = _swig_property(_AIOUSB.DeviceProperties_ADCChannelsPerGroup_get, _AIOUSB.DeviceProperties_ADCChannelsPerGroup_set)
    def __init__(self): 
        this = _AIOUSB.new_DeviceProperties()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_DeviceProperties
    __del__ = lambda self : None;
DeviceProperties_swigregister = _AIOUSB.DeviceProperties_swigregister
DeviceProperties_swigregister(DeviceProperties)

class DIOBuf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIOBuf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIOBuf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_size"] = _AIOUSB.DIOBuf__size_set
    __swig_getmethods__["_size"] = _AIOUSB.DIOBuf__size_get
    if _newclass:_size = _swig_property(_AIOUSB.DIOBuf__size_get, _AIOUSB.DIOBuf__size_set)
    __swig_setmethods__["_buffer"] = _AIOUSB.DIOBuf__buffer_set
    __swig_getmethods__["_buffer"] = _AIOUSB.DIOBuf__buffer_get
    if _newclass:_buffer = _swig_property(_AIOUSB.DIOBuf__buffer_get, _AIOUSB.DIOBuf__buffer_set)
    __swig_setmethods__["_strbuf"] = _AIOUSB.DIOBuf__strbuf_set
    __swig_getmethods__["_strbuf"] = _AIOUSB.DIOBuf__strbuf_get
    if _newclass:_strbuf = _swig_property(_AIOUSB.DIOBuf__strbuf_get, _AIOUSB.DIOBuf__strbuf_set)
    __swig_setmethods__["_strbuf_size"] = _AIOUSB.DIOBuf__strbuf_size_set
    __swig_getmethods__["_strbuf_size"] = _AIOUSB.DIOBuf__strbuf_size_get
    if _newclass:_strbuf_size = _swig_property(_AIOUSB.DIOBuf__strbuf_size_get, _AIOUSB.DIOBuf__strbuf_size_set)
    def __init__(self, *args): 
        this = _AIOUSB.new_DIOBuf(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_DIOBuf
    __del__ = lambda self : None;
    def get(self, *args): return _AIOUSB.DIOBuf_get(self, *args)
    def set(self, *args): return _AIOUSB.DIOBuf_set(self, *args)
    def hex(self): return _AIOUSB.DIOBuf_hex(self)
    def size(self): return _AIOUSB.DIOBuf_size(self)
    def resize(self, *args): return _AIOUSB.DIOBuf_resize(self, *args)
    def __str__(self): return _AIOUSB.DIOBuf___str__(self)
    def __getitem__(self, *args): return _AIOUSB.DIOBuf___getitem__(self, *args)
    def __setitem__(self, *args): return _AIOUSB.DIOBuf___setitem__(self, *args)
DIOBuf_swigregister = _AIOUSB.DIOBuf_swigregister
DIOBuf_swigregister(DIOBuf)


def NewDIOBuf(*args):
  return _AIOUSB.NewDIOBuf(*args)
NewDIOBuf = _AIOUSB.NewDIOBuf

def DeleteDIOBuf(*args):
  return _AIOUSB.DeleteDIOBuf(*args)
DeleteDIOBuf = _AIOUSB.DeleteDIOBuf

def NewDIOBufFromChar(*args):
  return _AIOUSB.NewDIOBufFromChar(*args)
NewDIOBufFromChar = _AIOUSB.NewDIOBufFromChar

def NewDIOBufFromBinStr(*args):
  return _AIOUSB.NewDIOBufFromBinStr(*args)
NewDIOBufFromBinStr = _AIOUSB.NewDIOBufFromBinStr

def DIOBufReplaceString(*args):
  return _AIOUSB.DIOBufReplaceString(*args)
DIOBufReplaceString = _AIOUSB.DIOBufReplaceString

def DIOBufReplaceBinString(*args):
  return _AIOUSB.DIOBufReplaceBinString(*args)
DIOBufReplaceBinString = _AIOUSB.DIOBufReplaceBinString

def DIOBufToHex(*args):
  return _AIOUSB.DIOBufToHex(*args)
DIOBufToHex = _AIOUSB.DIOBufToHex

def DIOBufToBinary(*args):
  return _AIOUSB.DIOBufToBinary(*args)
DIOBufToBinary = _AIOUSB.DIOBufToBinary

def DIOBufResize(*args):
  return _AIOUSB.DIOBufResize(*args)
DIOBufResize = _AIOUSB.DIOBufResize

def DIOBufSize(*args):
  return _AIOUSB.DIOBufSize(*args)
DIOBufSize = _AIOUSB.DIOBufSize

def DIOBufByteSize(*args):
  return _AIOUSB.DIOBufByteSize(*args)
DIOBufByteSize = _AIOUSB.DIOBufByteSize

def DIOBufToString(*args):
  return _AIOUSB.DIOBufToString(*args)
DIOBufToString = _AIOUSB.DIOBufToString

def DIOBufSetIndex(*args):
  return _AIOUSB.DIOBufSetIndex(*args)
DIOBufSetIndex = _AIOUSB.DIOBufSetIndex

def DIOBufGetIndex(*args):
  return _AIOUSB.DIOBufGetIndex(*args)
DIOBufGetIndex = _AIOUSB.DIOBufGetIndex

def DIOBufGetByteAtIndex(*args):
  return _AIOUSB.DIOBufGetByteAtIndex(*args)
DIOBufGetByteAtIndex = _AIOUSB.DIOBufGetByteAtIndex

def DIOBufSetByteAtIndex(*args):
  return _AIOUSB.DIOBufSetByteAtIndex(*args)
DIOBufSetByteAtIndex = _AIOUSB.DIOBufSetByteAtIndex

def new_ushortarray(*args):
  return _AIOUSB.new_ushortarray(*args)
new_ushortarray = _AIOUSB.new_ushortarray

def delete_ushortarray(*args):
  return _AIOUSB.delete_ushortarray(*args)
delete_ushortarray = _AIOUSB.delete_ushortarray

def ushort_getitem(*args):
  return _AIOUSB.ushort_getitem(*args)
ushort_getitem = _AIOUSB.ushort_getitem

def ushort_setitem(*args):
  return _AIOUSB.ushort_setitem(*args)
ushort_setitem = _AIOUSB.ushort_setitem
# This file is compatible with both classic and new-style classes.


