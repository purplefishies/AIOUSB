# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AIOUSB', [dirname(__file__)])
        except ImportError:
            import _AIOUSB
            return _AIOUSB
        if fp is not None:
            try:
                _mod = imp.load_module('_AIOUSB', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _AIOUSB = swig_import_helper()
    del swig_import_helper
else:
    import _AIOUSB
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


AUR_DIO_WRITE = _AIOUSB.AUR_DIO_WRITE
AUR_DIO_READ = _AIOUSB.AUR_DIO_READ
AUR_DIO_CONFIG = _AIOUSB.AUR_DIO_CONFIG
AUR_DIO_CONFIG_QUERY = _AIOUSB.AUR_DIO_CONFIG_QUERY
AUR_CTR_READ = _AIOUSB.AUR_CTR_READ
AUR_CTR_MODE = _AIOUSB.AUR_CTR_MODE
AUR_CTR_LOAD = _AIOUSB.AUR_CTR_LOAD
AUR_CTR_MODELOAD = _AIOUSB.AUR_CTR_MODELOAD
AUR_CTR_SELGATE = _AIOUSB.AUR_CTR_SELGATE
AUR_CTR_READALL = _AIOUSB.AUR_CTR_READALL
AUR_CTR_READLATCHED = _AIOUSB.AUR_CTR_READLATCHED
AUR_CTR_COS_BULK_GATE2 = _AIOUSB.AUR_CTR_COS_BULK_GATE2
AUR_CTR_PUR_FIRST = _AIOUSB.AUR_CTR_PUR_FIRST
AUR_CTR_PUR_OFRQ = _AIOUSB.AUR_CTR_PUR_OFRQ
AUR_CTR_COS_BULK_ABORT = _AIOUSB.AUR_CTR_COS_BULK_ABORT
AUR_CTR_PUR_MFRQ = _AIOUSB.AUR_CTR_PUR_MFRQ
AUR_CTR_PUR_EVCT = _AIOUSB.AUR_CTR_PUR_EVCT
AUR_CTR_PUR_MPUL = _AIOUSB.AUR_CTR_PUR_MPUL
AUR_DIO_WDG16_DEPREC = _AIOUSB.AUR_DIO_WDG16_DEPREC
AUR_READBACK_GLOBAL_STATE = _AIOUSB.AUR_READBACK_GLOBAL_STATE
AUR_SAVE_GLOBAL_STATE = _AIOUSB.AUR_SAVE_GLOBAL_STATE
AUR_GEN_CLEAR_FIFO_NEXT = _AIOUSB.AUR_GEN_CLEAR_FIFO_NEXT
AUR_GEN_CLEAR_FIFO = _AIOUSB.AUR_GEN_CLEAR_FIFO
AUR_GEN_CLEAR_FIFO_WAIT = _AIOUSB.AUR_GEN_CLEAR_FIFO_WAIT
AUR_GEN_ABORT_AND_CLEAR = _AIOUSB.AUR_GEN_ABORT_AND_CLEAR
AUR_WDG = _AIOUSB.AUR_WDG
AUR_OFFLINE_READWRITE = _AIOUSB.AUR_OFFLINE_READWRITE
AUR_SELF_TEST_1 = _AIOUSB.AUR_SELF_TEST_1
AUR_EEPROM_READ = _AIOUSB.AUR_EEPROM_READ
AUR_EEPROM_WRITE = _AIOUSB.AUR_EEPROM_WRITE
AUR_DAC_CONTROL = _AIOUSB.AUR_DAC_CONTROL
AUR_DAC_DATAPTR = _AIOUSB.AUR_DAC_DATAPTR
AUR_DAC_DIVISOR = _AIOUSB.AUR_DAC_DIVISOR
AUR_DAC_IMMEDIATE = _AIOUSB.AUR_DAC_IMMEDIATE
AUR_GEN_STREAM_STATUS = _AIOUSB.AUR_GEN_STREAM_STATUS
AUR_FLASH_READWRITE = _AIOUSB.AUR_FLASH_READWRITE
AUR_DAC_RANGE = _AIOUSB.AUR_DAC_RANGE
AUR_PROBE_CALFEATURE = _AIOUSB.AUR_PROBE_CALFEATURE
AUR_LOAD_BULK_CALIBRATION_BLOCK = _AIOUSB.AUR_LOAD_BULK_CALIBRATION_BLOCK
AUR_DIO_STREAM_OPEN_OUTPUT = _AIOUSB.AUR_DIO_STREAM_OPEN_OUTPUT
AUR_START_ACQUIRING_BLOCK = _AIOUSB.AUR_START_ACQUIRING_BLOCK
AUR_DIO_STREAM_OPEN_INPUT = _AIOUSB.AUR_DIO_STREAM_OPEN_INPUT
AUR_DIO_SETCLOCKS = _AIOUSB.AUR_DIO_SETCLOCKS
AUR_ADC_SET_CONFIG = _AIOUSB.AUR_ADC_SET_CONFIG
AUR_ADC_IMMEDIATE = _AIOUSB.AUR_ADC_IMMEDIATE
AUR_DIO_SPI_WRITE = _AIOUSB.AUR_DIO_SPI_WRITE
AUR_DIO_SPI_READ = _AIOUSB.AUR_DIO_SPI_READ
AUR_ADC_GET_CONFIG = _AIOUSB.AUR_ADC_GET_CONFIG
BITS_PER_BYTE = _AIOUSB.BITS_PER_BYTE
AI_16_MAX_COUNTS = _AIOUSB.AI_16_MAX_COUNTS
MAX_IMM_ADCS = _AIOUSB.MAX_IMM_ADCS
CAL_TABLE_WORDS = _AIOUSB.CAL_TABLE_WORDS
COUNTERS_PER_BLOCK = _AIOUSB.COUNTERS_PER_BLOCK
COUNTER_NUM_MODES = _AIOUSB.COUNTER_NUM_MODES
DAC_RESET = _AIOUSB.DAC_RESET
EEPROM_SERIAL_NUMBER_ADDRESS = _AIOUSB.EEPROM_SERIAL_NUMBER_ADDRESS
EEPROM_CUSTOM_BASE_ADDRESS = _AIOUSB.EEPROM_CUSTOM_BASE_ADDRESS
EEPROM_CUSTOM_MIN_ADDRESS = _AIOUSB.EEPROM_CUSTOM_MIN_ADDRESS
EEPROM_CUSTOM_MAX_ADDRESS = _AIOUSB.EEPROM_CUSTOM_MAX_ADDRESS
AD_CONFIG_REGISTERS = _AIOUSB.AD_CONFIG_REGISTERS
AD_MUX_CONFIG_REGISTERS = _AIOUSB.AD_MUX_CONFIG_REGISTERS
USB_WRITE_TO_DEVICE = _AIOUSB.USB_WRITE_TO_DEVICE
USB_READ_FROM_DEVICE = _AIOUSB.USB_READ_FROM_DEVICE
USB_BULK_WRITE_ENDPOINT = _AIOUSB.USB_BULK_WRITE_ENDPOINT
USB_BULK_READ_ENDPOINT = _AIOUSB.USB_BULK_READ_ENDPOINT
class BulkAcquireWorkerParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BulkAcquireWorkerParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BulkAcquireWorkerParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DeviceIndex"] = _AIOUSB.BulkAcquireWorkerParams_DeviceIndex_set
    __swig_getmethods__["DeviceIndex"] = _AIOUSB.BulkAcquireWorkerParams_DeviceIndex_get
    if _newclass:DeviceIndex = _swig_property(_AIOUSB.BulkAcquireWorkerParams_DeviceIndex_get, _AIOUSB.BulkAcquireWorkerParams_DeviceIndex_set)
    __swig_setmethods__["BufSize"] = _AIOUSB.BulkAcquireWorkerParams_BufSize_set
    __swig_getmethods__["BufSize"] = _AIOUSB.BulkAcquireWorkerParams_BufSize_get
    if _newclass:BufSize = _swig_property(_AIOUSB.BulkAcquireWorkerParams_BufSize_get, _AIOUSB.BulkAcquireWorkerParams_BufSize_set)
    __swig_setmethods__["pBuf"] = _AIOUSB.BulkAcquireWorkerParams_pBuf_set
    __swig_getmethods__["pBuf"] = _AIOUSB.BulkAcquireWorkerParams_pBuf_get
    if _newclass:pBuf = _swig_property(_AIOUSB.BulkAcquireWorkerParams_pBuf_get, _AIOUSB.BulkAcquireWorkerParams_pBuf_set)
    def __init__(self): 
        this = _AIOUSB.new_BulkAcquireWorkerParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_BulkAcquireWorkerParams
    __del__ = lambda self : None;
BulkAcquireWorkerParams_swigregister = _AIOUSB.BulkAcquireWorkerParams_swigregister
BulkAcquireWorkerParams_swigregister(BulkAcquireWorkerParams)

MAX_USB_DEVICES = _AIOUSB.MAX_USB_DEVICES
class DeviceDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceDescriptor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device"] = _AIOUSB.DeviceDescriptor_device_set
    __swig_getmethods__["device"] = _AIOUSB.DeviceDescriptor_device_get
    if _newclass:device = _swig_property(_AIOUSB.DeviceDescriptor_device_get, _AIOUSB.DeviceDescriptor_device_set)
    __swig_setmethods__["deviceHandle"] = _AIOUSB.DeviceDescriptor_deviceHandle_set
    __swig_getmethods__["deviceHandle"] = _AIOUSB.DeviceDescriptor_deviceHandle_get
    if _newclass:deviceHandle = _swig_property(_AIOUSB.DeviceDescriptor_deviceHandle_get, _AIOUSB.DeviceDescriptor_deviceHandle_set)
    __swig_setmethods__["bOpen"] = _AIOUSB.DeviceDescriptor_bOpen_set
    __swig_getmethods__["bOpen"] = _AIOUSB.DeviceDescriptor_bOpen_get
    if _newclass:bOpen = _swig_property(_AIOUSB.DeviceDescriptor_bOpen_get, _AIOUSB.DeviceDescriptor_bOpen_set)
    __swig_setmethods__["PID"] = _AIOUSB.DeviceDescriptor_PID_set
    __swig_getmethods__["PID"] = _AIOUSB.DeviceDescriptor_PID_get
    if _newclass:PID = _swig_property(_AIOUSB.DeviceDescriptor_PID_get, _AIOUSB.DeviceDescriptor_PID_set)
    __swig_setmethods__["DIOConfigBits"] = _AIOUSB.DeviceDescriptor_DIOConfigBits_set
    __swig_getmethods__["DIOConfigBits"] = _AIOUSB.DeviceDescriptor_DIOConfigBits_get
    if _newclass:DIOConfigBits = _swig_property(_AIOUSB.DeviceDescriptor_DIOConfigBits_get, _AIOUSB.DeviceDescriptor_DIOConfigBits_set)
    __swig_setmethods__["discardFirstSample"] = _AIOUSB.DeviceDescriptor_discardFirstSample_set
    __swig_getmethods__["discardFirstSample"] = _AIOUSB.DeviceDescriptor_discardFirstSample_get
    if _newclass:discardFirstSample = _swig_property(_AIOUSB.DeviceDescriptor_discardFirstSample_get, _AIOUSB.DeviceDescriptor_discardFirstSample_set)
    __swig_setmethods__["commTimeout"] = _AIOUSB.DeviceDescriptor_commTimeout_set
    __swig_getmethods__["commTimeout"] = _AIOUSB.DeviceDescriptor_commTimeout_get
    if _newclass:commTimeout = _swig_property(_AIOUSB.DeviceDescriptor_commTimeout_get, _AIOUSB.DeviceDescriptor_commTimeout_set)
    __swig_setmethods__["miscClockHz"] = _AIOUSB.DeviceDescriptor_miscClockHz_set
    __swig_getmethods__["miscClockHz"] = _AIOUSB.DeviceDescriptor_miscClockHz_get
    if _newclass:miscClockHz = _swig_property(_AIOUSB.DeviceDescriptor_miscClockHz_get, _AIOUSB.DeviceDescriptor_miscClockHz_set)
    __swig_setmethods__["ProductID"] = _AIOUSB.DeviceDescriptor_ProductID_set
    __swig_getmethods__["ProductID"] = _AIOUSB.DeviceDescriptor_ProductID_get
    if _newclass:ProductID = _swig_property(_AIOUSB.DeviceDescriptor_ProductID_get, _AIOUSB.DeviceDescriptor_ProductID_set)
    __swig_setmethods__["DIOBytes"] = _AIOUSB.DeviceDescriptor_DIOBytes_set
    __swig_getmethods__["DIOBytes"] = _AIOUSB.DeviceDescriptor_DIOBytes_get
    if _newclass:DIOBytes = _swig_property(_AIOUSB.DeviceDescriptor_DIOBytes_get, _AIOUSB.DeviceDescriptor_DIOBytes_set)
    __swig_setmethods__["Counters"] = _AIOUSB.DeviceDescriptor_Counters_set
    __swig_getmethods__["Counters"] = _AIOUSB.DeviceDescriptor_Counters_get
    if _newclass:Counters = _swig_property(_AIOUSB.DeviceDescriptor_Counters_get, _AIOUSB.DeviceDescriptor_Counters_set)
    __swig_setmethods__["Tristates"] = _AIOUSB.DeviceDescriptor_Tristates_set
    __swig_getmethods__["Tristates"] = _AIOUSB.DeviceDescriptor_Tristates_get
    if _newclass:Tristates = _swig_property(_AIOUSB.DeviceDescriptor_Tristates_get, _AIOUSB.DeviceDescriptor_Tristates_set)
    __swig_setmethods__["bGateSelectable"] = _AIOUSB.DeviceDescriptor_bGateSelectable_set
    __swig_getmethods__["bGateSelectable"] = _AIOUSB.DeviceDescriptor_bGateSelectable_get
    if _newclass:bGateSelectable = _swig_property(_AIOUSB.DeviceDescriptor_bGateSelectable_get, _AIOUSB.DeviceDescriptor_bGateSelectable_set)
    __swig_setmethods__["RootClock"] = _AIOUSB.DeviceDescriptor_RootClock_set
    __swig_getmethods__["RootClock"] = _AIOUSB.DeviceDescriptor_RootClock_get
    if _newclass:RootClock = _swig_property(_AIOUSB.DeviceDescriptor_RootClock_get, _AIOUSB.DeviceDescriptor_RootClock_set)
    __swig_setmethods__["bGetName"] = _AIOUSB.DeviceDescriptor_bGetName_set
    __swig_getmethods__["bGetName"] = _AIOUSB.DeviceDescriptor_bGetName_get
    if _newclass:bGetName = _swig_property(_AIOUSB.DeviceDescriptor_bGetName_get, _AIOUSB.DeviceDescriptor_bGetName_set)
    __swig_setmethods__["ConfigBytes"] = _AIOUSB.DeviceDescriptor_ConfigBytes_set
    __swig_getmethods__["ConfigBytes"] = _AIOUSB.DeviceDescriptor_ConfigBytes_get
    if _newclass:ConfigBytes = _swig_property(_AIOUSB.DeviceDescriptor_ConfigBytes_get, _AIOUSB.DeviceDescriptor_ConfigBytes_set)
    __swig_setmethods__["ImmDACs"] = _AIOUSB.DeviceDescriptor_ImmDACs_set
    __swig_getmethods__["ImmDACs"] = _AIOUSB.DeviceDescriptor_ImmDACs_get
    if _newclass:ImmDACs = _swig_property(_AIOUSB.DeviceDescriptor_ImmDACs_get, _AIOUSB.DeviceDescriptor_ImmDACs_set)
    __swig_setmethods__["bDACStream"] = _AIOUSB.DeviceDescriptor_bDACStream_set
    __swig_getmethods__["bDACStream"] = _AIOUSB.DeviceDescriptor_bDACStream_get
    if _newclass:bDACStream = _swig_property(_AIOUSB.DeviceDescriptor_bDACStream_get, _AIOUSB.DeviceDescriptor_bDACStream_set)
    __swig_setmethods__["DACsUsed"] = _AIOUSB.DeviceDescriptor_DACsUsed_set
    __swig_getmethods__["DACsUsed"] = _AIOUSB.DeviceDescriptor_DACsUsed_get
    if _newclass:DACsUsed = _swig_property(_AIOUSB.DeviceDescriptor_DACsUsed_get, _AIOUSB.DeviceDescriptor_DACsUsed_set)
    __swig_setmethods__["bADCStream"] = _AIOUSB.DeviceDescriptor_bADCStream_set
    __swig_getmethods__["bADCStream"] = _AIOUSB.DeviceDescriptor_bADCStream_get
    if _newclass:bADCStream = _swig_property(_AIOUSB.DeviceDescriptor_bADCStream_get, _AIOUSB.DeviceDescriptor_bADCStream_set)
    __swig_setmethods__["ADCChannels"] = _AIOUSB.DeviceDescriptor_ADCChannels_set
    __swig_getmethods__["ADCChannels"] = _AIOUSB.DeviceDescriptor_ADCChannels_get
    if _newclass:ADCChannels = _swig_property(_AIOUSB.DeviceDescriptor_ADCChannels_get, _AIOUSB.DeviceDescriptor_ADCChannels_set)
    __swig_setmethods__["ADCMUXChannels"] = _AIOUSB.DeviceDescriptor_ADCMUXChannels_set
    __swig_getmethods__["ADCMUXChannels"] = _AIOUSB.DeviceDescriptor_ADCMUXChannels_get
    if _newclass:ADCMUXChannels = _swig_property(_AIOUSB.DeviceDescriptor_ADCMUXChannels_get, _AIOUSB.DeviceDescriptor_ADCMUXChannels_set)
    __swig_setmethods__["RangeShift"] = _AIOUSB.DeviceDescriptor_RangeShift_set
    __swig_getmethods__["RangeShift"] = _AIOUSB.DeviceDescriptor_RangeShift_get
    if _newclass:RangeShift = _swig_property(_AIOUSB.DeviceDescriptor_RangeShift_get, _AIOUSB.DeviceDescriptor_RangeShift_set)
    __swig_setmethods__["ADCChannelsPerGroup"] = _AIOUSB.DeviceDescriptor_ADCChannelsPerGroup_set
    __swig_getmethods__["ADCChannelsPerGroup"] = _AIOUSB.DeviceDescriptor_ADCChannelsPerGroup_get
    if _newclass:ADCChannelsPerGroup = _swig_property(_AIOUSB.DeviceDescriptor_ADCChannelsPerGroup_get, _AIOUSB.DeviceDescriptor_ADCChannelsPerGroup_set)
    __swig_setmethods__["bDIOStream"] = _AIOUSB.DeviceDescriptor_bDIOStream_set
    __swig_getmethods__["bDIOStream"] = _AIOUSB.DeviceDescriptor_bDIOStream_get
    if _newclass:bDIOStream = _swig_property(_AIOUSB.DeviceDescriptor_bDIOStream_get, _AIOUSB.DeviceDescriptor_bDIOStream_set)
    __swig_setmethods__["StreamingBlockSize"] = _AIOUSB.DeviceDescriptor_StreamingBlockSize_set
    __swig_getmethods__["StreamingBlockSize"] = _AIOUSB.DeviceDescriptor_StreamingBlockSize_get
    if _newclass:StreamingBlockSize = _swig_property(_AIOUSB.DeviceDescriptor_StreamingBlockSize_get, _AIOUSB.DeviceDescriptor_StreamingBlockSize_set)
    __swig_setmethods__["bDIODebounce"] = _AIOUSB.DeviceDescriptor_bDIODebounce_set
    __swig_getmethods__["bDIODebounce"] = _AIOUSB.DeviceDescriptor_bDIODebounce_get
    if _newclass:bDIODebounce = _swig_property(_AIOUSB.DeviceDescriptor_bDIODebounce_get, _AIOUSB.DeviceDescriptor_bDIODebounce_set)
    __swig_setmethods__["bDIOSPI"] = _AIOUSB.DeviceDescriptor_bDIOSPI_set
    __swig_getmethods__["bDIOSPI"] = _AIOUSB.DeviceDescriptor_bDIOSPI_get
    if _newclass:bDIOSPI = _swig_property(_AIOUSB.DeviceDescriptor_bDIOSPI_get, _AIOUSB.DeviceDescriptor_bDIOSPI_set)
    __swig_setmethods__["bSetCustomClocks"] = _AIOUSB.DeviceDescriptor_bSetCustomClocks_set
    __swig_getmethods__["bSetCustomClocks"] = _AIOUSB.DeviceDescriptor_bSetCustomClocks_get
    if _newclass:bSetCustomClocks = _swig_property(_AIOUSB.DeviceDescriptor_bSetCustomClocks_get, _AIOUSB.DeviceDescriptor_bSetCustomClocks_set)
    __swig_setmethods__["WDGBytes"] = _AIOUSB.DeviceDescriptor_WDGBytes_set
    __swig_getmethods__["WDGBytes"] = _AIOUSB.DeviceDescriptor_WDGBytes_get
    if _newclass:WDGBytes = _swig_property(_AIOUSB.DeviceDescriptor_WDGBytes_get, _AIOUSB.DeviceDescriptor_WDGBytes_set)
    __swig_setmethods__["bClearFIFO"] = _AIOUSB.DeviceDescriptor_bClearFIFO_set
    __swig_getmethods__["bClearFIFO"] = _AIOUSB.DeviceDescriptor_bClearFIFO_get
    if _newclass:bClearFIFO = _swig_property(_AIOUSB.DeviceDescriptor_bClearFIFO_get, _AIOUSB.DeviceDescriptor_bClearFIFO_set)
    __swig_setmethods__["ImmADCs"] = _AIOUSB.DeviceDescriptor_ImmADCs_set
    __swig_getmethods__["ImmADCs"] = _AIOUSB.DeviceDescriptor_ImmADCs_get
    if _newclass:ImmADCs = _swig_property(_AIOUSB.DeviceDescriptor_ImmADCs_get, _AIOUSB.DeviceDescriptor_ImmADCs_set)
    __swig_setmethods__["bDACBoardRange"] = _AIOUSB.DeviceDescriptor_bDACBoardRange_set
    __swig_getmethods__["bDACBoardRange"] = _AIOUSB.DeviceDescriptor_bDACBoardRange_get
    if _newclass:bDACBoardRange = _swig_property(_AIOUSB.DeviceDescriptor_bDACBoardRange_get, _AIOUSB.DeviceDescriptor_bDACBoardRange_set)
    __swig_setmethods__["bDACChannelCal"] = _AIOUSB.DeviceDescriptor_bDACChannelCal_set
    __swig_getmethods__["bDACChannelCal"] = _AIOUSB.DeviceDescriptor_bDACChannelCal_get
    if _newclass:bDACChannelCal = _swig_property(_AIOUSB.DeviceDescriptor_bDACChannelCal_get, _AIOUSB.DeviceDescriptor_bDACChannelCal_set)
    __swig_setmethods__["FlashSectors"] = _AIOUSB.DeviceDescriptor_FlashSectors_set
    __swig_getmethods__["FlashSectors"] = _AIOUSB.DeviceDescriptor_FlashSectors_get
    if _newclass:FlashSectors = _swig_property(_AIOUSB.DeviceDescriptor_FlashSectors_get, _AIOUSB.DeviceDescriptor_FlashSectors_set)
    __swig_setmethods__["bDACOpen"] = _AIOUSB.DeviceDescriptor_bDACOpen_set
    __swig_getmethods__["bDACOpen"] = _AIOUSB.DeviceDescriptor_bDACOpen_get
    if _newclass:bDACOpen = _swig_property(_AIOUSB.DeviceDescriptor_bDACOpen_get, _AIOUSB.DeviceDescriptor_bDACOpen_set)
    __swig_setmethods__["bDACClosing"] = _AIOUSB.DeviceDescriptor_bDACClosing_set
    __swig_getmethods__["bDACClosing"] = _AIOUSB.DeviceDescriptor_bDACClosing_get
    if _newclass:bDACClosing = _swig_property(_AIOUSB.DeviceDescriptor_bDACClosing_get, _AIOUSB.DeviceDescriptor_bDACClosing_set)
    __swig_setmethods__["bDACAborting"] = _AIOUSB.DeviceDescriptor_bDACAborting_set
    __swig_getmethods__["bDACAborting"] = _AIOUSB.DeviceDescriptor_bDACAborting_get
    if _newclass:bDACAborting = _swig_property(_AIOUSB.DeviceDescriptor_bDACAborting_get, _AIOUSB.DeviceDescriptor_bDACAborting_set)
    __swig_setmethods__["bDACStarted"] = _AIOUSB.DeviceDescriptor_bDACStarted_set
    __swig_getmethods__["bDACStarted"] = _AIOUSB.DeviceDescriptor_bDACStarted_get
    if _newclass:bDACStarted = _swig_property(_AIOUSB.DeviceDescriptor_bDACStarted_get, _AIOUSB.DeviceDescriptor_bDACStarted_set)
    __swig_setmethods__["DACData"] = _AIOUSB.DeviceDescriptor_DACData_set
    __swig_getmethods__["DACData"] = _AIOUSB.DeviceDescriptor_DACData_get
    if _newclass:DACData = _swig_property(_AIOUSB.DeviceDescriptor_DACData_get, _AIOUSB.DeviceDescriptor_DACData_set)
    __swig_setmethods__["PendingDACData"] = _AIOUSB.DeviceDescriptor_PendingDACData_set
    __swig_getmethods__["PendingDACData"] = _AIOUSB.DeviceDescriptor_PendingDACData_get
    if _newclass:PendingDACData = _swig_property(_AIOUSB.DeviceDescriptor_PendingDACData_get, _AIOUSB.DeviceDescriptor_PendingDACData_set)
    __swig_setmethods__["hDACDataMutex"] = _AIOUSB.DeviceDescriptor_hDACDataMutex_set
    __swig_getmethods__["hDACDataMutex"] = _AIOUSB.DeviceDescriptor_hDACDataMutex_get
    if _newclass:hDACDataMutex = _swig_property(_AIOUSB.DeviceDescriptor_hDACDataMutex_get, _AIOUSB.DeviceDescriptor_hDACDataMutex_set)
    __swig_setmethods__["hDACDataSem"] = _AIOUSB.DeviceDescriptor_hDACDataSem_set
    __swig_getmethods__["hDACDataSem"] = _AIOUSB.DeviceDescriptor_hDACDataSem_get
    if _newclass:hDACDataSem = _swig_property(_AIOUSB.DeviceDescriptor_hDACDataSem_get, _AIOUSB.DeviceDescriptor_hDACDataSem_set)
    __swig_setmethods__["bDIOOpen"] = _AIOUSB.DeviceDescriptor_bDIOOpen_set
    __swig_getmethods__["bDIOOpen"] = _AIOUSB.DeviceDescriptor_bDIOOpen_get
    if _newclass:bDIOOpen = _swig_property(_AIOUSB.DeviceDescriptor_bDIOOpen_get, _AIOUSB.DeviceDescriptor_bDIOOpen_set)
    __swig_setmethods__["bDIORead"] = _AIOUSB.DeviceDescriptor_bDIORead_set
    __swig_getmethods__["bDIORead"] = _AIOUSB.DeviceDescriptor_bDIORead_get
    if _newclass:bDIORead = _swig_property(_AIOUSB.DeviceDescriptor_bDIORead_get, _AIOUSB.DeviceDescriptor_bDIORead_set)
    __swig_setmethods__["bDeviceWasHere"] = _AIOUSB.DeviceDescriptor_bDeviceWasHere_set
    __swig_getmethods__["bDeviceWasHere"] = _AIOUSB.DeviceDescriptor_bDeviceWasHere_get
    if _newclass:bDeviceWasHere = _swig_property(_AIOUSB.DeviceDescriptor_bDeviceWasHere_get, _AIOUSB.DeviceDescriptor_bDeviceWasHere_set)
    __swig_setmethods__["LastDIOData"] = _AIOUSB.DeviceDescriptor_LastDIOData_set
    __swig_getmethods__["LastDIOData"] = _AIOUSB.DeviceDescriptor_LastDIOData_get
    if _newclass:LastDIOData = _swig_property(_AIOUSB.DeviceDescriptor_LastDIOData_get, _AIOUSB.DeviceDescriptor_LastDIOData_set)
    __swig_setmethods__["cachedName"] = _AIOUSB.DeviceDescriptor_cachedName_set
    __swig_getmethods__["cachedName"] = _AIOUSB.DeviceDescriptor_cachedName_get
    if _newclass:cachedName = _swig_property(_AIOUSB.DeviceDescriptor_cachedName_get, _AIOUSB.DeviceDescriptor_cachedName_set)
    __swig_setmethods__["cachedSerialNumber"] = _AIOUSB.DeviceDescriptor_cachedSerialNumber_set
    __swig_getmethods__["cachedSerialNumber"] = _AIOUSB.DeviceDescriptor_cachedSerialNumber_get
    if _newclass:cachedSerialNumber = _swig_property(_AIOUSB.DeviceDescriptor_cachedSerialNumber_get, _AIOUSB.DeviceDescriptor_cachedSerialNumber_set)
    __swig_setmethods__["cachedConfigBlock"] = _AIOUSB.DeviceDescriptor_cachedConfigBlock_set
    __swig_getmethods__["cachedConfigBlock"] = _AIOUSB.DeviceDescriptor_cachedConfigBlock_get
    if _newclass:cachedConfigBlock = _swig_property(_AIOUSB.DeviceDescriptor_cachedConfigBlock_get, _AIOUSB.DeviceDescriptor_cachedConfigBlock_set)
    __swig_setmethods__["workerBusy"] = _AIOUSB.DeviceDescriptor_workerBusy_set
    __swig_getmethods__["workerBusy"] = _AIOUSB.DeviceDescriptor_workerBusy_get
    if _newclass:workerBusy = _swig_property(_AIOUSB.DeviceDescriptor_workerBusy_get, _AIOUSB.DeviceDescriptor_workerBusy_set)
    __swig_setmethods__["workerStatus"] = _AIOUSB.DeviceDescriptor_workerStatus_set
    __swig_getmethods__["workerStatus"] = _AIOUSB.DeviceDescriptor_workerStatus_get
    if _newclass:workerStatus = _swig_property(_AIOUSB.DeviceDescriptor_workerStatus_get, _AIOUSB.DeviceDescriptor_workerStatus_set)
    __swig_setmethods__["workerResult"] = _AIOUSB.DeviceDescriptor_workerResult_set
    __swig_getmethods__["workerResult"] = _AIOUSB.DeviceDescriptor_workerResult_get
    if _newclass:workerResult = _swig_property(_AIOUSB.DeviceDescriptor_workerResult_get, _AIOUSB.DeviceDescriptor_workerResult_set)
    __swig_setmethods__["FastITConfig"] = _AIOUSB.DeviceDescriptor_FastITConfig_set
    __swig_getmethods__["FastITConfig"] = _AIOUSB.DeviceDescriptor_FastITConfig_get
    if _newclass:FastITConfig = _swig_property(_AIOUSB.DeviceDescriptor_FastITConfig_get, _AIOUSB.DeviceDescriptor_FastITConfig_set)
    __swig_setmethods__["FastITBakConfig"] = _AIOUSB.DeviceDescriptor_FastITBakConfig_set
    __swig_getmethods__["FastITBakConfig"] = _AIOUSB.DeviceDescriptor_FastITBakConfig_get
    if _newclass:FastITBakConfig = _swig_property(_AIOUSB.DeviceDescriptor_FastITBakConfig_get, _AIOUSB.DeviceDescriptor_FastITBakConfig_set)
    __swig_setmethods__["FastITConfig_size"] = _AIOUSB.DeviceDescriptor_FastITConfig_size_set
    __swig_getmethods__["FastITConfig_size"] = _AIOUSB.DeviceDescriptor_FastITConfig_size_get
    if _newclass:FastITConfig_size = _swig_property(_AIOUSB.DeviceDescriptor_FastITConfig_size_get, _AIOUSB.DeviceDescriptor_FastITConfig_size_set)
    __swig_setmethods__["ADBuf"] = _AIOUSB.DeviceDescriptor_ADBuf_set
    __swig_getmethods__["ADBuf"] = _AIOUSB.DeviceDescriptor_ADBuf_get
    if _newclass:ADBuf = _swig_property(_AIOUSB.DeviceDescriptor_ADBuf_get, _AIOUSB.DeviceDescriptor_ADBuf_set)
    __swig_setmethods__["ADBuf_size"] = _AIOUSB.DeviceDescriptor_ADBuf_size_set
    __swig_getmethods__["ADBuf_size"] = _AIOUSB.DeviceDescriptor_ADBuf_size_get
    if _newclass:ADBuf_size = _swig_property(_AIOUSB.DeviceDescriptor_ADBuf_size_get, _AIOUSB.DeviceDescriptor_ADBuf_size_set)
    def __init__(self): 
        this = _AIOUSB.new_DeviceDescriptor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_DeviceDescriptor
    __del__ = lambda self : None;
DeviceDescriptor_swigregister = _AIOUSB.DeviceDescriptor_swigregister
DeviceDescriptor_swigregister(DeviceDescriptor)

ACCES_VENDOR_ID = _AIOUSB.ACCES_VENDOR_ID
USB_DA12_8A_REV_A = _AIOUSB.USB_DA12_8A_REV_A
USB_DA12_8A = _AIOUSB.USB_DA12_8A
USB_DA12_8E = _AIOUSB.USB_DA12_8E
USB_DIO_32 = _AIOUSB.USB_DIO_32
USB_DIO_48 = _AIOUSB.USB_DIO_48
USB_DIO_96 = _AIOUSB.USB_DIO_96
USB_DI16A_REV_A1 = _AIOUSB.USB_DI16A_REV_A1
USB_DO16A_REV_A1 = _AIOUSB.USB_DO16A_REV_A1
USB_DI16A_REV_A2 = _AIOUSB.USB_DI16A_REV_A2
USB_DIO_16H = _AIOUSB.USB_DIO_16H
USB_DI16A = _AIOUSB.USB_DI16A
USB_DO16A = _AIOUSB.USB_DO16A
USB_DIO_16A = _AIOUSB.USB_DIO_16A
USB_IIRO_16 = _AIOUSB.USB_IIRO_16
USB_II_16 = _AIOUSB.USB_II_16
USB_RO_16 = _AIOUSB.USB_RO_16
USB_IIRO_8 = _AIOUSB.USB_IIRO_8
USB_II_8 = _AIOUSB.USB_II_8
USB_IIRO_4 = _AIOUSB.USB_IIRO_4
USB_IDIO_16 = _AIOUSB.USB_IDIO_16
USB_II_16_OLD = _AIOUSB.USB_II_16_OLD
USB_IDO_16 = _AIOUSB.USB_IDO_16
USB_IDIO_8 = _AIOUSB.USB_IDIO_8
USB_II_8_OLD = _AIOUSB.USB_II_8_OLD
USB_IDIO_4 = _AIOUSB.USB_IDIO_4
USB_CTR_15 = _AIOUSB.USB_CTR_15
USB_IIRO4_2SM = _AIOUSB.USB_IIRO4_2SM
USB_IIRO4_COM = _AIOUSB.USB_IIRO4_COM
USB_DIO16RO8 = _AIOUSB.USB_DIO16RO8
PICO_DIO16RO8 = _AIOUSB.PICO_DIO16RO8
USB_AI16_16A = _AIOUSB.USB_AI16_16A
USB_AI16_16E = _AIOUSB.USB_AI16_16E
USB_AI12_16A = _AIOUSB.USB_AI12_16A
USB_AI12_16 = _AIOUSB.USB_AI12_16
USB_AI12_16E = _AIOUSB.USB_AI12_16E
USB_AI16_64MA = _AIOUSB.USB_AI16_64MA
USB_AI16_64ME = _AIOUSB.USB_AI16_64ME
USB_AI12_64MA = _AIOUSB.USB_AI12_64MA
USB_AI12_64M = _AIOUSB.USB_AI12_64M
USB_AI12_64ME = _AIOUSB.USB_AI12_64ME
USB_AI16_32A = _AIOUSB.USB_AI16_32A
USB_AI16_32E = _AIOUSB.USB_AI16_32E
USB_AI12_32A = _AIOUSB.USB_AI12_32A
USB_AI12_32 = _AIOUSB.USB_AI12_32
USB_AI12_32E = _AIOUSB.USB_AI12_32E
USB_AI16_64A = _AIOUSB.USB_AI16_64A
USB_AI16_64E = _AIOUSB.USB_AI16_64E
USB_AI12_64A = _AIOUSB.USB_AI12_64A
USB_AI12_64 = _AIOUSB.USB_AI12_64
USB_AI12_64E = _AIOUSB.USB_AI12_64E
USB_AI16_96A = _AIOUSB.USB_AI16_96A
USB_AI16_96E = _AIOUSB.USB_AI16_96E
USB_AI12_96A = _AIOUSB.USB_AI12_96A
USB_AI12_96 = _AIOUSB.USB_AI12_96
USB_AI12_96E = _AIOUSB.USB_AI12_96E
USB_AI16_128A = _AIOUSB.USB_AI16_128A
USB_AI16_128E = _AIOUSB.USB_AI16_128E
USB_AI12_128A = _AIOUSB.USB_AI12_128A
USB_AI12_128 = _AIOUSB.USB_AI12_128
USB_AI12_128E = _AIOUSB.USB_AI12_128E
USB_AO16_16A = _AIOUSB.USB_AO16_16A
USB_AO16_16 = _AIOUSB.USB_AO16_16
USB_AO16_12A = _AIOUSB.USB_AO16_12A
USB_AO16_12 = _AIOUSB.USB_AO16_12
USB_AO16_8A = _AIOUSB.USB_AO16_8A
USB_AO16_8 = _AIOUSB.USB_AO16_8
USB_AO16_4A = _AIOUSB.USB_AO16_4A
USB_AO16_4 = _AIOUSB.USB_AO16_4
USB_AO12_16A = _AIOUSB.USB_AO12_16A
USB_AO12_16 = _AIOUSB.USB_AO12_16
USB_AO12_12A = _AIOUSB.USB_AO12_12A
USB_AO12_12 = _AIOUSB.USB_AO12_12
USB_AO12_8A = _AIOUSB.USB_AO12_8A
USB_AO12_8 = _AIOUSB.USB_AO12_8
USB_AO12_4A = _AIOUSB.USB_AO12_4A
USB_AO12_4 = _AIOUSB.USB_AO12_4
USB_AIO16_16A = _AIOUSB.USB_AIO16_16A
USB_AIO16_16E = _AIOUSB.USB_AIO16_16E
USB_AIO12_16A = _AIOUSB.USB_AIO12_16A
USB_AIO12_16 = _AIOUSB.USB_AIO12_16
USB_AIO12_16E = _AIOUSB.USB_AIO12_16E
USB_AIO16_64MA = _AIOUSB.USB_AIO16_64MA
USB_AIO16_64ME = _AIOUSB.USB_AIO16_64ME
USB_AIO12_64MA = _AIOUSB.USB_AIO12_64MA
USB_AIO12_64M = _AIOUSB.USB_AIO12_64M
USB_AIO12_64ME = _AIOUSB.USB_AIO12_64ME
USB_AIO16_32A = _AIOUSB.USB_AIO16_32A
USB_AIO16_32E = _AIOUSB.USB_AIO16_32E
USB_AIO12_32A = _AIOUSB.USB_AIO12_32A
USB_AIO12_32 = _AIOUSB.USB_AIO12_32
USB_AIO12_32E = _AIOUSB.USB_AIO12_32E
USB_AIO16_64A = _AIOUSB.USB_AIO16_64A
USB_AIO16_64E = _AIOUSB.USB_AIO16_64E
USB_AIO12_64A = _AIOUSB.USB_AIO12_64A
USB_AIO12_64 = _AIOUSB.USB_AIO12_64
USB_AIO12_64E = _AIOUSB.USB_AIO12_64E
USB_AIO16_96A = _AIOUSB.USB_AIO16_96A
USB_AIO16_96E = _AIOUSB.USB_AIO16_96E
USB_AIO12_96A = _AIOUSB.USB_AIO12_96A
USB_AIO12_96 = _AIOUSB.USB_AIO12_96
USB_AIO12_96E = _AIOUSB.USB_AIO12_96E
USB_AIO16_128A = _AIOUSB.USB_AIO16_128A
USB_AIO16_128E = _AIOUSB.USB_AIO16_128E
USB_AIO12_128A = _AIOUSB.USB_AIO12_128A
USB_AIO12_128 = _AIOUSB.USB_AIO12_128
USB_AIO12_128E = _AIOUSB.USB_AIO12_128E
diFirst = _AIOUSB.diFirst
diOnly = _AIOUSB.diOnly
diNone = _AIOUSB.diNone
DAC_RANGE_0_5V = _AIOUSB.DAC_RANGE_0_5V
DAC_RANGE_5V = _AIOUSB.DAC_RANGE_5V
DAC_RANGE_0_10V = _AIOUSB.DAC_RANGE_0_10V
DAC_RANGE_10V = _AIOUSB.DAC_RANGE_10V
CLEAR_FIFO_METHOD_IMMEDIATE = _AIOUSB.CLEAR_FIFO_METHOD_IMMEDIATE
CLEAR_FIFO_METHOD_AUTO = _AIOUSB.CLEAR_FIFO_METHOD_AUTO
CLEAR_FIFO_METHOD_IMMEDIATE_AND_ABORT = _AIOUSB.CLEAR_FIFO_METHOD_IMMEDIATE_AND_ABORT
CLEAR_FIFO_METHOD_WAIT = _AIOUSB.CLEAR_FIFO_METHOD_WAIT
num_FIFO_Method = _AIOUSB.num_FIFO_Method
AIOUSB_SUCCESS = _AIOUSB.AIOUSB_SUCCESS
AIOUSB_ERROR_DEVICE_NOT_CONNECTED = _AIOUSB.AIOUSB_ERROR_DEVICE_NOT_CONNECTED
AIOUSB_ERROR_DUP_NAME = _AIOUSB.AIOUSB_ERROR_DUP_NAME
AIOUSB_ERROR_FILE_NOT_FOUND = _AIOUSB.AIOUSB_ERROR_FILE_NOT_FOUND
AIOUSB_ERROR_INVALID_DATA = _AIOUSB.AIOUSB_ERROR_INVALID_DATA
AIOUSB_ERROR_INVALID_INDEX = _AIOUSB.AIOUSB_ERROR_INVALID_INDEX
AIOUSB_ERROR_INVALID_MUTEX = _AIOUSB.AIOUSB_ERROR_INVALID_MUTEX
AIOUSB_ERROR_INVALID_PARAMETER = _AIOUSB.AIOUSB_ERROR_INVALID_PARAMETER
AIOUSB_ERROR_INVALID_THREAD = _AIOUSB.AIOUSB_ERROR_INVALID_THREAD
AIOUSB_ERROR_NOT_ENOUGH_MEMORY = _AIOUSB.AIOUSB_ERROR_NOT_ENOUGH_MEMORY
AIOUSB_ERROR_NOT_SUPPORTED = _AIOUSB.AIOUSB_ERROR_NOT_SUPPORTED
AIOUSB_ERROR_OPEN_FAILED = _AIOUSB.AIOUSB_ERROR_OPEN_FAILED
AIOUSB_ERROR_BAD_TOKEN_TYPE = _AIOUSB.AIOUSB_ERROR_BAD_TOKEN_TYPE
AIOUSB_ERROR_TIMEOUT = _AIOUSB.AIOUSB_ERROR_TIMEOUT
AIOUSB_ERROR_HANDLE_EOF = _AIOUSB.AIOUSB_ERROR_HANDLE_EOF
AIOUSB_ERROR_LIBUSB = _AIOUSB.AIOUSB_ERROR_LIBUSB
AD_MAX_CONFIG_REGISTERS = _AIOUSB.AD_MAX_CONFIG_REGISTERS
AD_NUM_GAIN_CODE_REGISTERS = _AIOUSB.AD_NUM_GAIN_CODE_REGISTERS
AD_CONFIG_GAIN_CODE = _AIOUSB.AD_CONFIG_GAIN_CODE
AD_REGISTER_GAIN_CODE = _AIOUSB.AD_REGISTER_GAIN_CODE
AD_CONFIG_CAL_MODE = _AIOUSB.AD_CONFIG_CAL_MODE
AD_REGISTER_CAL_MODE = _AIOUSB.AD_REGISTER_CAL_MODE
AD_CONFIG_TRIG_COUNT = _AIOUSB.AD_CONFIG_TRIG_COUNT
AD_REGISTER_TRIG_COUNT = _AIOUSB.AD_REGISTER_TRIG_COUNT
AD_CONFIG_START_END = _AIOUSB.AD_CONFIG_START_END
AD_REGISTER_START_END = _AIOUSB.AD_REGISTER_START_END
AD_CONFIG_OVERSAMPLE = _AIOUSB.AD_CONFIG_OVERSAMPLE
AD_REGISTER_OVERSAMPLE = _AIOUSB.AD_REGISTER_OVERSAMPLE
AD_CONFIG_MUX_START_END = _AIOUSB.AD_CONFIG_MUX_START_END
AD_NUM_GAIN_CODES = _AIOUSB.AD_NUM_GAIN_CODES
AD_DIFFERENTIAL_MODE = _AIOUSB.AD_DIFFERENTIAL_MODE
AD_TRIGGER_CTR0_EXT = _AIOUSB.AD_TRIGGER_CTR0_EXT
AD_TRIGGER_FALLING_EDGE = _AIOUSB.AD_TRIGGER_FALLING_EDGE
AD_TRIGGER_SCAN = _AIOUSB.AD_TRIGGER_SCAN
AD_TRIGGER_EXTERNAL = _AIOUSB.AD_TRIGGER_EXTERNAL
AD_TRIGGER_TIMER = _AIOUSB.AD_TRIGGER_TIMER
AD_TRIGGER_VALID_MASK = _AIOUSB.AD_TRIGGER_VALID_MASK
AD_GAIN_CODE_MIN = _AIOUSB.AD_GAIN_CODE_MIN
AD_GAIN_CODE_0_10V = _AIOUSB.AD_GAIN_CODE_0_10V
AD_GAIN_CODE_10V = _AIOUSB.AD_GAIN_CODE_10V
AD_GAIN_CODE_0_5V = _AIOUSB.AD_GAIN_CODE_0_5V
AD_GAIN_CODE_5V = _AIOUSB.AD_GAIN_CODE_5V
AD_GAIN_CODE_0_2V = _AIOUSB.AD_GAIN_CODE_0_2V
AD_GAIN_CODE_2V = _AIOUSB.AD_GAIN_CODE_2V
AD_GAIN_CODE_0_1V = _AIOUSB.AD_GAIN_CODE_0_1V
AD_GAIN_CODE_1V = _AIOUSB.AD_GAIN_CODE_1V
AD_GAIN_CODE_MAX = _AIOUSB.AD_GAIN_CODE_MAX
AD_CAL_MODE_NORMAL = _AIOUSB.AD_CAL_MODE_NORMAL
AD_CAL_MODE_GROUND = _AIOUSB.AD_CAL_MODE_GROUND
AD_CAL_MODE_REFERENCE = _AIOUSB.AD_CAL_MODE_REFERENCE
AD_CAL_MODE_BIP_GROUND = _AIOUSB.AD_CAL_MODE_BIP_GROUND
class ADConfigBlock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADConfigBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADConfigBlock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device"] = _AIOUSB.ADConfigBlock_device_set
    __swig_getmethods__["device"] = _AIOUSB.ADConfigBlock_device_get
    if _newclass:device = _swig_property(_AIOUSB.ADConfigBlock_device_get, _AIOUSB.ADConfigBlock_device_set)
    __swig_setmethods__["size"] = _AIOUSB.ADConfigBlock_size_set
    __swig_getmethods__["size"] = _AIOUSB.ADConfigBlock_size_get
    if _newclass:size = _swig_property(_AIOUSB.ADConfigBlock_size_get, _AIOUSB.ADConfigBlock_size_set)
    __swig_setmethods__["registers"] = _AIOUSB.ADConfigBlock_registers_set
    __swig_getmethods__["registers"] = _AIOUSB.ADConfigBlock_registers_get
    if _newclass:registers = _swig_property(_AIOUSB.ADConfigBlock_registers_get, _AIOUSB.ADConfigBlock_registers_set)
    def __init__(self): 
        this = _AIOUSB.new_ADConfigBlock()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_ADConfigBlock
    __del__ = lambda self : None;
ADConfigBlock_swigregister = _AIOUSB.ADConfigBlock_swigregister
ADConfigBlock_swigregister(ADConfigBlock)

class DeviceProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceProperties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Name"] = _AIOUSB.DeviceProperties_Name_set
    __swig_getmethods__["Name"] = _AIOUSB.DeviceProperties_Name_get
    if _newclass:Name = _swig_property(_AIOUSB.DeviceProperties_Name_get, _AIOUSB.DeviceProperties_Name_set)
    __swig_setmethods__["SerialNumber"] = _AIOUSB.DeviceProperties_SerialNumber_set
    __swig_getmethods__["SerialNumber"] = _AIOUSB.DeviceProperties_SerialNumber_get
    if _newclass:SerialNumber = _swig_property(_AIOUSB.DeviceProperties_SerialNumber_get, _AIOUSB.DeviceProperties_SerialNumber_set)
    __swig_setmethods__["ProductID"] = _AIOUSB.DeviceProperties_ProductID_set
    __swig_getmethods__["ProductID"] = _AIOUSB.DeviceProperties_ProductID_get
    if _newclass:ProductID = _swig_property(_AIOUSB.DeviceProperties_ProductID_get, _AIOUSB.DeviceProperties_ProductID_set)
    __swig_setmethods__["DIOPorts"] = _AIOUSB.DeviceProperties_DIOPorts_set
    __swig_getmethods__["DIOPorts"] = _AIOUSB.DeviceProperties_DIOPorts_get
    if _newclass:DIOPorts = _swig_property(_AIOUSB.DeviceProperties_DIOPorts_get, _AIOUSB.DeviceProperties_DIOPorts_set)
    __swig_setmethods__["Counters"] = _AIOUSB.DeviceProperties_Counters_set
    __swig_getmethods__["Counters"] = _AIOUSB.DeviceProperties_Counters_get
    if _newclass:Counters = _swig_property(_AIOUSB.DeviceProperties_Counters_get, _AIOUSB.DeviceProperties_Counters_set)
    __swig_setmethods__["Tristates"] = _AIOUSB.DeviceProperties_Tristates_set
    __swig_getmethods__["Tristates"] = _AIOUSB.DeviceProperties_Tristates_get
    if _newclass:Tristates = _swig_property(_AIOUSB.DeviceProperties_Tristates_get, _AIOUSB.DeviceProperties_Tristates_set)
    __swig_setmethods__["RootClock"] = _AIOUSB.DeviceProperties_RootClock_set
    __swig_getmethods__["RootClock"] = _AIOUSB.DeviceProperties_RootClock_get
    if _newclass:RootClock = _swig_property(_AIOUSB.DeviceProperties_RootClock_get, _AIOUSB.DeviceProperties_RootClock_set)
    __swig_setmethods__["DACChannels"] = _AIOUSB.DeviceProperties_DACChannels_set
    __swig_getmethods__["DACChannels"] = _AIOUSB.DeviceProperties_DACChannels_get
    if _newclass:DACChannels = _swig_property(_AIOUSB.DeviceProperties_DACChannels_get, _AIOUSB.DeviceProperties_DACChannels_set)
    __swig_setmethods__["ADCChannels"] = _AIOUSB.DeviceProperties_ADCChannels_set
    __swig_getmethods__["ADCChannels"] = _AIOUSB.DeviceProperties_ADCChannels_get
    if _newclass:ADCChannels = _swig_property(_AIOUSB.DeviceProperties_ADCChannels_get, _AIOUSB.DeviceProperties_ADCChannels_set)
    __swig_setmethods__["ADCMUXChannels"] = _AIOUSB.DeviceProperties_ADCMUXChannels_set
    __swig_getmethods__["ADCMUXChannels"] = _AIOUSB.DeviceProperties_ADCMUXChannels_get
    if _newclass:ADCMUXChannels = _swig_property(_AIOUSB.DeviceProperties_ADCMUXChannels_get, _AIOUSB.DeviceProperties_ADCMUXChannels_set)
    __swig_setmethods__["ADCChannelsPerGroup"] = _AIOUSB.DeviceProperties_ADCChannelsPerGroup_set
    __swig_getmethods__["ADCChannelsPerGroup"] = _AIOUSB.DeviceProperties_ADCChannelsPerGroup_get
    if _newclass:ADCChannelsPerGroup = _swig_property(_AIOUSB.DeviceProperties_ADCChannelsPerGroup_get, _AIOUSB.DeviceProperties_ADCChannelsPerGroup_set)
    def __init__(self): 
        this = _AIOUSB.new_DeviceProperties()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AIOUSB.delete_DeviceProperties
    __del__ = lambda self : None;
DeviceProperties_swigregister = _AIOUSB.DeviceProperties_swigregister
DeviceProperties_swigregister(DeviceProperties)

AIOUSB_FALSE = _AIOUSB.AIOUSB_FALSE
AIOUSB_TRUE = _AIOUSB.AIOUSB_TRUE

def GetDevices():
  return _AIOUSB.GetDevices()
GetDevices = _AIOUSB.GetDevices

def QueryDeviceInfo(*args):
  return _AIOUSB.QueryDeviceInfo(*args)
QueryDeviceInfo = _AIOUSB.QueryDeviceInfo

def ClearDevices():
  return _AIOUSB.ClearDevices()
ClearDevices = _AIOUSB.ClearDevices

def ResolveDeviceIndex(*args):
  return _AIOUSB.ResolveDeviceIndex(*args)
ResolveDeviceIndex = _AIOUSB.ResolveDeviceIndex

def DIO_Configure(*args):
  return _AIOUSB.DIO_Configure(*args)
DIO_Configure = _AIOUSB.DIO_Configure

def DIO_ConfigureEx(*args):
  return _AIOUSB.DIO_ConfigureEx(*args)
DIO_ConfigureEx = _AIOUSB.DIO_ConfigureEx

def DIO_ConfigurationQuery(*args):
  return _AIOUSB.DIO_ConfigurationQuery(*args)
DIO_ConfigurationQuery = _AIOUSB.DIO_ConfigurationQuery

def DIO_WriteAll(*args):
  return _AIOUSB.DIO_WriteAll(*args)
DIO_WriteAll = _AIOUSB.DIO_WriteAll

def DIO_Write8(*args):
  return _AIOUSB.DIO_Write8(*args)
DIO_Write8 = _AIOUSB.DIO_Write8

def DIO_Write1(*args):
  return _AIOUSB.DIO_Write1(*args)
DIO_Write1 = _AIOUSB.DIO_Write1

def DIO_ReadAll(*args):
  return _AIOUSB.DIO_ReadAll(*args)
DIO_ReadAll = _AIOUSB.DIO_ReadAll

def DIO_Read8(*args):
  return _AIOUSB.DIO_Read8(*args)
DIO_Read8 = _AIOUSB.DIO_Read8

def DIO_Read1(*args):
  return _AIOUSB.DIO_Read1(*args)
DIO_Read1 = _AIOUSB.DIO_Read1

def DIO_StreamOpen(*args):
  return _AIOUSB.DIO_StreamOpen(*args)
DIO_StreamOpen = _AIOUSB.DIO_StreamOpen

def DIO_StreamClose(*args):
  return _AIOUSB.DIO_StreamClose(*args)
DIO_StreamClose = _AIOUSB.DIO_StreamClose

def DIO_StreamSetClocks(*args):
  return _AIOUSB.DIO_StreamSetClocks(*args)
DIO_StreamSetClocks = _AIOUSB.DIO_StreamSetClocks

def DIO_StreamFrame(*args):
  return _AIOUSB.DIO_StreamFrame(*args)
DIO_StreamFrame = _AIOUSB.DIO_StreamFrame

def CTR_8254Mode(*args):
  return _AIOUSB.CTR_8254Mode(*args)
CTR_8254Mode = _AIOUSB.CTR_8254Mode

def CTR_8254Load(*args):
  return _AIOUSB.CTR_8254Load(*args)
CTR_8254Load = _AIOUSB.CTR_8254Load

def CTR_8254ModeLoad(*args):
  return _AIOUSB.CTR_8254ModeLoad(*args)
CTR_8254ModeLoad = _AIOUSB.CTR_8254ModeLoad

def CTR_8254ReadModeLoad(*args):
  return _AIOUSB.CTR_8254ReadModeLoad(*args)
CTR_8254ReadModeLoad = _AIOUSB.CTR_8254ReadModeLoad

def CTR_8254Read(*args):
  return _AIOUSB.CTR_8254Read(*args)
CTR_8254Read = _AIOUSB.CTR_8254Read

def CTR_8254ReadAll(*args):
  return _AIOUSB.CTR_8254ReadAll(*args)
CTR_8254ReadAll = _AIOUSB.CTR_8254ReadAll

def CTR_8254ReadStatus(*args):
  return _AIOUSB.CTR_8254ReadStatus(*args)
CTR_8254ReadStatus = _AIOUSB.CTR_8254ReadStatus

def CTR_StartOutputFreq(*args):
  return _AIOUSB.CTR_StartOutputFreq(*args)
CTR_StartOutputFreq = _AIOUSB.CTR_StartOutputFreq

def CTR_8254SelectGate(*args):
  return _AIOUSB.CTR_8254SelectGate(*args)
CTR_8254SelectGate = _AIOUSB.CTR_8254SelectGate

def CTR_8254ReadLatched(*args):
  return _AIOUSB.CTR_8254ReadLatched(*args)
CTR_8254ReadLatched = _AIOUSB.CTR_8254ReadLatched

def ADC_GetChannelV(*args):
  return _AIOUSB.ADC_GetChannelV(*args)
ADC_GetChannelV = _AIOUSB.ADC_GetChannelV

def ADC_GetScanV(*args):
  return _AIOUSB.ADC_GetScanV(*args)
ADC_GetScanV = _AIOUSB.ADC_GetScanV

def ADC_GetScan(*args):
  return _AIOUSB.ADC_GetScan(*args)
ADC_GetScan = _AIOUSB.ADC_GetScan

def ADC_GetConfig(*args):
  return _AIOUSB.ADC_GetConfig(*args)
ADC_GetConfig = _AIOUSB.ADC_GetConfig

def ADC_SetConfig(*args):
  return _AIOUSB.ADC_SetConfig(*args)
ADC_SetConfig = _AIOUSB.ADC_SetConfig

def ADC_RangeAll(*args):
  return _AIOUSB.ADC_RangeAll(*args)
ADC_RangeAll = _AIOUSB.ADC_RangeAll

def ADC_Range1(*args):
  return _AIOUSB.ADC_Range1(*args)
ADC_Range1 = _AIOUSB.ADC_Range1

def ADC_ADMode(*args):
  return _AIOUSB.ADC_ADMode(*args)
ADC_ADMode = _AIOUSB.ADC_ADMode

def ADC_SetOversample(*args):
  return _AIOUSB.ADC_SetOversample(*args)
ADC_SetOversample = _AIOUSB.ADC_SetOversample

def ADC_SetScanLimits(*args):
  return _AIOUSB.ADC_SetScanLimits(*args)
ADC_SetScanLimits = _AIOUSB.ADC_SetScanLimits

def ADC_SetCal(*args):
  return _AIOUSB.ADC_SetCal(*args)
ADC_SetCal = _AIOUSB.ADC_SetCal

def ADC_QueryCal(*args):
  return _AIOUSB.ADC_QueryCal(*args)
ADC_QueryCal = _AIOUSB.ADC_QueryCal

def ADC_Initialize(*args):
  return _AIOUSB.ADC_Initialize(*args)
ADC_Initialize = _AIOUSB.ADC_Initialize

def ADC_BulkAcquire(*args):
  return _AIOUSB.ADC_BulkAcquire(*args)
ADC_BulkAcquire = _AIOUSB.ADC_BulkAcquire

def ADC_BulkPoll(*args):
  return _AIOUSB.ADC_BulkPoll(*args)
ADC_BulkPoll = _AIOUSB.ADC_BulkPoll

def ADC_GetADConfigBlock_Registers(*args):
  return _AIOUSB.ADC_GetADConfigBlock_Registers(*args)
ADC_GetADConfigBlock_Registers = _AIOUSB.ADC_GetADConfigBlock_Registers

def ADC_InitFastITScanV(*args):
  return _AIOUSB.ADC_InitFastITScanV(*args)
ADC_InitFastITScanV = _AIOUSB.ADC_InitFastITScanV

def ADC_CreateFastITConfig(*args):
  return _AIOUSB.ADC_CreateFastITConfig(*args)
ADC_CreateFastITConfig = _AIOUSB.ADC_CreateFastITConfig

def ADC_ResetFastITScanV(*args):
  return _AIOUSB.ADC_ResetFastITScanV(*args)
ADC_ResetFastITScanV = _AIOUSB.ADC_ResetFastITScanV

def ADC_SetFastITScanVChannels(*args):
  return _AIOUSB.ADC_SetFastITScanVChannels(*args)
ADC_SetFastITScanVChannels = _AIOUSB.ADC_SetFastITScanVChannels

def ADC_GetFastITScanV(*args):
  return _AIOUSB.ADC_GetFastITScanV(*args)
ADC_GetFastITScanV = _AIOUSB.ADC_GetFastITScanV

def ADC_GetITScanV(*args):
  return _AIOUSB.ADC_GetITScanV(*args)
ADC_GetITScanV = _AIOUSB.ADC_GetITScanV

def DACDirect(*args):
  return _AIOUSB.DACDirect(*args)
DACDirect = _AIOUSB.DACDirect

def DACMultiDirect(*args):
  return _AIOUSB.DACMultiDirect(*args)
DACMultiDirect = _AIOUSB.DACMultiDirect

def DACSetBoardRange(*args):
  return _AIOUSB.DACSetBoardRange(*args)
DACSetBoardRange = _AIOUSB.DACSetBoardRange

def DACOutputOpen(*args):
  return _AIOUSB.DACOutputOpen(*args)
DACOutputOpen = _AIOUSB.DACOutputOpen

def DACOutputClose(*args):
  return _AIOUSB.DACOutputClose(*args)
DACOutputClose = _AIOUSB.DACOutputClose

def DACOutputCloseNoEnd(*args):
  return _AIOUSB.DACOutputCloseNoEnd(*args)
DACOutputCloseNoEnd = _AIOUSB.DACOutputCloseNoEnd

def DACOutputSetCount(*args):
  return _AIOUSB.DACOutputSetCount(*args)
DACOutputSetCount = _AIOUSB.DACOutputSetCount

def DACOutputFrame(*args):
  return _AIOUSB.DACOutputFrame(*args)
DACOutputFrame = _AIOUSB.DACOutputFrame

def DACOutputFrameRaw(*args):
  return _AIOUSB.DACOutputFrameRaw(*args)
DACOutputFrameRaw = _AIOUSB.DACOutputFrameRaw

def DACOutputStart(*args):
  return _AIOUSB.DACOutputStart(*args)
DACOutputStart = _AIOUSB.DACOutputStart

def DACOutputSetInterlock(*args):
  return _AIOUSB.DACOutputSetInterlock(*args)
DACOutputSetInterlock = _AIOUSB.DACOutputSetInterlock

def GetDeviceSerialNumber(*args):
  return _AIOUSB.GetDeviceSerialNumber(*args)
GetDeviceSerialNumber = _AIOUSB.GetDeviceSerialNumber

def GetDeviceBySerialNumber(*args):
  return _AIOUSB.GetDeviceBySerialNumber(*args)
GetDeviceBySerialNumber = _AIOUSB.GetDeviceBySerialNumber

def CustomEEPROMWrite(*args):
  return _AIOUSB.CustomEEPROMWrite(*args)
CustomEEPROMWrite = _AIOUSB.CustomEEPROMWrite

def CustomEEPROMRead(*args):
  return _AIOUSB.CustomEEPROMRead(*args)
CustomEEPROMRead = _AIOUSB.CustomEEPROMRead

def AIOUSB_GetStreamingBlockSize(*args):
  return _AIOUSB.AIOUSB_GetStreamingBlockSize(*args)
AIOUSB_GetStreamingBlockSize = _AIOUSB.AIOUSB_GetStreamingBlockSize

def AIOUSB_SetStreamingBlockSize(*args):
  return _AIOUSB.AIOUSB_SetStreamingBlockSize(*args)
AIOUSB_SetStreamingBlockSize = _AIOUSB.AIOUSB_SetStreamingBlockSize

def AIOUSB_ClearFIFO(*args):
  return _AIOUSB.AIOUSB_ClearFIFO(*args)
AIOUSB_ClearFIFO = _AIOUSB.AIOUSB_ClearFIFO

def AIOUSB_GetVersion():
  return _AIOUSB.AIOUSB_GetVersion()
AIOUSB_GetVersion = _AIOUSB.AIOUSB_GetVersion

def AIOUSB_GetVersionDate():
  return _AIOUSB.AIOUSB_GetVersionDate()
AIOUSB_GetVersionDate = _AIOUSB.AIOUSB_GetVersionDate

def AIOUSB_GetResultCodeAsString(*args):
  return _AIOUSB.AIOUSB_GetResultCodeAsString(*args)
AIOUSB_GetResultCodeAsString = _AIOUSB.AIOUSB_GetResultCodeAsString

def AIOUSB_ListDevices():
  return _AIOUSB.AIOUSB_ListDevices()
AIOUSB_ListDevices = _AIOUSB.AIOUSB_ListDevices

def AIOUSB_Init():
  return _AIOUSB.AIOUSB_Init()
AIOUSB_Init = _AIOUSB.AIOUSB_Init

def AIOUSB_Exit():
  return _AIOUSB.AIOUSB_Exit()
AIOUSB_Exit = _AIOUSB.AIOUSB_Exit

def AIOUSB_Reset(*args):
  return _AIOUSB.AIOUSB_Reset(*args)
AIOUSB_Reset = _AIOUSB.AIOUSB_Reset

def AIOUSB_GetDeviceProperties(*args):
  return _AIOUSB.AIOUSB_GetDeviceProperties(*args)
AIOUSB_GetDeviceProperties = _AIOUSB.AIOUSB_GetDeviceProperties

def AIOUSB_GetDeviceByProductID(*args):
  return _AIOUSB.AIOUSB_GetDeviceByProductID(*args)
AIOUSB_GetDeviceByProductID = _AIOUSB.AIOUSB_GetDeviceByProductID

def AIOUSB_GetMiscClock(*args):
  return _AIOUSB.AIOUSB_GetMiscClock(*args)
AIOUSB_GetMiscClock = _AIOUSB.AIOUSB_GetMiscClock

def AIOUSB_SetMiscClock(*args):
  return _AIOUSB.AIOUSB_SetMiscClock(*args)
AIOUSB_SetMiscClock = _AIOUSB.AIOUSB_SetMiscClock

def AIOUSB_GetCommTimeout(*args):
  return _AIOUSB.AIOUSB_GetCommTimeout(*args)
AIOUSB_GetCommTimeout = _AIOUSB.AIOUSB_GetCommTimeout

def AIOUSB_SetCommTimeout(*args):
  return _AIOUSB.AIOUSB_SetCommTimeout(*args)
AIOUSB_SetCommTimeout = _AIOUSB.AIOUSB_SetCommTimeout

def AIOUSB_IsDiscardFirstSample(*args):
  return _AIOUSB.AIOUSB_IsDiscardFirstSample(*args)
AIOUSB_IsDiscardFirstSample = _AIOUSB.AIOUSB_IsDiscardFirstSample

def AIOUSB_SetDiscardFirstSample(*args):
  return _AIOUSB.AIOUSB_SetDiscardFirstSample(*args)
AIOUSB_SetDiscardFirstSample = _AIOUSB.AIOUSB_SetDiscardFirstSample

def AIOUSB_CountsToVolts(*args):
  return _AIOUSB.AIOUSB_CountsToVolts(*args)
AIOUSB_CountsToVolts = _AIOUSB.AIOUSB_CountsToVolts

def AIOUSB_MultipleCountsToVolts(*args):
  return _AIOUSB.AIOUSB_MultipleCountsToVolts(*args)
AIOUSB_MultipleCountsToVolts = _AIOUSB.AIOUSB_MultipleCountsToVolts

def AIOUSB_VoltsToCounts(*args):
  return _AIOUSB.AIOUSB_VoltsToCounts(*args)
AIOUSB_VoltsToCounts = _AIOUSB.AIOUSB_VoltsToCounts

def AIOUSB_MultipleVoltsToCounts(*args):
  return _AIOUSB.AIOUSB_MultipleVoltsToCounts(*args)
AIOUSB_MultipleVoltsToCounts = _AIOUSB.AIOUSB_MultipleVoltsToCounts

def AIOUSB_ADC_LoadCalTable(*args):
  return _AIOUSB.AIOUSB_ADC_LoadCalTable(*args)
AIOUSB_ADC_LoadCalTable = _AIOUSB.AIOUSB_ADC_LoadCalTable

def AIOUSB_ADC_SetCalTable(*args):
  return _AIOUSB.AIOUSB_ADC_SetCalTable(*args)
AIOUSB_ADC_SetCalTable = _AIOUSB.AIOUSB_ADC_SetCalTable

def AIOUSB_ADC_InternalCal(*args):
  return _AIOUSB.AIOUSB_ADC_InternalCal(*args)
AIOUSB_ADC_InternalCal = _AIOUSB.AIOUSB_ADC_InternalCal

def AIOUSB_SetRegister(*args):
  return _AIOUSB.AIOUSB_SetRegister(*args)
AIOUSB_SetRegister = _AIOUSB.AIOUSB_SetRegister

def AIOUSB_GetRegister(*args):
  return _AIOUSB.AIOUSB_GetRegister(*args)
AIOUSB_GetRegister = _AIOUSB.AIOUSB_GetRegister

def AIOUSB_ADC_ExternalCal(*args):
  return _AIOUSB.AIOUSB_ADC_ExternalCal(*args)
AIOUSB_ADC_ExternalCal = _AIOUSB.AIOUSB_ADC_ExternalCal

def AIOUSB_InitConfigBlock(*args):
  return _AIOUSB.AIOUSB_InitConfigBlock(*args)
AIOUSB_InitConfigBlock = _AIOUSB.AIOUSB_InitConfigBlock

def AIOUSB_SetAllGainCodeAndDiffMode(*args):
  return _AIOUSB.AIOUSB_SetAllGainCodeAndDiffMode(*args)
AIOUSB_SetAllGainCodeAndDiffMode = _AIOUSB.AIOUSB_SetAllGainCodeAndDiffMode

def AIOUSB_GetGainCode(*args):
  return _AIOUSB.AIOUSB_GetGainCode(*args)
AIOUSB_GetGainCode = _AIOUSB.AIOUSB_GetGainCode

def AIOUSB_SetGainCode(*args):
  return _AIOUSB.AIOUSB_SetGainCode(*args)
AIOUSB_SetGainCode = _AIOUSB.AIOUSB_SetGainCode

def AIOUSB_IsDifferentialMode(*args):
  return _AIOUSB.AIOUSB_IsDifferentialMode(*args)
AIOUSB_IsDifferentialMode = _AIOUSB.AIOUSB_IsDifferentialMode

def AIOUSB_SetDifferentialMode(*args):
  return _AIOUSB.AIOUSB_SetDifferentialMode(*args)
AIOUSB_SetDifferentialMode = _AIOUSB.AIOUSB_SetDifferentialMode

def AIOUSB_GetCalMode(*args):
  return _AIOUSB.AIOUSB_GetCalMode(*args)
AIOUSB_GetCalMode = _AIOUSB.AIOUSB_GetCalMode

def AIOUSB_SetCalMode(*args):
  return _AIOUSB.AIOUSB_SetCalMode(*args)
AIOUSB_SetCalMode = _AIOUSB.AIOUSB_SetCalMode

def AIOUSB_GetTriggerMode(*args):
  return _AIOUSB.AIOUSB_GetTriggerMode(*args)
AIOUSB_GetTriggerMode = _AIOUSB.AIOUSB_GetTriggerMode

def AIOUSB_SetTriggerMode(*args):
  return _AIOUSB.AIOUSB_SetTriggerMode(*args)
AIOUSB_SetTriggerMode = _AIOUSB.AIOUSB_SetTriggerMode

def AIOUSB_GetStartChannel(*args):
  return _AIOUSB.AIOUSB_GetStartChannel(*args)
AIOUSB_GetStartChannel = _AIOUSB.AIOUSB_GetStartChannel

def AIOUSB_GetEndChannel(*args):
  return _AIOUSB.AIOUSB_GetEndChannel(*args)
AIOUSB_GetEndChannel = _AIOUSB.AIOUSB_GetEndChannel

def AIOUSB_SetScanRange(*args):
  return _AIOUSB.AIOUSB_SetScanRange(*args)
AIOUSB_SetScanRange = _AIOUSB.AIOUSB_SetScanRange

def AIOUSB_GetOversample(*args):
  return _AIOUSB.AIOUSB_GetOversample(*args)
AIOUSB_GetOversample = _AIOUSB.AIOUSB_GetOversample

def AIOUSB_SetOversample(*args):
  return _AIOUSB.AIOUSB_SetOversample(*args)
AIOUSB_SetOversample = _AIOUSB.AIOUSB_SetOversample
# This file is compatible with both classic and new-style classes.


