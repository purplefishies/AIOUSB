#!/usr/bin/env ruby

require 'prime'

#
#
#
def pulse(timestep=0,*tmpargs)
  args = Hash[*tmpargs]
  frequency = ( args.has_key?("frequency") ? args["frequency"].to_f : 10.0 )
  gain = ( args.has_key?("gain") ? args["gain"].to_f : 1.0 )
  tolerance = ( args.has_key?("tolerance") ? args["tolerance"].to_f : 0.0000001 )
  phase = ( args.has_key?("phase") ? args["phase"].to_f : 0.0 )

  tmpval = ((frequency* timestep) / 0.5)

  if timestep == 0 
    gain*1
  elsif  (tmpval.round - tmpval).abs < tolerance && tmpval.round % 2 == 1
    0
  else
    gain*1
  end
end

#
# Generates a simple table 
#
def generate_table(functions=[:pulse,:pulse,:pulse],frequencies=[40,44,48], points_per_period=2 )
  timer,number_points = calculate_sample_rates( frequencies, points_per_period )
  (0..number_points-1 ).each { |ts|
    timestep = ts *  ( 1e-6 * timer.to_f)
    functions.each_with_index { |fn,i| 
      print (method( fn ).call( ts=timestep, "frequency" => frequencies[i] )).to_s + ","
    }
    print "EOD\n"
  }
  print "LOOP\n"
end

#
#
#
def calculate_sample_rates(frequencies=[40,44,48], points_per_period=2 ) 
  if frequencies.find { |i| i.class == Rational } 
    # Need to up convert each rational into an integer
    tmpfreqs = frequencies.map { |i| (i * i.denominator).to_i }
  else
    tmpfreqs = frequencies
  end
  
  # Find the minimum set of prime numbers that meet all of these frequencies
  common_num = tmpfreqs.map { |i| i.prime_division.collect { |j| j[0] } }.flatten.uniq.inject(1) { |p,i| p*=i }

  # counter_increment = ((common_num / tmpfreqs.first.to_f ) / common_num.to_f * 1000000).to_i
  #( common_num / tmpfreqs.first.to_f ) / ( 
  common_point = (common_num / tmpfreqs.first.to_f ) * tmpfreqs.inject(:lcm) / ( tmpfreqs - [tmpfreqs.first] ).inject(:lcm) / common_num 

  counter_number = points_per_period * tmpfreqs.combination(1).to_a.map { |a| tmpfreqs.inject(:lcm) / a.inject(:lcm).to_f } .inject(1) { |p,i| p *= i }.to_i

  counter_increment = ((common_point / counter_number) * 1_000_000 ).to_i

  min_size = ( tmpfreqs.size + 1 ) * counter_number + 1

  [counter_increment, counter_number, min_size ]

end

